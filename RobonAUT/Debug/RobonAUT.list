
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdfc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800ffc0  0800ffc0  0001ffc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102a8  080102a8  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  080102a8  080102a8  000202a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102b0  080102b0  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102b0  080102b0  000202b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102b4  080102b4  000202b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080102b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200000e0  08010398  000300e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08010398  0003072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003228c  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9b  00000000  00000000  0006239c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00066238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  00067de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029216  00000000  00000000  00069820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026b96  00000000  00000000  00092a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6284  00000000  00000000  000b95cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001af850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007810  00000000  00000000  001af8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000e0 	.word	0x200000e0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800ffa8 	.word	0x0800ffa8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000e4 	.word	0x200000e4
 8000200:	0800ffa8 	.word	0x0800ffa8

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295
 80009f4:	f000 b96e 	b.w	8000cd4 <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	4604      	mov	r4, r0
 8000a18:	468c      	mov	ip, r1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 8083 	bne.w	8000b26 <__udivmoddi4+0x116>
 8000a20:	428a      	cmp	r2, r1
 8000a22:	4617      	mov	r7, r2
 8000a24:	d947      	bls.n	8000ab6 <__udivmoddi4+0xa6>
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	b142      	cbz	r2, 8000a3e <__udivmoddi4+0x2e>
 8000a2c:	f1c2 0020 	rsb	r0, r2, #32
 8000a30:	fa24 f000 	lsr.w	r0, r4, r0
 8000a34:	4091      	lsls	r1, r2
 8000a36:	4097      	lsls	r7, r2
 8000a38:	ea40 0c01 	orr.w	ip, r0, r1
 8000a3c:	4094      	lsls	r4, r2
 8000a3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a42:	0c23      	lsrs	r3, r4, #16
 8000a44:	fbbc f6f8 	udiv	r6, ip, r8
 8000a48:	fa1f fe87 	uxth.w	lr, r7
 8000a4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000a50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a54:	fb06 f10e 	mul.w	r1, r6, lr
 8000a58:	4299      	cmp	r1, r3
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x60>
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a62:	f080 8119 	bcs.w	8000c98 <__udivmoddi4+0x288>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 8116 	bls.w	8000c98 <__udivmoddi4+0x288>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	443b      	add	r3, r7
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a78:	fb08 3310 	mls	r3, r8, r0, r3
 8000a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x8c>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a8e:	f080 8105 	bcs.w	8000c9c <__udivmoddi4+0x28c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f240 8102 	bls.w	8000c9c <__udivmoddi4+0x28c>
 8000a98:	3802      	subs	r0, #2
 8000a9a:	443c      	add	r4, r7
 8000a9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa0:	eba4 040e 	sub.w	r4, r4, lr
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	b11d      	cbz	r5, 8000ab0 <__udivmoddi4+0xa0>
 8000aa8:	40d4      	lsrs	r4, r2
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xaa>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f282 	clz	r2, r2
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d150      	bne.n	8000b64 <__udivmoddi4+0x154>
 8000ac2:	1bcb      	subs	r3, r1, r7
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	fa1f f887 	uxth.w	r8, r7
 8000acc:	2601      	movs	r6, #1
 8000ace:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ad2:	0c21      	lsrs	r1, r4, #16
 8000ad4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ad8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000adc:	fb08 f30c 	mul.w	r3, r8, ip
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0xe4>
 8000ae4:	1879      	adds	r1, r7, r1
 8000ae6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aea:	d202      	bcs.n	8000af2 <__udivmoddi4+0xe2>
 8000aec:	428b      	cmp	r3, r1
 8000aee:	f200 80e9 	bhi.w	8000cc4 <__udivmoddi4+0x2b4>
 8000af2:	4684      	mov	ip, r0
 8000af4:	1ac9      	subs	r1, r1, r3
 8000af6:	b2a3      	uxth	r3, r4
 8000af8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000afc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b04:	fb08 f800 	mul.w	r8, r8, r0
 8000b08:	45a0      	cmp	r8, r4
 8000b0a:	d907      	bls.n	8000b1c <__udivmoddi4+0x10c>
 8000b0c:	193c      	adds	r4, r7, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x10a>
 8000b14:	45a0      	cmp	r8, r4
 8000b16:	f200 80d9 	bhi.w	8000ccc <__udivmoddi4+0x2bc>
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	eba4 0408 	sub.w	r4, r4, r8
 8000b20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b24:	e7bf      	b.n	8000aa6 <__udivmoddi4+0x96>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x12e>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80b1 	beq.w	8000c92 <__udivmoddi4+0x282>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x1cc>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0x140>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80b8 	bhi.w	8000cc0 <__udivmoddi4+0x2b0>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0103 	sbc.w	r1, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	468c      	mov	ip, r1
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0a8      	beq.n	8000ab0 <__udivmoddi4+0xa0>
 8000b5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0xa0>
 8000b64:	f1c2 0320 	rsb	r3, r2, #32
 8000b68:	fa20 f603 	lsr.w	r6, r0, r3
 8000b6c:	4097      	lsls	r7, r2
 8000b6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000b72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b76:	40d9      	lsrs	r1, r3
 8000b78:	4330      	orrs	r0, r6
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b80:	fa1f f887 	uxth.w	r8, r7
 8000b84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8c:	fb06 f108 	mul.w	r1, r6, r8
 8000b90:	4299      	cmp	r1, r3
 8000b92:	fa04 f402 	lsl.w	r4, r4, r2
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x19c>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b9e:	f080 808d 	bcs.w	8000cbc <__udivmoddi4+0x2ac>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 808a 	bls.w	8000cbc <__udivmoddi4+0x2ac>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b281      	uxth	r1, r0
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bbc:	fb00 f308 	mul.w	r3, r0, r8
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d907      	bls.n	8000bd4 <__udivmoddi4+0x1c4>
 8000bc4:	1879      	adds	r1, r7, r1
 8000bc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bca:	d273      	bcs.n	8000cb4 <__udivmoddi4+0x2a4>
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d971      	bls.n	8000cb4 <__udivmoddi4+0x2a4>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	4439      	add	r1, r7
 8000bd4:	1acb      	subs	r3, r1, r3
 8000bd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bda:	e778      	b.n	8000ace <__udivmoddi4+0xbe>
 8000bdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000be0:	fa03 f406 	lsl.w	r4, r3, r6
 8000be4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000be8:	431c      	orrs	r4, r3
 8000bea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	0c3b      	lsrs	r3, r7, #16
 8000bfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c02:	fa1f f884 	uxth.w	r8, r4
 8000c06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000c12:	458a      	cmp	sl, r1
 8000c14:	fa02 f206 	lsl.w	r2, r2, r6
 8000c18:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x220>
 8000c1e:	1861      	adds	r1, r4, r1
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	d248      	bcs.n	8000cb8 <__udivmoddi4+0x2a8>
 8000c26:	458a      	cmp	sl, r1
 8000c28:	d946      	bls.n	8000cb8 <__udivmoddi4+0x2a8>
 8000c2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2e:	4421      	add	r1, r4
 8000c30:	eba1 010a 	sub.w	r1, r1, sl
 8000c34:	b2bf      	uxth	r7, r7
 8000c36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c42:	fb00 f808 	mul.w	r8, r0, r8
 8000c46:	45b8      	cmp	r8, r7
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x24a>
 8000c4a:	19e7      	adds	r7, r4, r7
 8000c4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c50:	d22e      	bcs.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c52:	45b8      	cmp	r8, r7
 8000c54:	d92c      	bls.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c56:	3802      	subs	r0, #2
 8000c58:	4427      	add	r7, r4
 8000c5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5e:	eba7 0708 	sub.w	r7, r7, r8
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	454f      	cmp	r7, r9
 8000c68:	46c6      	mov	lr, r8
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	d31a      	bcc.n	8000ca4 <__udivmoddi4+0x294>
 8000c6e:	d017      	beq.n	8000ca0 <__udivmoddi4+0x290>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x27a>
 8000c72:	ebb3 020e 	subs.w	r2, r3, lr
 8000c76:	eb67 0701 	sbc.w	r7, r7, r1
 8000c7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c7e:	40f2      	lsrs	r2, r6
 8000c80:	ea4c 0202 	orr.w	r2, ip, r2
 8000c84:	40f7      	lsrs	r7, r6
 8000c86:	e9c5 2700 	strd	r2, r7, [r5]
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	462e      	mov	r6, r5
 8000c94:	4628      	mov	r0, r5
 8000c96:	e70b      	b.n	8000ab0 <__udivmoddi4+0xa0>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	e6e9      	b.n	8000a70 <__udivmoddi4+0x60>
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	e6fd      	b.n	8000a9c <__udivmoddi4+0x8c>
 8000ca0:	4543      	cmp	r3, r8
 8000ca2:	d2e5      	bcs.n	8000c70 <__udivmoddi4+0x260>
 8000ca4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ca8:	eb69 0104 	sbc.w	r1, r9, r4
 8000cac:	3801      	subs	r0, #1
 8000cae:	e7df      	b.n	8000c70 <__udivmoddi4+0x260>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e7d2      	b.n	8000c5a <__udivmoddi4+0x24a>
 8000cb4:	4660      	mov	r0, ip
 8000cb6:	e78d      	b.n	8000bd4 <__udivmoddi4+0x1c4>
 8000cb8:	4681      	mov	r9, r0
 8000cba:	e7b9      	b.n	8000c30 <__udivmoddi4+0x220>
 8000cbc:	4666      	mov	r6, ip
 8000cbe:	e775      	b.n	8000bac <__udivmoddi4+0x19c>
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e74a      	b.n	8000b5a <__udivmoddi4+0x14a>
 8000cc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cc8:	4439      	add	r1, r7
 8000cca:	e713      	b.n	8000af4 <__udivmoddi4+0xe4>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	443c      	add	r4, r7
 8000cd0:	e724      	b.n	8000b1c <__udivmoddi4+0x10c>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_idiv0>:
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b0a8      	sub	sp, #160	; 0xa0
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000d1a:	f00f f8c7 	bl	800feac <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4aaa      	ldr	r2, [pc, #680]	; (8000fcc <SERVO_Init+0x2f4>)
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	4413      	add	r3, r2
 8000d26:	3314      	adds	r3, #20
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbac 	bl	8000488 <__aeabi_ui2d>
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4ba6      	ldr	r3, [pc, #664]	; (8000fd0 <SERVO_Init+0x2f8>)
 8000d36:	f7ff fd4b 	bl	80007d0 <__aeabi_ddiv>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	f7ff fe2d 	bl	80009a0 <__aeabi_d2uiz>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4a9f      	ldr	r2, [pc, #636]	; (8000fcc <SERVO_Init+0x2f4>)
 8000d50:	015b      	lsls	r3, r3, #5
 8000d52:	4413      	add	r3, r2
 8000d54:	3314      	adds	r3, #20
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb95 	bl	8000488 <__aeabi_ui2d>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000d66:	f7ff fb8f 	bl	8000488 <__aeabi_ui2d>
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	4b99      	ldr	r3, [pc, #612]	; (8000fd4 <SERVO_Init+0x2fc>)
 8000d70:	f7ff fa4e 	bl	8000210 <__adddf3>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b95      	ldr	r3, [pc, #596]	; (8000fd8 <SERVO_Init+0x300>)
 8000d82:	f7ff fbfb 	bl	800057c <__aeabi_dmul>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fd1f 	bl	80007d0 <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b8d      	ldr	r3, [pc, #564]	; (8000fd4 <SERVO_Init+0x2fc>)
 8000da0:	f7ff fa34 	bl	800020c <__aeabi_dsub>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fdf8 	bl	80009a0 <__aeabi_d2uiz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000db6:	2313      	movs	r3, #19
 8000db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000dbc:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4a81      	ldr	r2, [pc, #516]	; (8000fcc <SERVO_Init+0x2f4>)
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4413      	add	r3, r2
 8000dcc:	3308      	adds	r3, #8
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a82      	ldr	r2, [pc, #520]	; (8000fdc <SERVO_Init+0x304>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	4b81      	ldr	r3, [pc, #516]	; (8000fe0 <SERVO_Init+0x308>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a80      	ldr	r2, [pc, #512]	; (8000fe0 <SERVO_Init+0x308>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b7e      	ldr	r3, [pc, #504]	; (8000fe0 <SERVO_Init+0x308>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	e046      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	4a75      	ldr	r2, [pc, #468]	; (8000fcc <SERVO_Init+0x2f4>)
 8000df8:	015b      	lsls	r3, r3, #5
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d10e      	bne.n	8000e24 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b75      	ldr	r3, [pc, #468]	; (8000fe0 <SERVO_Init+0x308>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a74      	ldr	r2, [pc, #464]	; (8000fe0 <SERVO_Init+0x308>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b72      	ldr	r3, [pc, #456]	; (8000fe0 <SERVO_Init+0x308>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	e02e      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4a69      	ldr	r2, [pc, #420]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e28:	015b      	lsls	r3, r3, #5
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3308      	adds	r3, #8
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a6c      	ldr	r2, [pc, #432]	; (8000fe4 <SERVO_Init+0x30c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b69      	ldr	r3, [pc, #420]	; (8000fe0 <SERVO_Init+0x308>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a68      	ldr	r2, [pc, #416]	; (8000fe0 <SERVO_Init+0x308>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b66      	ldr	r3, [pc, #408]	; (8000fe0 <SERVO_Init+0x308>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	e016      	b.n	8000e82 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4a5d      	ldr	r2, [pc, #372]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e58:	015b      	lsls	r3, r3, #5
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a61      	ldr	r2, [pc, #388]	; (8000fe8 <SERVO_Init+0x310>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10d      	bne.n	8000e82 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <SERVO_Init+0x308>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <SERVO_Init+0x308>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <SERVO_Init+0x308>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <SERVO_Init+0x2f4>)
 8000e86:	015b      	lsls	r3, r3, #5
 8000e88:	4413      	add	r3, r2
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8000e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e94:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 8000e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 f96d 	bl	800718c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000eba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fa17 	bl	80082f8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fb12 	bl	80074f8 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000ee0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f008 f9a4 	bl	8009238 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef0:	2360      	movs	r3, #96	; 0x60
 8000ef2:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <SERVO_Init+0x2f4>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3310      	adds	r3, #16
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4618      	mov	r0, r3
 8000f16:	f007 f817 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8000f1a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000f1e:	f7ff fab3 	bl	8000488 <__aeabi_ui2d>
 8000f22:	4604      	mov	r4, r0
 8000f24:	460d      	mov	r5, r1
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <SERVO_Init+0x2f4>)
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3318      	adds	r3, #24
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff faca 	bl	80004cc <__aeabi_f2d>
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <SERVO_Init+0x314>)
 8000f3e:	f7ff fc47 	bl	80007d0 <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4620      	mov	r0, r4
 8000f48:	4629      	mov	r1, r5
 8000f4a:	f7ff fb17 	bl	800057c <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	88fc      	ldrh	r4, [r7, #6]
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fd22 	bl	80009a0 <__aeabi_d2uiz>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <SERVO_Init+0x318>)
 8000f62:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8000f66:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000f6a:	f7ff fa8d 	bl	8000488 <__aeabi_ui2d>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <SERVO_Init+0x31c>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faa9 	bl	80004cc <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <SERVO_Init+0x314>)
 8000f80:	f7ff fc26 	bl	80007d0 <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff faf6 	bl	800057c <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	88fc      	ldrh	r4, [r7, #6]
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd01 	bl	80009a0 <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <SERVO_Init+0x318>)
 8000fa4:	00a3      	lsls	r3, r4, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	460a      	mov	r2, r1
 8000faa:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SERVO_Init+0x2f4>)
 8000fb0:	015b      	lsls	r3, r3, #5
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fb8a 	bl	80076d8 <HAL_TIM_PWM_Start>

}
 8000fc4:	bf00      	nop
 8000fc6:	37a0      	adds	r7, #160	; 0xa0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	08010240 	.word	0x08010240
 8000fd0:	41490000 	.word	0x41490000
 8000fd4:	3ff00000 	.word	0x3ff00000
 8000fd8:	40490000 	.word	0x40490000
 8000fdc:	40001800 	.word	0x40001800
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	40000800 	.word	0x40000800
 8000fec:	40340000 	.word	0x40340000
 8000ff0:	200000fc 	.word	0x200000fc
 8000ff4:	40066666 	.word	0x40066666

08000ff8 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	ed87 0a00 	vstr	s0, [r7]
 8001004:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4a1f      	ldr	r2, [pc, #124]	; (800108c <SERVO_MoveTo+0x94>)
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	885b      	ldrh	r3, [r3, #2]
 8001014:	4619      	mov	r1, r3
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <SERVO_MoveTo+0x94>)
 800101a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800101e:	1acb      	subs	r3, r1, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	edd7 7a00 	vldr	s15, [r7]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	ee17 0a90 	vmov	r0, s15
 8001034:	f7ff fa4a 	bl	80004cc <__aeabi_f2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SERVO_MoveTo+0x98>)
 800103e:	f7ff fbc7 	bl	80007d0 <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4614      	mov	r4, r2
 8001048:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <SERVO_MoveTo+0x94>)
 800104e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa28 	bl	80004a8 <__aeabi_i2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff f8d6 	bl	8000210 <__adddf3>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fc98 	bl	80009a0 <__aeabi_d2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <SERVO_MoveTo+0x9c>)
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	4413      	add	r3, r2
 800107c:	330c      	adds	r3, #12
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	89fa      	ldrh	r2, [r7, #14]
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	200000fc 	.word	0x200000fc
 8001090:	40668000 	.word	0x40668000
 8001094:	08010240 	.word	0x08010240

08001098 <HAL_UART_RxCpltCallback>:
void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny);	//aktualisan chip selectelt adc-bol parameterben adott chanelen olvas; ret: [0, 3]
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
				kanyarban_vagy_egyenes);
		bluetooth_i++;
		bluetooth_len = strlen(bluetooth_buffer);
		//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);
	}*/
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 80010c6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t tavolsag1_buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t vl53l1_c; // center module
	VL53L1_DEV Dev = &vl53l1_c;
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f002 f806 	bl	80030e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 faf6 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 ff48 	bl	8001f6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010dc:	f000 fefc 	bl	8001ed8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010e0:	f000 fb62 	bl	80017a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010e4:	f000 fb8e 	bl	8001804 <MX_I2C2_Init>
  MX_SPI2_Init();
 80010e8:	f000 fc1e 	bl	8001928 <MX_SPI2_Init>
  MX_SPI3_Init();
 80010ec:	f000 fc52 	bl	8001994 <MX_SPI3_Init>
  MX_TIM3_Init();
 80010f0:	f000 fcd4 	bl	8001a9c <MX_TIM3_Init>
  MX_TIM4_Init();
 80010f4:	f000 fd2c 	bl	8001b50 <MX_TIM4_Init>
  MX_UART4_Init();
 80010f8:	f000 fe9a 	bl	8001e30 <MX_UART4_Init>
  MX_TIM8_Init();
 80010fc:	f000 fd7c 	bl	8001bf8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001100:	f000 fec0 	bl	8001e84 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001104:	f000 fbac 	bl	8001860 <MX_I2C3_Init>
  MX_TIM12_Init();
 8001108:	f000 fe22 	bl	8001d50 <MX_TIM12_Init>
  MX_DMA_Init();
 800110c:	f000 ff0e 	bl	8001f2c <MX_DMA_Init>
  MX_TIM2_Init();
 8001110:	f000 fc76 	bl	8001a00 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001114:	f000 fbd2 	bl	80018bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fddd 	bl	8000cd8 <SERVO_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 800111e:	2000      	movs	r0, #0
 8001120:	f00e fd36 	bl	800fb90 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 8001124:	2001      	movs	r0, #1
 8001126:	f00e fd33 	bl	800fb90 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 800112a:	2100      	movs	r1, #0
 800112c:	2000      	movs	r0, #0
 800112e:	f00e fe05 	bl	800fd3c <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	2001      	movs	r0, #1
 8001136:	f00e fe01 	bl	800fd3c <DC_MOTOR_Start>

	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 800113a:	4884      	ldr	r0, [pc, #528]	; (800134c <main+0x28c>)
 800113c:	f006 f916 	bl	800736c <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 8001140:	2104      	movs	r1, #4
 8001142:	4883      	ldr	r0, [pc, #524]	; (8001350 <main+0x290>)
 8001144:	f006 fac8 	bl	80076d8 <HAL_TIM_PWM_Start>

	//Vonalszenzor init
	Vonalszenzor_Init();
 8001148:	f000 ffda 	bl	8002100 <Vonalszenzor_Init>


	// initialize vl53l1x communication parameters
	Dev->I2cHandle = &hi2c1;
 800114c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001150:	4a80      	ldr	r2, [pc, #512]	; (8001354 <main+0x294>)
 8001152:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 8001156:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800115a:	2252      	movs	r2, #82	; 0x52
 800115c:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	/*** Initialize GPIO expanders ***/
	// Unused GPIO should be configured as outputs to minimize the power consumption
	tavolsag1_buff[0] = 0x14; // GPDR (GPIO set direction register)
 8001160:	2314      	movs	r3, #20
 8001162:	f887 33e4 	strb.w	r3, [r7, #996]	; 0x3e4
	tavolsag1_buff[1] = 0xFF; // GPIO_0 - GPIO_7
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
	tavolsag1_buff[2] = 0xFF; // GPIO_8 - GPIO_15
 800116c:	23ff      	movs	r3, #255	; 0xff
 800116e:	f887 33e6 	strb.w	r3, [r7, #998]	; 0x3e6
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 3, 0xFFFF );
 8001172:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8001176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2303      	movs	r3, #3
 800117e:	2184      	movs	r1, #132	; 0x84
 8001180:	4874      	ldr	r0, [pc, #464]	; (8001354 <main+0x294>)
 8001182:	f003 fba7 	bl	80048d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, tavolsag1_buff, 3, 0xFFFF );
 8001186:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 800118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2303      	movs	r3, #3
 8001192:	2186      	movs	r1, #134	; 0x86
 8001194:	486f      	ldr	r0, [pc, #444]	; (8001354 <main+0x294>)
 8001196:	f003 fb9d 	bl	80048d4 <HAL_I2C_Master_Transmit>

	// clear XSHUT (disable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 800119a:	2313      	movs	r3, #19
 800119c:	f887 33e4 	strb.w	r3, [r7, #996]	; 0x3e4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80011a0:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80011a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2184      	movs	r1, #132	; 0x84
 80011ae:	4869      	ldr	r0, [pc, #420]	; (8001354 <main+0x294>)
 80011b0:	f003 fb90 	bl	80048d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80011b4:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80011b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2184      	movs	r1, #132	; 0x84
 80011c2:	4864      	ldr	r0, [pc, #400]	; (8001354 <main+0x294>)
 80011c4:	f003 fc84 	bl	8004ad0 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 80011c8:	f897 33e4 	ldrb.w	r3, [r7, #996]	; 0x3e4
 80011cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80011d6:	2313      	movs	r3, #19
 80011d8:	f887 33e4 	strb.w	r3, [r7, #996]	; 0x3e4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 80011dc:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80011e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2302      	movs	r3, #2
 80011e8:	2184      	movs	r1, #132	; 0x84
 80011ea:	485a      	ldr	r0, [pc, #360]	; (8001354 <main+0x294>)
 80011ec:	f003 fb72 	bl	80048d4 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 ); // 2ms reset time
 80011f0:	2002      	movs	r0, #2
 80011f2:	f001 ffe7 	bl	80031c4 <HAL_Delay>

	// set XSHUT (enable center module) -> expander 1, GPIO_15
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 80011f6:	2313      	movs	r3, #19
 80011f8:	f887 33e4 	strb.w	r3, [r7, #996]	; 0x3e4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 80011fc:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8001200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	2184      	movs	r1, #132	; 0x84
 800120a:	4852      	ldr	r0, [pc, #328]	; (8001354 <main+0x294>)
 800120c:	f003 fb62 	bl	80048d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 1, 0xFFFF );
 8001210:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8001214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	2184      	movs	r1, #132	; 0x84
 800121e:	484d      	ldr	r0, [pc, #308]	; (8001354 <main+0x294>)
 8001220:	f003 fc56 	bl	8004ad0 <HAL_I2C_Master_Receive>
	tavolsag1_buff[1] = tavolsag1_buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 8001224:	f897 33e4 	ldrb.w	r3, [r7, #996]	; 0x3e4
 8001228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
	tavolsag1_buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8001232:	2313      	movs	r3, #19
 8001234:	f887 33e4 	strb.w	r3, [r7, #996]	; 0x3e4
	HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, tavolsag1_buff, 2, 0xFFFF );
 8001238:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 800123c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2302      	movs	r3, #2
 8001244:	2184      	movs	r1, #132	; 0x84
 8001246:	4843      	ldr	r0, [pc, #268]	; (8001354 <main+0x294>)
 8001248:	f003 fb44 	bl	80048d4 <HAL_I2C_Master_Transmit>

	HAL_Delay( 2 );
 800124c:	2002      	movs	r0, #2
 800124e:	f001 ffb9 	bl	80031c4 <HAL_Delay>

	/*** VL53L1X Initialization ***/
	VL53L1_WaitDeviceBooted( Dev );
 8001252:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001256:	f009 fa41 	bl	800a6dc <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit( Dev );
 800125a:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800125e:	f009 f9e5 	bl	800a62c <VL53L1_DataInit>
	VL53L1_StaticInit( Dev );
 8001262:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001266:	f009 fa1a 	bl	800a69e <VL53L1_StaticInit>
	VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 800126a:	2103      	movs	r1, #3
 800126c:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001270:	f009 fb66 	bl	800a940 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8001274:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001278:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800127c:	f009 fbd6 	bl	800aa2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 8001280:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001284:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001288:	f009 fd5c 	bl	800ad44 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	VL53L1_StartMeasurement( Dev );
 800128c:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001290:	f009 fe96 	bl	800afc0 <VL53L1_StartMeasurement>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	uint8_t temp_radio = '?';
 8001294:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001298:	223f      	movs	r2, #63	; 0x3f
 800129a:	701a      	strb	r2, [r3, #0]
	while (1) {
		//radios modul
		temp_radio = '?';
 800129c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80012a0:	223f      	movs	r2, #63	; 0x3f
 80012a2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(&huart1, &temp_radio, 1, 5000);
 80012a4:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80012a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ac:	2201      	movs	r2, #1
 80012ae:	482a      	ldr	r0, [pc, #168]	; (8001358 <main+0x298>)
 80012b0:	f008 fa5a 	bl	8009768 <HAL_UART_Receive>
		int i = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
		while(temp_radio != 0x10) {
 80012ba:	e015      	b.n	80012e8 <main+0x228>
			kapuk[i] = temp_radio;
 80012bc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80012c0:	7819      	ldrb	r1, [r3, #0]
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <main+0x29c>)
 80012c4:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80012c8:	4413      	add	r3, r2
 80012ca:	460a      	mov	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
			i++;
 80012ce:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80012d2:	3301      	adds	r3, #1
 80012d4:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
			HAL_UART_Receive(&huart1, &temp_radio, 1, 5000);
 80012d8:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80012dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80012e0:	2201      	movs	r2, #1
 80012e2:	481d      	ldr	r0, [pc, #116]	; (8001358 <main+0x298>)
 80012e4:	f008 fa40 	bl	8009768 <HAL_UART_Receive>
		while(temp_radio != 0x10) {
 80012e8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d1e4      	bne.n	80012bc <main+0x1fc>
		}
		kapu0 = kapuk[0];
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <main+0x29c>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <main+0x2a0>)
 80012f8:	701a      	strb	r2, [r3, #0]
		kapu1 = kapuk[1];
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <main+0x29c>)
 80012fc:	785a      	ldrb	r2, [r3, #1]
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <main+0x2a4>)
 8001300:	701a      	strb	r2, [r3, #0]
		kapu2 = kapuk[2];
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <main+0x29c>)
 8001304:	789a      	ldrb	r2, [r3, #2]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <main+0x2a8>)
 8001308:	701a      	strb	r2, [r3, #0]
		kapu3 = kapuk[3];
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <main+0x29c>)
 800130c:	78da      	ldrb	r2, [r3, #3]
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <main+0x2ac>)
 8001310:	701a      	strb	r2, [r3, #0]
		kapu4 = kapuk[4];
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <main+0x29c>)
 8001314:	791a      	ldrb	r2, [r3, #4]
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <main+0x2b0>)
 8001318:	701a      	strb	r2, [r3, #0]
		kapu5 = kapuk[5];
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <main+0x29c>)
 800131c:	795a      	ldrb	r2, [r3, #5]
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <main+0x2b4>)
 8001320:	701a      	strb	r2, [r3, #0]

		uint8_t vonal_eredmeny[32] = { 0 };
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	3304      	adds	r3, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	619a      	str	r2, [r3, #24]
		Vonalszenzor_operal(vonal_eredmeny);
 800133a:	463b      	mov	r3, r7
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fef1 	bl	8002124 <Vonalszenzor_operal>
		for(int i=0; i < 32-1; i++) {
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001348:	e030      	b.n	80013ac <main+0x2ec>
 800134a:	bf00      	nop
 800134c:	20000554 	.word	0x20000554
 8001350:	200005e0 	.word	0x200005e0
 8001354:	200002cc 	.word	0x200002cc
 8001358:	20000474 	.word	0x20000474
 800135c:	20000184 	.word	0x20000184
 8001360:	2000009c 	.word	0x2000009c
 8001364:	2000009d 	.word	0x2000009d
 8001368:	2000009e 	.word	0x2000009e
 800136c:	2000009f 	.word	0x2000009f
 8001370:	200000a0 	.word	0x200000a0
 8001374:	200000a1 	.word	0x200000a1
			if(vonal_eredmeny[i] > 9) {
 8001378:	463a      	mov	r2, r7
 800137a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b09      	cmp	r3, #9
 8001384:	d90d      	bls.n	80013a2 <main+0x2e2>
				if(vonal_eredmeny[i+1] > VONAL_THRESHOLD) {
 8001386:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800138a:	3301      	adds	r3, #1
 800138c:	463a      	mov	r2, r7
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	461a      	mov	r2, r3
 8001392:	4ba1      	ldr	r3, [pc, #644]	; (8001618 <main+0x558>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	dd03      	ble.n	80013a2 <main+0x2e2>
					vonal1 = i;
 800139a:	4aa0      	ldr	r2, [pc, #640]	; (800161c <main+0x55c>)
 800139c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80013a0:	6013      	str	r3, [r2, #0]
		for(int i=0; i < 32-1; i++) {
 80013a2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80013a6:	3301      	adds	r3, #1
 80013a8:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80013ac:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80013b0:	2b1e      	cmp	r3, #30
 80013b2:	dde1      	ble.n	8001378 <main+0x2b8>
				}
			}
		}
		sotet0 = vonal_eredmeny[0];
 80013b4:	463b      	mov	r3, r7
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b99      	ldr	r3, [pc, #612]	; (8001620 <main+0x560>)
 80013bc:	601a      	str	r2, [r3, #0]
		sotet1 = vonal_eredmeny[1];
 80013be:	463b      	mov	r3, r7
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b97      	ldr	r3, [pc, #604]	; (8001624 <main+0x564>)
 80013c6:	601a      	str	r2, [r3, #0]
		sotet2 = vonal_eredmeny[2];
 80013c8:	463b      	mov	r3, r7
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b96      	ldr	r3, [pc, #600]	; (8001628 <main+0x568>)
 80013d0:	601a      	str	r2, [r3, #0]
		sotet3 = vonal_eredmeny[3];
 80013d2:	463b      	mov	r3, r7
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b94      	ldr	r3, [pc, #592]	; (800162c <main+0x56c>)
 80013da:	601a      	str	r2, [r3, #0]
		sotet4 = vonal_eredmeny[4];
 80013dc:	463b      	mov	r3, r7
 80013de:	791b      	ldrb	r3, [r3, #4]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b93      	ldr	r3, [pc, #588]	; (8001630 <main+0x570>)
 80013e4:	601a      	str	r2, [r3, #0]
		sotet5 = vonal_eredmeny[5];
 80013e6:	463b      	mov	r3, r7
 80013e8:	795b      	ldrb	r3, [r3, #5]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b91      	ldr	r3, [pc, #580]	; (8001634 <main+0x574>)
 80013ee:	601a      	str	r2, [r3, #0]
		sotet6 = vonal_eredmeny[6];
 80013f0:	463b      	mov	r3, r7
 80013f2:	799b      	ldrb	r3, [r3, #6]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b90      	ldr	r3, [pc, #576]	; (8001638 <main+0x578>)
 80013f8:	601a      	str	r2, [r3, #0]
		sotet7 = vonal_eredmeny[7];
 80013fa:	463b      	mov	r3, r7
 80013fc:	79db      	ldrb	r3, [r3, #7]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b8e      	ldr	r3, [pc, #568]	; (800163c <main+0x57c>)
 8001402:	601a      	str	r2, [r3, #0]
		sotet8 = vonal_eredmeny[8];
 8001404:	463b      	mov	r3, r7
 8001406:	7a1b      	ldrb	r3, [r3, #8]
 8001408:	461a      	mov	r2, r3
 800140a:	4b8d      	ldr	r3, [pc, #564]	; (8001640 <main+0x580>)
 800140c:	601a      	str	r2, [r3, #0]
		sotet9 = vonal_eredmeny[9];
 800140e:	463b      	mov	r3, r7
 8001410:	7a5b      	ldrb	r3, [r3, #9]
 8001412:	461a      	mov	r2, r3
 8001414:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <main+0x584>)
 8001416:	601a      	str	r2, [r3, #0]
		sotet10 = vonal_eredmeny[10];
 8001418:	463b      	mov	r3, r7
 800141a:	7a9b      	ldrb	r3, [r3, #10]
 800141c:	461a      	mov	r2, r3
 800141e:	4b8a      	ldr	r3, [pc, #552]	; (8001648 <main+0x588>)
 8001420:	601a      	str	r2, [r3, #0]
		sotet11 = vonal_eredmeny[11];
 8001422:	463b      	mov	r3, r7
 8001424:	7adb      	ldrb	r3, [r3, #11]
 8001426:	461a      	mov	r2, r3
 8001428:	4b88      	ldr	r3, [pc, #544]	; (800164c <main+0x58c>)
 800142a:	601a      	str	r2, [r3, #0]
		sotet12 = vonal_eredmeny[12];
 800142c:	463b      	mov	r3, r7
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	461a      	mov	r2, r3
 8001432:	4b87      	ldr	r3, [pc, #540]	; (8001650 <main+0x590>)
 8001434:	601a      	str	r2, [r3, #0]
		sotet13 = vonal_eredmeny[13];
 8001436:	463b      	mov	r3, r7
 8001438:	7b5b      	ldrb	r3, [r3, #13]
 800143a:	461a      	mov	r2, r3
 800143c:	4b85      	ldr	r3, [pc, #532]	; (8001654 <main+0x594>)
 800143e:	601a      	str	r2, [r3, #0]
		sotet14 = vonal_eredmeny[14];
 8001440:	463b      	mov	r3, r7
 8001442:	7b9b      	ldrb	r3, [r3, #14]
 8001444:	461a      	mov	r2, r3
 8001446:	4b84      	ldr	r3, [pc, #528]	; (8001658 <main+0x598>)
 8001448:	601a      	str	r2, [r3, #0]
		sotet15 = vonal_eredmeny[15];
 800144a:	463b      	mov	r3, r7
 800144c:	7bdb      	ldrb	r3, [r3, #15]
 800144e:	461a      	mov	r2, r3
 8001450:	4b82      	ldr	r3, [pc, #520]	; (800165c <main+0x59c>)
 8001452:	601a      	str	r2, [r3, #0]
		sotet16 = vonal_eredmeny[16];
 8001454:	463b      	mov	r3, r7
 8001456:	7c1b      	ldrb	r3, [r3, #16]
 8001458:	461a      	mov	r2, r3
 800145a:	4b81      	ldr	r3, [pc, #516]	; (8001660 <main+0x5a0>)
 800145c:	601a      	str	r2, [r3, #0]
		sotet17 = vonal_eredmeny[17];
 800145e:	463b      	mov	r3, r7
 8001460:	7c5b      	ldrb	r3, [r3, #17]
 8001462:	461a      	mov	r2, r3
 8001464:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <main+0x5a4>)
 8001466:	601a      	str	r2, [r3, #0]
		sotet18 = vonal_eredmeny[18];
 8001468:	463b      	mov	r3, r7
 800146a:	7c9b      	ldrb	r3, [r3, #18]
 800146c:	461a      	mov	r2, r3
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <main+0x5a8>)
 8001470:	601a      	str	r2, [r3, #0]
		sotet19 = vonal_eredmeny[19];
 8001472:	463b      	mov	r3, r7
 8001474:	7cdb      	ldrb	r3, [r3, #19]
 8001476:	461a      	mov	r2, r3
 8001478:	4b7c      	ldr	r3, [pc, #496]	; (800166c <main+0x5ac>)
 800147a:	601a      	str	r2, [r3, #0]
		sotet20 = vonal_eredmeny[20];
 800147c:	463b      	mov	r3, r7
 800147e:	7d1b      	ldrb	r3, [r3, #20]
 8001480:	461a      	mov	r2, r3
 8001482:	4b7b      	ldr	r3, [pc, #492]	; (8001670 <main+0x5b0>)
 8001484:	601a      	str	r2, [r3, #0]
		sotet21 = vonal_eredmeny[21];
 8001486:	463b      	mov	r3, r7
 8001488:	7d5b      	ldrb	r3, [r3, #21]
 800148a:	461a      	mov	r2, r3
 800148c:	4b79      	ldr	r3, [pc, #484]	; (8001674 <main+0x5b4>)
 800148e:	601a      	str	r2, [r3, #0]
		sotet22 = vonal_eredmeny[22];
 8001490:	463b      	mov	r3, r7
 8001492:	7d9b      	ldrb	r3, [r3, #22]
 8001494:	461a      	mov	r2, r3
 8001496:	4b78      	ldr	r3, [pc, #480]	; (8001678 <main+0x5b8>)
 8001498:	601a      	str	r2, [r3, #0]
		sotet23 = vonal_eredmeny[23];
 800149a:	463b      	mov	r3, r7
 800149c:	7ddb      	ldrb	r3, [r3, #23]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b76      	ldr	r3, [pc, #472]	; (800167c <main+0x5bc>)
 80014a2:	601a      	str	r2, [r3, #0]
		sotet24 = vonal_eredmeny[24];
 80014a4:	463b      	mov	r3, r7
 80014a6:	7e1b      	ldrb	r3, [r3, #24]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b75      	ldr	r3, [pc, #468]	; (8001680 <main+0x5c0>)
 80014ac:	601a      	str	r2, [r3, #0]
		sotet25 = vonal_eredmeny[25];
 80014ae:	463b      	mov	r3, r7
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b73      	ldr	r3, [pc, #460]	; (8001684 <main+0x5c4>)
 80014b6:	601a      	str	r2, [r3, #0]
		sotet26 = vonal_eredmeny[26];
 80014b8:	463b      	mov	r3, r7
 80014ba:	7e9b      	ldrb	r3, [r3, #26]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b72      	ldr	r3, [pc, #456]	; (8001688 <main+0x5c8>)
 80014c0:	601a      	str	r2, [r3, #0]
		sotet27 = vonal_eredmeny[27];
 80014c2:	463b      	mov	r3, r7
 80014c4:	7edb      	ldrb	r3, [r3, #27]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b70      	ldr	r3, [pc, #448]	; (800168c <main+0x5cc>)
 80014ca:	601a      	str	r2, [r3, #0]
		sotet28 = vonal_eredmeny[28];
 80014cc:	463b      	mov	r3, r7
 80014ce:	7f1b      	ldrb	r3, [r3, #28]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <main+0x5d0>)
 80014d4:	601a      	str	r2, [r3, #0]
		sotet29 = vonal_eredmeny[29];
 80014d6:	463b      	mov	r3, r7
 80014d8:	7f5b      	ldrb	r3, [r3, #29]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <main+0x5d4>)
 80014de:	601a      	str	r2, [r3, #0]
		sotet30 = vonal_eredmeny[30];
 80014e0:	463b      	mov	r3, r7
 80014e2:	7f9b      	ldrb	r3, [r3, #30]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <main+0x5d8>)
 80014e8:	601a      	str	r2, [r3, #0]
		sotet31 = vonal_eredmeny[31];
 80014ea:	463b      	mov	r3, r7
 80014ec:	7fdb      	ldrb	r3, [r3, #31]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <main+0x5dc>)
 80014f2:	601a      	str	r2, [r3, #0]
		//uint8_t Test[] = "Hello World\r\n"; //Data to send
		/*int size = sizeof(minta1);
		HAL_UART_Transmit(&huart2, minta1, size, 100);// Sending in normal mode
		HAL_Delay(1000);*/

		VL53L1_WaitMeasurementDataReady( Dev );
 80014f4:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 80014f8:	f009 fde4 	bl	800b0c4 <VL53L1_WaitMeasurementDataReady>
		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 80014fc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001500:	4619      	mov	r1, r3
 8001502:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001506:	f009 ff99 	bl	800b43c <VL53L1_GetRangingMeasurementData>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );*/
		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 800150a:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800150e:	f009 fdc3 	bl	800b098 <VL53L1_ClearInterruptAndStartMeasurement>

		//Szervo
		if (btnEnable == 1) {
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <main+0x5e0>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d16f      	bne.n	80015fa <main+0x53a>
			if (szervoEnable == 1) {
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <main+0x5e4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d144      	bne.n	80015ac <main+0x4ec>
				if 			(0 <= vonal1 && vonal1 < 6) {
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <main+0x55c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db09      	blt.n	800153e <main+0x47e>
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <main+0x55c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b05      	cmp	r3, #5
 8001530:	dc05      	bgt.n	800153e <main+0x47e>
					SERVO_MoveTo(SZERVO, 0);
 8001532:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80016a8 <main+0x5e8>
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fd5e 	bl	8000ff8 <SERVO_MoveTo>
 800153c:	e036      	b.n	80015ac <main+0x4ec>
				} else if 	(6 <= vonal1 && vonal1 < 13) {
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <main+0x55c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b05      	cmp	r3, #5
 8001544:	dd09      	ble.n	800155a <main+0x49a>
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <main+0x55c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	dc05      	bgt.n	800155a <main+0x49a>
					SERVO_MoveTo(SZERVO, 60);
 800154e:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80016ac <main+0x5ec>
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fd50 	bl	8000ff8 <SERVO_MoveTo>
 8001558:	e028      	b.n	80015ac <main+0x4ec>
				} else if 	(13 <= vonal1 && vonal1 < 19) {
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <main+0x55c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	dd09      	ble.n	8001576 <main+0x4b6>
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <main+0x55c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b12      	cmp	r3, #18
 8001568:	dc05      	bgt.n	8001576 <main+0x4b6>
					SERVO_MoveTo(SZERVO, 90);
 800156a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80016b0 <main+0x5f0>
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fd42 	bl	8000ff8 <SERVO_MoveTo>
 8001574:	e01a      	b.n	80015ac <main+0x4ec>
				} else if 	(19 <= vonal1 && vonal1 < 26) {
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <main+0x55c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b12      	cmp	r3, #18
 800157c:	dd09      	ble.n	8001592 <main+0x4d2>
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <main+0x55c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b19      	cmp	r3, #25
 8001584:	dc05      	bgt.n	8001592 <main+0x4d2>
					SERVO_MoveTo(SZERVO, 120);
 8001586:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80016b4 <main+0x5f4>
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fd34 	bl	8000ff8 <SERVO_MoveTo>
 8001590:	e00c      	b.n	80015ac <main+0x4ec>
				} else if 	(26 <= vonal1 && vonal1 < 32) {
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <main+0x55c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b19      	cmp	r3, #25
 8001598:	dd08      	ble.n	80015ac <main+0x4ec>
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <main+0x55c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b1f      	cmp	r3, #31
 80015a0:	dc04      	bgt.n	80015ac <main+0x4ec>
					SERVO_MoveTo(SZERVO, 180);
 80015a2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80016b8 <main+0x5f8>
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff fd26 	bl	8000ff8 <SERVO_MoveTo>
				}
			}

			if (motvezEnable == 1) {
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <main+0x5fc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f47f ae73 	bne.w	800129c <main+0x1dc>
				int k = 200;
 80015b6:	23c8      	movs	r3, #200	; 0xc8
 80015b8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
				if (k < motvez_d / 2) {
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <main+0x600>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0fda      	lsrs	r2, r3, #31
 80015c2:	4413      	add	r3, r2
 80015c4:	105b      	asrs	r3, r3, #1
 80015c6:	461a      	mov	r2, r3
 80015c8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80015cc:	4293      	cmp	r3, r2
 80015ce:	f6bf ae65 	bge.w	800129c <main+0x1dc>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, k); //ha pwm1 nagyobb, előremenet
 80015d2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	2000      	movs	r0, #0
 80015dc:	f00e fc0a 	bl	800fdf4 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - k);
 80015e0:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <main+0x600>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	2001      	movs	r0, #1
 80015f4:	f00e fbfe 	bl	800fdf4 <DC_MOTOR_Set_Speed>
 80015f8:	e650      	b.n	800129c <main+0x1dc>
				}
			}
		} else {
			SERVO_MoveTo(SZERVO, 90);
 80015fa:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80016b0 <main+0x5f0>
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fcfa 	bl	8000ff8 <SERVO_MoveTo>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, 0);//ez nem egeszen megallas, csak a jel kisimitasa. megallni k = d -vel kell
 8001604:	2100      	movs	r1, #0
 8001606:	2000      	movs	r0, #0
 8001608:	f00e fbf4 	bl	800fdf4 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, 0);
 800160c:	2100      	movs	r1, #0
 800160e:	2001      	movs	r0, #1
 8001610:	f00e fbf0 	bl	800fdf4 <DC_MOTOR_Set_Speed>
	while (1) {
 8001614:	e642      	b.n	800129c <main+0x1dc>
 8001616:	bf00      	nop
 8001618:	20000090 	.word	0x20000090
 800161c:	20000094 	.word	0x20000094
 8001620:	20000104 	.word	0x20000104
 8001624:	20000108 	.word	0x20000108
 8001628:	2000010c 	.word	0x2000010c
 800162c:	20000110 	.word	0x20000110
 8001630:	20000114 	.word	0x20000114
 8001634:	20000118 	.word	0x20000118
 8001638:	2000011c 	.word	0x2000011c
 800163c:	20000120 	.word	0x20000120
 8001640:	20000124 	.word	0x20000124
 8001644:	20000128 	.word	0x20000128
 8001648:	2000012c 	.word	0x2000012c
 800164c:	20000130 	.word	0x20000130
 8001650:	20000134 	.word	0x20000134
 8001654:	20000138 	.word	0x20000138
 8001658:	2000013c 	.word	0x2000013c
 800165c:	20000140 	.word	0x20000140
 8001660:	20000144 	.word	0x20000144
 8001664:	20000148 	.word	0x20000148
 8001668:	2000014c 	.word	0x2000014c
 800166c:	20000150 	.word	0x20000150
 8001670:	20000154 	.word	0x20000154
 8001674:	20000158 	.word	0x20000158
 8001678:	2000015c 	.word	0x2000015c
 800167c:	20000160 	.word	0x20000160
 8001680:	20000164 	.word	0x20000164
 8001684:	20000168 	.word	0x20000168
 8001688:	2000016c 	.word	0x2000016c
 800168c:	20000170 	.word	0x20000170
 8001690:	20000174 	.word	0x20000174
 8001694:	20000178 	.word	0x20000178
 8001698:	2000017c 	.word	0x2000017c
 800169c:	20000180 	.word	0x20000180
 80016a0:	20000100 	.word	0x20000100
 80016a4:	20000101 	.word	0x20000101
 80016a8:	00000000 	.word	0x00000000
 80016ac:	42700000 	.word	0x42700000
 80016b0:	42b40000 	.word	0x42b40000
 80016b4:	42f00000 	.word	0x42f00000
 80016b8:	43340000 	.word	0x43340000
 80016bc:	20000102 	.word	0x20000102
 80016c0:	20000098 	.word	0x20000098

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	2234      	movs	r2, #52	; 0x34
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00e fc4c 	bl	800ff70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <SystemClock_Config+0xdc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <SystemClock_Config+0xdc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <SystemClock_Config+0xdc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <SystemClock_Config+0xe0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <SystemClock_Config+0xe0>)
 800170e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <SystemClock_Config+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001734:	2304      	movs	r3, #4
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001738:	23b4      	movs	r3, #180	; 0xb4
 800173a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800173c:	2302      	movs	r3, #2
 800173e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001744:	2302      	movs	r3, #2
 8001746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4618      	mov	r0, r3
 800174e:	f004 faef 	bl	8005d30 <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001758:	f000 ff6a 	bl	8002630 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800175c:	f003 ff0c 	bl	8005578 <HAL_PWREx_EnableOverDrive>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001766:	f000 ff63 	bl	8002630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2302      	movs	r3, #2
 8001770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001776:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800177a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800177c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001780:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2105      	movs	r1, #5
 8001788:	4618      	mov	r0, r3
 800178a:	f003 ff45 	bl	8005618 <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001794:	f000 ff4c 	bl	8002630 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3750      	adds	r7, #80	; 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <MX_I2C1_Init+0x54>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_I2C1_Init+0x58>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017e6:	f002 fea9 	bl	800453c <HAL_I2C_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017f0:	f000 ff1e 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200002cc 	.word	0x200002cc
 80017fc:	40005400 	.word	0x40005400
 8001800:	000186a0 	.word	0x000186a0

08001804 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_I2C2_Init+0x50>)
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <MX_I2C2_Init+0x54>)
 800180c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_I2C2_Init+0x50>)
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_I2C2_Init+0x58>)
 8001812:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_I2C2_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_I2C2_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_I2C2_Init+0x50>)
 8001822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001826:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <MX_I2C2_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_I2C2_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <MX_I2C2_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_I2C2_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_I2C2_Init+0x50>)
 8001842:	f002 fe7b 	bl	800453c <HAL_I2C_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800184c:	f000 fef0 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000320 	.word	0x20000320
 8001858:	40005800 	.word	0x40005800
 800185c:	000186a0 	.word	0x000186a0

08001860 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_I2C3_Init+0x50>)
 8001866:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <MX_I2C3_Init+0x54>)
 8001868:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_I2C3_Init+0x50>)
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_I2C3_Init+0x58>)
 800186e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_I2C3_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_I2C3_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_I2C3_Init+0x50>)
 800187e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001882:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MX_I2C3_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_I2C3_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_I2C3_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_I2C3_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_I2C3_Init+0x50>)
 800189e:	f002 fe4d 	bl	800453c <HAL_I2C_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018a8:	f000 fec2 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000190 	.word	0x20000190
 80018b4:	40005c00 	.word	0x40005c00
 80018b8:	000186a0 	.word	0x000186a0

080018bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_SPI1_Init+0x64>)
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <MX_SPI1_Init+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_SPI1_Init+0x64>)
 80018c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_SPI1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_SPI1_Init+0x64>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_SPI1_Init+0x64>)
 80018f0:	2220      	movs	r2, #32
 80018f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_SPI1_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_SPI1_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_SPI1_Init+0x64>)
 8001908:	220a      	movs	r2, #10
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_SPI1_Init+0x64>)
 800190e:	f004 fd6d 	bl	80063ec <HAL_SPI_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001918:	f000 fe8a 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200004fc 	.word	0x200004fc
 8001924:	40013000 	.word	0x40013000

08001928 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_SPI2_Init+0x64>)
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <MX_SPI2_Init+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_SPI2_Init+0x64>)
 8001934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001938:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_SPI2_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_SPI2_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_SPI2_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_SPI2_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_SPI2_Init+0x64>)
 8001954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001958:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_SPI2_Init+0x64>)
 800195c:	2218      	movs	r2, #24
 800195e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <MX_SPI2_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_SPI2_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <MX_SPI2_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_SPI2_Init+0x64>)
 8001974:	220a      	movs	r2, #10
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_SPI2_Init+0x64>)
 800197a:	f004 fd37 	bl	80063ec <HAL_SPI_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001984:	f000 fe54 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200001e4 	.word	0x200001e4
 8001990:	40003800 	.word	0x40003800

08001994 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_SPI3_Init+0x64>)
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <MX_SPI3_Init+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019e0:	220a      	movs	r2, #10
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_SPI3_Init+0x64>)
 80019e6:	f004 fd01 	bl	80063ec <HAL_SPI_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80019f0:	f000 fe1e 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200003bc 	.word	0x200003bc
 80019fc:	40003c00 	.word	0x40003c00

08001a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a46:	4814      	ldr	r0, [pc, #80]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a48:	f005 fba0 	bl	800718c <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a52:	f000 fded 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	4619      	mov	r1, r3
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a64:	f006 fc48 	bl	80082f8 <HAL_TIM_ConfigClockSource>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a6e:	f000 fddf 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <MX_TIM2_Init+0x98>)
 8001a80:	f007 fbda 	bl	8009238 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a8a:	f000 fdd1 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000554 	.word	0x20000554

08001a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa2:	f107 0320 	add.w	r3, r7, #32
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <MX_TIM3_Init+0xb0>)
 8001ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ae4:	4818      	ldr	r0, [pc, #96]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001ae6:	f005 fd07 	bl	80074f8 <HAL_TIM_PWM_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001af0:	f000 fd9e 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	4619      	mov	r1, r3
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001b04:	f007 fb98 	bl	8009238 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b0e:	f000 fd8f 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b12:	2360      	movs	r3, #96	; 0x60
 8001b14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001b2a:	f006 fa0d 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b34:	f000 fd7c 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <MX_TIM3_Init+0xac>)
 8001b3a:	f001 f8c9 	bl	8002cd0 <HAL_TIM_MspPostInit>

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000374 	.word	0x20000374
 8001b4c:	40000400 	.word	0x40000400

08001b50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2224      	movs	r2, #36	; 0x24
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00e fa06 	bl	800ff70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <MX_TIM4_Init+0xa4>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001baa:	2301      	movs	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001bbe:	f005 ff13 	bl	80079e8 <HAL_TIM_Encoder_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001bc8:	f000 fd32 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_TIM4_Init+0xa0>)
 8001bda:	f007 fb2d 	bl	8009238 <HAL_TIMEx_MasterConfigSynchronization>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001be4:	f000 fd24 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3730      	adds	r7, #48	; 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000284 	.word	0x20000284
 8001bf4:	40000800 	.word	0x40000800

08001bf8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b096      	sub	sp, #88	; 0x58
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f00e f99d 	bl	800ff70 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c38:	4a44      	ldr	r2, [pc, #272]	; (8001d4c <MX_TIM8_Init+0x154>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c44:	2260      	movs	r2, #96	; 0x60
 8001c46:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c48:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001c56:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c62:	4839      	ldr	r0, [pc, #228]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c64:	f005 fa92 	bl	800718c <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c6e:	f000 fcdf 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4832      	ldr	r0, [pc, #200]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c80:	f006 fb3a 	bl	80082f8 <HAL_TIM_ConfigClockSource>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001c8a:	f000 fcd1 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c8e:	482e      	ldr	r0, [pc, #184]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001c90:	f005 fc32 	bl	80074f8 <HAL_TIM_PWM_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001c9a:	f000 fcc9 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001caa:	4619      	mov	r1, r3
 8001cac:	4826      	ldr	r0, [pc, #152]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001cae:	f007 fac3 	bl	8009238 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001cb8:	f000 fcba 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbc:	2360      	movs	r3, #96	; 0x60
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	2204      	movs	r2, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4819      	ldr	r0, [pc, #100]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001ce2:	f006 f931 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001cec:	f000 fca0 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4813      	ldr	r0, [pc, #76]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001cfa:	f006 f925 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d04:	f000 fc94 	bl	8002630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001d2c:	f007 fb62 	bl	80093f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001d36:	f000 fc7b 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <MX_TIM8_Init+0x150>)
 8001d3c:	f000 ffc8 	bl	8002cd0 <HAL_TIM_MspPostInit>

}
 8001d40:	bf00      	nop
 8001d42:	3758      	adds	r7, #88	; 0x58
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000023c 	.word	0x2000023c
 8001d4c:	40010400 	.word	0x40010400

08001d50 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001d78:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <MX_TIM12_Init+0xdc>)
 8001d7a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001d7e:	2213      	movs	r2, #19
 8001d80:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001d8a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001d8e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d9c:	4822      	ldr	r0, [pc, #136]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001d9e:	f005 f9f5 	bl	800718c <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001da8:	f000 fc42 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	4619      	mov	r1, r3
 8001db8:	481b      	ldr	r0, [pc, #108]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001dba:	f006 fa9d 	bl	80082f8 <HAL_TIM_ConfigClockSource>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001dc4:	f000 fc34 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001dc8:	4817      	ldr	r0, [pc, #92]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001dca:	f005 fb95 	bl	80074f8 <HAL_TIM_PWM_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001dd4:	f000 fc2c 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd8:	2360      	movs	r3, #96	; 0x60
 8001dda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	480e      	ldr	r0, [pc, #56]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001df0:	f006 f8aa 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001dfa:	f000 fc19 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2204      	movs	r2, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4808      	ldr	r0, [pc, #32]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001e06:	f006 f89f 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001e10:	f000 fc0e 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001e16:	f005 faa9 	bl	800736c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e1a:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_TIM12_Init+0xd8>)
 8001e1c:	f000 ff58 	bl	8002cd0 <HAL_TIM_MspPostInit>

}
 8001e20:	bf00      	nop
 8001e22:	3730      	adds	r7, #48	; 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200005e0 	.word	0x200005e0
 8001e2c:	40001800 	.word	0x40001800

08001e30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MX_UART4_Init+0x50>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_UART4_Init+0x4c>)
 8001e68:	f007 fba4 	bl	80095b4 <HAL_UART_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e72:	f000 fbdd 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200004b8 	.word	0x200004b8
 8001e80:	40004c00 	.word	0x40004c00

08001e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <MX_USART1_UART_Init+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2204      	movs	r2, #4
 8001eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	f007 fb7a 	bl	80095b4 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ec6:	f000 fbb3 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000474 	.word	0x20000474
 8001ed4:	40011000 	.word	0x40011000

08001ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <MX_USART2_UART_Init+0x50>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001f10:	f007 fb50 	bl	80095b4 <HAL_UART_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f1a:	f000 fb89 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000059c 	.word	0x2000059c
 8001f28:	40004400 	.word	0x40004400

08001f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_DMA_Init+0x3c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <MX_DMA_Init+0x3c>)
 8001f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_DMA_Init+0x3c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2010      	movs	r0, #16
 8001f54:	f001 fa4a 	bl	80033ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f58:	2010      	movs	r0, #16
 8001f5a:	f001 fa73 	bl	8003444 <HAL_NVIC_EnableIRQ>

}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b59      	ldr	r3, [pc, #356]	; (80020ec <MX_GPIO_Init+0x180>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a58      	ldr	r2, [pc, #352]	; (80020ec <MX_GPIO_Init+0x180>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b56      	ldr	r3, [pc, #344]	; (80020ec <MX_GPIO_Init+0x180>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b52      	ldr	r3, [pc, #328]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a51      	ldr	r2, [pc, #324]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b48      	ldr	r3, [pc, #288]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b44      	ldr	r3, [pc, #272]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a43      	ldr	r2, [pc, #268]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <MX_GPIO_Init+0x180>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <MX_GPIO_Init+0x180>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a3c      	ldr	r2, [pc, #240]	; (80020ec <MX_GPIO_Init+0x180>)
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <MX_GPIO_Init+0x180>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800200e:	2200      	movs	r2, #0
 8002010:	213d      	movs	r1, #61	; 0x3d
 8002012:	4837      	ldr	r0, [pc, #220]	; (80020f0 <MX_GPIO_Init+0x184>)
 8002014:	f002 fa48 	bl	80044a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	f641 0102 	movw	r1, #6146	; 0x1802
 800201e:	4835      	ldr	r0, [pc, #212]	; (80020f4 <MX_GPIO_Init+0x188>)
 8002020:	f002 fa42 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	f241 0126 	movw	r1, #4134	; 0x1026
 800202a:	4833      	ldr	r0, [pc, #204]	; (80020f8 <MX_GPIO_Init+0x18c>)
 800202c:	f002 fa3c 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002036:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	482a      	ldr	r0, [pc, #168]	; (80020f0 <MX_GPIO_Init+0x184>)
 8002048:	f001 ff0a 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800204c:	233d      	movs	r3, #61	; 0x3d
 800204e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	4823      	ldr	r0, [pc, #140]	; (80020f0 <MX_GPIO_Init+0x184>)
 8002064:	f001 fefc 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002068:	f641 0302 	movw	r3, #6146	; 0x1802
 800206c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	481c      	ldr	r0, [pc, #112]	; (80020f4 <MX_GPIO_Init+0x188>)
 8002082:	f001 feed 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002086:	2310      	movs	r3, #16
 8002088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4816      	ldr	r0, [pc, #88]	; (80020f4 <MX_GPIO_Init+0x188>)
 800209a:	f001 fee1 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 800209e:	f241 0326 	movw	r3, #4134	; 0x1026
 80020a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4810      	ldr	r0, [pc, #64]	; (80020f8 <MX_GPIO_Init+0x18c>)
 80020b8:	f001 fed2 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020bc:	2304      	movs	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	480b      	ldr	r0, [pc, #44]	; (80020fc <MX_GPIO_Init+0x190>)
 80020d0:	f001 fec6 	bl	8003e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2100      	movs	r1, #0
 80020d8:	2028      	movs	r0, #40	; 0x28
 80020da:	f001 f987 	bl	80033ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020de:	2028      	movs	r0, #40	; 0x28
 80020e0:	f001 f9b0 	bl	8003444 <HAL_NVIC_EnableIRQ>

}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020c00 	.word	0x40020c00

08002100 <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8002104:	2200      	movs	r2, #0
 8002106:	2104      	movs	r1, #4
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <Vonalszenzor_Init+0x1c>)
 800210a:	f002 f9cd 	bl	80044a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 800210e:	2200      	movs	r2, #0
 8002110:	2120      	movs	r1, #32
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <Vonalszenzor_Init+0x20>)
 8002114:	f002 f9c8 	bl	80044a8 <HAL_GPIO_WritePin>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800

08002124 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	Vonalszenzor_minta_kuldes(leszed);
 800212c:	48bd      	ldr	r0, [pc, #756]	; (8002424 <Vonalszenzor_operal+0x300>)
 800212e:	f000 fa1d 	bl	800256c <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8002132:	2370      	movs	r3, #112	; 0x70
 8002134:	81bb      	strh	r3, [r7, #12]

	Vonalszenzor_minta_kuldes(minta1_adc1e);
 8002136:	48bc      	ldr	r0, [pc, #752]	; (8002428 <Vonalszenzor_operal+0x304>)
 8002138:	f000 fa18 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 800213c:	4bbb      	ldr	r3, [pc, #748]	; (800242c <Vonalszenzor_operal+0x308>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f107 020c 	add.w	r2, r7, #12
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fa38 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[0] = (uint8_t) eredmeny_16bit_temp[0];
 800214c:	7b3a      	ldrb	r2, [r7, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002152:	4bb7      	ldr	r3, [pc, #732]	; (8002430 <Vonalszenzor_operal+0x30c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f107 020c 	add.w	r2, r7, #12
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fa2d 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[4] = (uint8_t) eredmeny_16bit_temp[0];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	7b3a      	ldrb	r2, [r7, #12]
 8002168:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800216a:	48ae      	ldr	r0, [pc, #696]	; (8002424 <Vonalszenzor_operal+0x300>)
 800216c:	f000 f9fe 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 8002170:	48b0      	ldr	r0, [pc, #704]	; (8002434 <Vonalszenzor_operal+0x310>)
 8002172:	f000 f9fb 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002176:	4bad      	ldr	r3, [pc, #692]	; (800242c <Vonalszenzor_operal+0x308>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f107 020c 	add.w	r2, r7, #12
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fa1b 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[8] = (uint8_t) eredmeny_16bit_temp[0];
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	7b3a      	ldrb	r2, [r7, #12]
 800218c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800218e:	4ba8      	ldr	r3, [pc, #672]	; (8002430 <Vonalszenzor_operal+0x30c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f107 020c 	add.w	r2, r7, #12
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fa0f 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[12] = (uint8_t) eredmeny_16bit_temp[0];
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	330c      	adds	r3, #12
 80021a2:	7b3a      	ldrb	r2, [r7, #12]
 80021a4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021a6:	489f      	ldr	r0, [pc, #636]	; (8002424 <Vonalszenzor_operal+0x300>)
 80021a8:	f000 f9e0 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 80021ac:	48a2      	ldr	r0, [pc, #648]	; (8002438 <Vonalszenzor_operal+0x314>)
 80021ae:	f000 f9dd 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80021b2:	4b9e      	ldr	r3, [pc, #632]	; (800242c <Vonalszenzor_operal+0x308>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	f107 020c 	add.w	r2, r7, #12
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f9fd 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[16] = (uint8_t) eredmeny_16bit_temp[0];
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3310      	adds	r3, #16
 80021c6:	7b3a      	ldrb	r2, [r7, #12]
 80021c8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80021ca:	4b99      	ldr	r3, [pc, #612]	; (8002430 <Vonalszenzor_operal+0x30c>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	f107 020c 	add.w	r2, r7, #12
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f9f1 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[20] = (uint8_t) eredmeny_16bit_temp[0];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3314      	adds	r3, #20
 80021de:	7b3a      	ldrb	r2, [r7, #12]
 80021e0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021e2:	4890      	ldr	r0, [pc, #576]	; (8002424 <Vonalszenzor_operal+0x300>)
 80021e4:	f000 f9c2 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 80021e8:	4894      	ldr	r0, [pc, #592]	; (800243c <Vonalszenzor_operal+0x318>)
 80021ea:	f000 f9bf 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80021ee:	4b8f      	ldr	r3, [pc, #572]	; (800242c <Vonalszenzor_operal+0x308>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 f9df 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[24] = (uint8_t) eredmeny_16bit_temp[0];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3318      	adds	r3, #24
 8002202:	7b3a      	ldrb	r2, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002206:	4b8a      	ldr	r3, [pc, #552]	; (8002430 <Vonalszenzor_operal+0x30c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f107 020c 	add.w	r2, r7, #12
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f9d3 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	331c      	adds	r3, #28
 800221a:	7b3a      	ldrb	r2, [r7, #12]
 800221c:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800221e:	4881      	ldr	r0, [pc, #516]	; (8002424 <Vonalszenzor_operal+0x300>)
 8002220:	f000 f9a4 	bl	800256c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 8002224:	4886      	ldr	r0, [pc, #536]	; (8002440 <Vonalszenzor_operal+0x31c>)
 8002226:	f000 f9a1 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800222a:	4b86      	ldr	r3, [pc, #536]	; (8002444 <Vonalszenzor_operal+0x320>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	f107 020c 	add.w	r2, r7, #12
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f9c1 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[1] = (uint8_t) eredmeny_16bit_temp[0];
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	7b3a      	ldrb	r2, [r7, #12]
 8002240:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002242:	4b81      	ldr	r3, [pc, #516]	; (8002448 <Vonalszenzor_operal+0x324>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f9b5 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3305      	adds	r3, #5
 8002256:	7b3a      	ldrb	r2, [r7, #12]
 8002258:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800225a:	4872      	ldr	r0, [pc, #456]	; (8002424 <Vonalszenzor_operal+0x300>)
 800225c:	f000 f986 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002260:	487a      	ldr	r0, [pc, #488]	; (800244c <Vonalszenzor_operal+0x328>)
 8002262:	f000 f983 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002266:	4b77      	ldr	r3, [pc, #476]	; (8002444 <Vonalszenzor_operal+0x320>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	f107 020c 	add.w	r2, r7, #12
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f9a3 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3309      	adds	r3, #9
 800227a:	7b3a      	ldrb	r2, [r7, #12]
 800227c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800227e:	4b72      	ldr	r3, [pc, #456]	; (8002448 <Vonalszenzor_operal+0x324>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f997 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[13] = (uint8_t) eredmeny_16bit_temp[0];
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	330d      	adds	r3, #13
 8002292:	7b3a      	ldrb	r2, [r7, #12]
 8002294:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002296:	4863      	ldr	r0, [pc, #396]	; (8002424 <Vonalszenzor_operal+0x300>)
 8002298:	f000 f968 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 800229c:	486c      	ldr	r0, [pc, #432]	; (8002450 <Vonalszenzor_operal+0x32c>)
 800229e:	f000 f965 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80022a2:	4b68      	ldr	r3, [pc, #416]	; (8002444 <Vonalszenzor_operal+0x320>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f107 020c 	add.w	r2, r7, #12
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f985 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[17] = (uint8_t) eredmeny_16bit_temp[0];
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3311      	adds	r3, #17
 80022b6:	7b3a      	ldrb	r2, [r7, #12]
 80022b8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <Vonalszenzor_operal+0x324>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	f107 020c 	add.w	r2, r7, #12
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f979 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[21] = (uint8_t) eredmeny_16bit_temp[0];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3315      	adds	r3, #21
 80022ce:	7b3a      	ldrb	r2, [r7, #12]
 80022d0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022d2:	4854      	ldr	r0, [pc, #336]	; (8002424 <Vonalszenzor_operal+0x300>)
 80022d4:	f000 f94a 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 80022d8:	485e      	ldr	r0, [pc, #376]	; (8002454 <Vonalszenzor_operal+0x330>)
 80022da:	f000 f947 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80022de:	4b59      	ldr	r3, [pc, #356]	; (8002444 <Vonalszenzor_operal+0x320>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f107 020c 	add.w	r2, r7, #12
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f967 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[25] = (uint8_t) eredmeny_16bit_temp[0];
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3319      	adds	r3, #25
 80022f2:	7b3a      	ldrb	r2, [r7, #12]
 80022f4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80022f6:	4b54      	ldr	r3, [pc, #336]	; (8002448 <Vonalszenzor_operal+0x324>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f107 020c 	add.w	r2, r7, #12
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f95b 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[29] = (uint8_t) eredmeny_16bit_temp[0];
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	331d      	adds	r3, #29
 800230a:	7b3a      	ldrb	r2, [r7, #12]
 800230c:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800230e:	4845      	ldr	r0, [pc, #276]	; (8002424 <Vonalszenzor_operal+0x300>)
 8002310:	f000 f92c 	bl	800256c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 8002314:	4850      	ldr	r0, [pc, #320]	; (8002458 <Vonalszenzor_operal+0x334>)
 8002316:	f000 f929 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <Vonalszenzor_operal+0x338>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f107 020c 	add.w	r2, r7, #12
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f949 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[2] = (uint8_t) eredmeny_16bit_temp[0];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3302      	adds	r3, #2
 800232e:	7b3a      	ldrb	r2, [r7, #12]
 8002330:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002332:	4b4b      	ldr	r3, [pc, #300]	; (8002460 <Vonalszenzor_operal+0x33c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f107 020c 	add.w	r2, r7, #12
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f93d 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[6] = (uint8_t) eredmeny_16bit_temp[0];
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3306      	adds	r3, #6
 8002346:	7b3a      	ldrb	r2, [r7, #12]
 8002348:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800234a:	4836      	ldr	r0, [pc, #216]	; (8002424 <Vonalszenzor_operal+0x300>)
 800234c:	f000 f90e 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 8002350:	4844      	ldr	r0, [pc, #272]	; (8002464 <Vonalszenzor_operal+0x340>)
 8002352:	f000 f90b 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <Vonalszenzor_operal+0x338>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f107 020c 	add.w	r2, r7, #12
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f92b 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	330a      	adds	r3, #10
 800236a:	7b3a      	ldrb	r2, [r7, #12]
 800236c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800236e:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <Vonalszenzor_operal+0x33c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f107 020c 	add.w	r2, r7, #12
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f91f 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[14] = (uint8_t) eredmeny_16bit_temp[0];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	330e      	adds	r3, #14
 8002382:	7b3a      	ldrb	r2, [r7, #12]
 8002384:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002386:	4827      	ldr	r0, [pc, #156]	; (8002424 <Vonalszenzor_operal+0x300>)
 8002388:	f000 f8f0 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 800238c:	4836      	ldr	r0, [pc, #216]	; (8002468 <Vonalszenzor_operal+0x344>)
 800238e:	f000 f8ed 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002392:	4b32      	ldr	r3, [pc, #200]	; (800245c <Vonalszenzor_operal+0x338>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f107 020c 	add.w	r2, r7, #12
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f90d 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[18] = (uint8_t) eredmeny_16bit_temp[0];
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3312      	adds	r3, #18
 80023a6:	7b3a      	ldrb	r2, [r7, #12]
 80023a8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <Vonalszenzor_operal+0x33c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	f107 020c 	add.w	r2, r7, #12
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f901 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[22] = (uint8_t) eredmeny_16bit_temp[0];
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3316      	adds	r3, #22
 80023be:	7b3a      	ldrb	r2, [r7, #12]
 80023c0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023c2:	4818      	ldr	r0, [pc, #96]	; (8002424 <Vonalszenzor_operal+0x300>)
 80023c4:	f000 f8d2 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 80023c8:	4828      	ldr	r0, [pc, #160]	; (800246c <Vonalszenzor_operal+0x348>)
 80023ca:	f000 f8cf 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <Vonalszenzor_operal+0x338>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f107 020c 	add.w	r2, r7, #12
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f8ef 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[26] = (uint8_t) eredmeny_16bit_temp[0];
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	331a      	adds	r3, #26
 80023e2:	7b3a      	ldrb	r2, [r7, #12]
 80023e4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <Vonalszenzor_operal+0x33c>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f107 020c 	add.w	r2, r7, #12
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f8e3 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[30] = (uint8_t) eredmeny_16bit_temp[0];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	331e      	adds	r3, #30
 80023fa:	7b3a      	ldrb	r2, [r7, #12]
 80023fc:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80023fe:	4809      	ldr	r0, [pc, #36]	; (8002424 <Vonalszenzor_operal+0x300>)
 8002400:	f000 f8b4 	bl	800256c <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 8002404:	481a      	ldr	r0, [pc, #104]	; (8002470 <Vonalszenzor_operal+0x34c>)
 8002406:	f000 f8b1 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <Vonalszenzor_operal+0x350>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	f107 020c 	add.w	r2, r7, #12
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f8d1 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[3] = (uint8_t) eredmeny_16bit_temp[0];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3303      	adds	r3, #3
 800241e:	7b3a      	ldrb	r2, [r7, #12]
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e029      	b.n	8002478 <Vonalszenzor_operal+0x354>
 8002424:	20000000 	.word	0x20000000
 8002428:	20000080 	.word	0x20000080
 800242c:	20000103 	.word	0x20000103
 8002430:	20000089 	.word	0x20000089
 8002434:	20000078 	.word	0x20000078
 8002438:	20000070 	.word	0x20000070
 800243c:	20000068 	.word	0x20000068
 8002440:	20000060 	.word	0x20000060
 8002444:	20000086 	.word	0x20000086
 8002448:	2000008a 	.word	0x2000008a
 800244c:	20000058 	.word	0x20000058
 8002450:	20000050 	.word	0x20000050
 8002454:	20000048 	.word	0x20000048
 8002458:	20000040 	.word	0x20000040
 800245c:	20000087 	.word	0x20000087
 8002460:	2000008b 	.word	0x2000008b
 8002464:	20000038 	.word	0x20000038
 8002468:	20000030 	.word	0x20000030
 800246c:	20000028 	.word	0x20000028
 8002470:	20000020 	.word	0x20000020
 8002474:	20000088 	.word	0x20000088
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <Vonalszenzor_operal+0x430>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f107 020c 	add.w	r2, r7, #12
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f89a 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3307      	adds	r3, #7
 800248c:	7b3a      	ldrb	r2, [r7, #12]
 800248e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002490:	4831      	ldr	r0, [pc, #196]	; (8002558 <Vonalszenzor_operal+0x434>)
 8002492:	f000 f86b 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 8002496:	4831      	ldr	r0, [pc, #196]	; (800255c <Vonalszenzor_operal+0x438>)
 8002498:	f000 f868 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <Vonalszenzor_operal+0x43c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f107 020c 	add.w	r2, r7, #12
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f888 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[11] = (uint8_t) eredmeny_16bit_temp[0];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	330b      	adds	r3, #11
 80024b0:	7b3a      	ldrb	r2, [r7, #12]
 80024b2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <Vonalszenzor_operal+0x430>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f107 020c 	add.w	r2, r7, #12
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f87c 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[15] = (uint8_t) eredmeny_16bit_temp[0];
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	330f      	adds	r3, #15
 80024c8:	7b3a      	ldrb	r2, [r7, #12]
 80024ca:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024cc:	4822      	ldr	r0, [pc, #136]	; (8002558 <Vonalszenzor_operal+0x434>)
 80024ce:	f000 f84d 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 80024d2:	4824      	ldr	r0, [pc, #144]	; (8002564 <Vonalszenzor_operal+0x440>)
 80024d4:	f000 f84a 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <Vonalszenzor_operal+0x43c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f107 020c 	add.w	r2, r7, #12
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f86a 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[19] = (uint8_t) eredmeny_16bit_temp[0];
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3313      	adds	r3, #19
 80024ec:	7b3a      	ldrb	r2, [r7, #12]
 80024ee:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <Vonalszenzor_operal+0x430>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f85e 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3317      	adds	r3, #23
 8002504:	7b3a      	ldrb	r2, [r7, #12]
 8002506:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002508:	4813      	ldr	r0, [pc, #76]	; (8002558 <Vonalszenzor_operal+0x434>)
 800250a:	f000 f82f 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 800250e:	4816      	ldr	r0, [pc, #88]	; (8002568 <Vonalszenzor_operal+0x444>)
 8002510:	f000 f82c 	bl	800256c <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <Vonalszenzor_operal+0x43c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f107 020c 	add.w	r2, r7, #12
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f84c 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	331b      	adds	r3, #27
 8002528:	7b3a      	ldrb	r2, [r7, #12]
 800252a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <Vonalszenzor_operal+0x430>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	f107 020c 	add.w	r2, r7, #12
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f840 	bl	80025bc <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott[31] = (uint8_t) eredmeny_16bit_temp[0];
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	331f      	adds	r3, #31
 8002540:	7b3a      	ldrb	r2, [r7, #12]
 8002542:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <Vonalszenzor_operal+0x434>)
 8002546:	f000 f811 	bl	800256c <Vonalszenzor_minta_kuldes>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000008c 	.word	0x2000008c
 8002558:	20000000 	.word	0x20000000
 800255c:	20000018 	.word	0x20000018
 8002560:	20000088 	.word	0x20000088
 8002564:	20000010 	.word	0x20000010
 8002568:	20000008 	.word	0x20000008

0800256c <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 8002574:	2200      	movs	r2, #0
 8002576:	2110      	movs	r1, #16
 8002578:	480d      	ldr	r0, [pc, #52]	; (80025b0 <Vonalszenzor_minta_kuldes+0x44>)
 800257a:	f001 ff95 	bl	80044a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 800257e:	2200      	movs	r2, #0
 8002580:	2102      	movs	r1, #2
 8002582:	480c      	ldr	r0, [pc, #48]	; (80025b4 <Vonalszenzor_minta_kuldes+0x48>)
 8002584:	f001 ff90 	bl	80044a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 8002588:	2364      	movs	r3, #100	; 0x64
 800258a:	2206      	movs	r2, #6
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	480a      	ldr	r0, [pc, #40]	; (80025b8 <Vonalszenzor_minta_kuldes+0x4c>)
 8002590:	f004 f8c0 	bl	8006714 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 8002594:	2201      	movs	r2, #1
 8002596:	2110      	movs	r1, #16
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <Vonalszenzor_minta_kuldes+0x44>)
 800259a:	f001 ff85 	bl	80044a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 800259e:	2201      	movs	r2, #1
 80025a0:	2102      	movs	r1, #2
 80025a2:	4804      	ldr	r0, [pc, #16]	; (80025b4 <Vonalszenzor_minta_kuldes+0x48>)
 80025a4:	f001 ff80 	bl	80044a8 <HAL_GPIO_WritePin>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020400 	.word	0x40020400
 80025b8:	200001e4 	.word	0x200001e4

080025bc <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	733b      	strb	r3, [r7, #12]
 80025cc:	2300      	movs	r3, #0
 80025ce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 80025d0:	f107 010c 	add.w	r1, r7, #12
 80025d4:	2364      	movs	r3, #100	; 0x64
 80025d6:	2202      	movs	r2, #2
 80025d8:	4806      	ldr	r0, [pc, #24]	; (80025f4 <Vonalszenzor_meres_kiolvasas+0x38>)
 80025da:	f004 f89b 	bl	8006714 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 80025de:	2364      	movs	r3, #100	; 0x64
 80025e0:	2202      	movs	r2, #2
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <Vonalszenzor_meres_kiolvasas+0x38>)
 80025e6:	f004 f9e1 	bl	80069ac <HAL_SPI_Receive>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004fc 	.word	0x200004fc

080025f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002608:	d109      	bne.n	800261e <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_GPIO_EXTI_Callback+0x34>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <HAL_GPIO_EXTI_Callback+0x34>)
 800261c:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	//LED felvilagitasa
	}
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000100 	.word	0x20000100

08002630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002638:	e7fe      	b.n	8002638 <Error_Handler+0x8>

0800263a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_MspInit+0x4c>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_MspInit+0x4c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800268e:	2007      	movs	r0, #7
 8002690:	f000 fe8c 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b090      	sub	sp, #64	; 0x40
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6b      	ldr	r2, [pc, #428]	; (800286c <HAL_I2C_MspInit+0x1cc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12d      	bne.n	800271e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a69      	ldr	r2, [pc, #420]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e4:	2312      	movs	r3, #18
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f0:	2304      	movs	r3, #4
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f8:	4619      	mov	r1, r3
 80026fa:	485e      	ldr	r0, [pc, #376]	; (8002874 <HAL_I2C_MspInit+0x1d4>)
 80026fc:	f001 fbb0 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a59      	ldr	r2, [pc, #356]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 800270a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800271c:	e0a2      	b.n	8002864 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_I2C_MspInit+0x1d8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d14c      	bne.n	80027c2 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	4a4f      	ldr	r2, [pc, #316]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	6313      	str	r3, [r2, #48]	; 0x30
 8002738:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	4a48      	ldr	r2, [pc, #288]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6313      	str	r3, [r2, #48]	; 0x30
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002766:	2312      	movs	r3, #18
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002772:	2304      	movs	r3, #4
 8002774:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800277a:	4619      	mov	r1, r3
 800277c:	483d      	ldr	r0, [pc, #244]	; (8002874 <HAL_I2C_MspInit+0x1d4>)
 800277e:	f001 fb6f 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002788:	2312      	movs	r3, #18
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002790:	2303      	movs	r3, #3
 8002792:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002794:	2304      	movs	r3, #4
 8002796:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279c:	4619      	mov	r1, r3
 800279e:	4837      	ldr	r0, [pc, #220]	; (800287c <HAL_I2C_MspInit+0x1dc>)
 80027a0:	f001 fb5e 	bl	8003e60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	4a30      	ldr	r2, [pc, #192]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027b2:	6413      	str	r3, [r2, #64]	; 0x40
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	69bb      	ldr	r3, [r7, #24]
}
 80027c0:	e050      	b.n	8002864 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2e      	ldr	r2, [pc, #184]	; (8002880 <HAL_I2C_MspInit+0x1e0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d14b      	bne.n	8002864 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6313      	str	r3, [r2, #48]	; 0x30
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280a:	2312      	movs	r3, #18
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002816:	2304      	movs	r3, #4
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281e:	4619      	mov	r1, r3
 8002820:	4816      	ldr	r0, [pc, #88]	; (800287c <HAL_I2C_MspInit+0x1dc>)
 8002822:	f001 fb1d 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800282c:	2312      	movs	r3, #18
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002838:	2304      	movs	r3, #4
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002840:	4619      	mov	r1, r3
 8002842:	4810      	ldr	r0, [pc, #64]	; (8002884 <HAL_I2C_MspInit+0x1e4>)
 8002844:	f001 fb0c 	bl	8003e60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 8002852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002856:	6413      	str	r3, [r2, #64]	; 0x40
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_I2C_MspInit+0x1d0>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	bf00      	nop
 8002866:	3740      	adds	r7, #64	; 0x40
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40005400 	.word	0x40005400
 8002870:	40023800 	.word	0x40023800
 8002874:	40020400 	.word	0x40020400
 8002878:	40005800 	.word	0x40005800
 800287c:	40020800 	.word	0x40020800
 8002880:	40005c00 	.word	0x40005c00
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a98      	ldr	r2, [pc, #608]	; (8002b08 <HAL_SPI_MspInit+0x280>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d12c      	bne.n	8002904 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ae:	4b97      	ldr	r3, [pc, #604]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4a96      	ldr	r2, [pc, #600]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80028b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ba:	4b94      	ldr	r3, [pc, #592]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	4b90      	ldr	r3, [pc, #576]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a8f      	ldr	r2, [pc, #572]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028e2:	23e0      	movs	r3, #224	; 0xe0
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f2:	2305      	movs	r3, #5
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fa:	4619      	mov	r1, r3
 80028fc:	4884      	ldr	r0, [pc, #528]	; (8002b10 <HAL_SPI_MspInit+0x288>)
 80028fe:	f001 faaf 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002902:	e0fd      	b.n	8002b00 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a82      	ldr	r2, [pc, #520]	; (8002b14 <HAL_SPI_MspInit+0x28c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d14b      	bne.n	80029a6 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	4b7e      	ldr	r3, [pc, #504]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a7d      	ldr	r2, [pc, #500]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	4b77      	ldr	r3, [pc, #476]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a76      	ldr	r2, [pc, #472]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b74      	ldr	r3, [pc, #464]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002962:	2302      	movs	r3, #2
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002972:	2307      	movs	r3, #7
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297a:	4619      	mov	r1, r3
 800297c:	4866      	ldr	r0, [pc, #408]	; (8002b18 <HAL_SPI_MspInit+0x290>)
 800297e:	f001 fa6f 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002994:	2305      	movs	r3, #5
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299c:	4619      	mov	r1, r3
 800299e:	485f      	ldr	r0, [pc, #380]	; (8002b1c <HAL_SPI_MspInit+0x294>)
 80029a0:	f001 fa5e 	bl	8003e60 <HAL_GPIO_Init>
}
 80029a4:	e0ac      	b.n	8002b00 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_SPI_MspInit+0x298>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	f040 80a7 	bne.w	8002b00 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a4d      	ldr	r2, [pc, #308]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_SPI_MspInit+0x284>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a22:	2301      	movs	r3, #1
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002a32:	2307      	movs	r3, #7
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4837      	ldr	r0, [pc, #220]	; (8002b1c <HAL_SPI_MspInit+0x294>)
 8002a3e:	f001 fa0f 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a54:	2306      	movs	r3, #6
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	482c      	ldr	r0, [pc, #176]	; (8002b10 <HAL_SPI_MspInit+0x288>)
 8002a60:	f001 f9fe 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a76:	2306      	movs	r3, #6
 8002a78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4825      	ldr	r0, [pc, #148]	; (8002b18 <HAL_SPI_MspInit+0x290>)
 8002a82:	f001 f9ed 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a86:	2310      	movs	r3, #16
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a96:	2306      	movs	r3, #6
 8002a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	481e      	ldr	r0, [pc, #120]	; (8002b1c <HAL_SPI_MspInit+0x294>)
 8002aa2:	f001 f9dd 	bl	8003e60 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_SPI_MspInit+0x2a0>)
 8002aaa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002ae4:	480f      	ldr	r0, [pc, #60]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002ae6:	f000 fcd1 	bl	800348c <HAL_DMA_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8002af0:	f7ff fd9e 	bl	8002630 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002af8:	649a      	str	r2, [r3, #72]	; 0x48
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_SPI_MspInit+0x29c>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b00:	bf00      	nop
 8002b02:	3740      	adds	r7, #64	; 0x40
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40013000 	.word	0x40013000
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40003800 	.word	0x40003800
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40003c00 	.word	0x40003c00
 8002b24:	20000414 	.word	0x20000414
 8002b28:	40026088 	.word	0x40026088

08002b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d116      	bne.n	8002b6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	201c      	movs	r0, #28
 8002b60:	f000 fc44 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b64:	201c      	movs	r0, #28
 8002b66:	f000 fc6d 	bl	8003444 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002b6a:	e036      	b.n	8002bda <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_TIM_Base_MspInit+0xbc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d116      	bne.n	8002ba4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002b92:	2201      	movs	r2, #1
 8002b94:	2100      	movs	r1, #0
 8002b96:	202b      	movs	r0, #43	; 0x2b
 8002b98:	f000 fc28 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002b9c:	202b      	movs	r0, #43	; 0x2b
 8002b9e:	f000 fc51 	bl	8003444 <HAL_NVIC_EnableIRQ>
}
 8002ba2:	e01a      	b.n	8002bda <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM12)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_TIM_Base_MspInit+0xc0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d115      	bne.n	8002bda <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_TIM_Base_MspInit+0xb8>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2100      	movs	r1, #0
 8002bce:	202b      	movs	r0, #43	; 0x2b
 8002bd0:	f000 fc0c 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002bd4:	202b      	movs	r0, #43	; 0x2b
 8002bd6:	f000 fc35 	bl	8003444 <HAL_NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40010400 	.word	0x40010400
 8002bec:	40001800 	.word	0x40001800

08002bf0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_TIM_PWM_MspInit+0x48>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d115      	bne.n	8002c2e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_TIM_PWM_MspInit+0x4c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_TIM_PWM_MspInit+0x4c>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_TIM_PWM_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	201d      	movs	r0, #29
 8002c24:	f000 fbe2 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c28:	201d      	movs	r0, #29
 8002c2a:	f000 fc0b 	bl	8003444 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40023800 	.word	0x40023800

08002c40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d12b      	bne.n	8002cba <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c9a:	23c0      	movs	r3, #192	; 0xc0
 8002c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002caa:	2302      	movs	r3, #2
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4805      	ldr	r0, [pc, #20]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002cb6:	f001 f8d3 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cba:	bf00      	nop
 8002cbc:	3728      	adds	r7, #40	; 0x28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40000800 	.word	0x40000800
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40020400 	.word	0x40020400

08002cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_TIM_MspPostInit+0xfc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d11e      	bne.n	8002d30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d0e:	2340      	movs	r3, #64	; 0x40
 8002d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	482a      	ldr	r0, [pc, #168]	; (8002dd4 <HAL_TIM_MspPostInit+0x104>)
 8002d2a:	f001 f899 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002d2e:	e048      	b.n	8002dc2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_TIM_MspPostInit+0x108>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d11f      	bne.n	8002d7a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002d56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	4619      	mov	r1, r3
 8002d72:	4818      	ldr	r0, [pc, #96]	; (8002dd4 <HAL_TIM_MspPostInit+0x104>)
 8002d74:	f001 f874 	bl	8003e60 <HAL_GPIO_Init>
}
 8002d78:	e023      	b.n	8002dc2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_TIM_MspPostInit+0x10c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d11e      	bne.n	8002dc2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_TIM_MspPostInit+0x100>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002da0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002db2:	2309      	movs	r3, #9
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <HAL_TIM_MspPostInit+0x110>)
 8002dbe:	f001 f84f 	bl	8003e60 <HAL_GPIO_Init>
}
 8002dc2:	bf00      	nop
 8002dc4:	3728      	adds	r7, #40	; 0x28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40010400 	.word	0x40010400
 8002ddc:	40001800 	.word	0x40001800
 8002de0:	40020400 	.word	0x40020400

08002de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08e      	sub	sp, #56	; 0x38
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5f      	ldr	r2, [pc, #380]	; (8002f80 <HAL_UART_MspInit+0x19c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d153      	bne.n	8002eae <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a5d      	ldr	r2, [pc, #372]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	4b57      	ldr	r3, [pc, #348]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a56      	ldr	r2, [pc, #344]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a4f      	ldr	r2, [pc, #316]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e72:	4619      	mov	r1, r3
 8002e74:	4844      	ldr	r0, [pc, #272]	; (8002f88 <HAL_UART_MspInit+0x1a4>)
 8002e76:	f000 fff3 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e84:	2301      	movs	r3, #1
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	4619      	mov	r1, r3
 8002e96:	483d      	ldr	r0, [pc, #244]	; (8002f8c <HAL_UART_MspInit+0x1a8>)
 8002e98:	f000 ffe2 	bl	8003e60 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2034      	movs	r0, #52	; 0x34
 8002ea2:	f000 faa3 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002ea6:	2034      	movs	r0, #52	; 0x34
 8002ea8:	f000 facc 	bl	8003444 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eac:	e063      	b.n	8002f76 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a37      	ldr	r2, [pc, #220]	; (8002f90 <HAL_UART_MspInit+0x1ac>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d12d      	bne.n	8002f14 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	4a30      	ldr	r2, [pc, #192]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002ec2:	f043 0310 	orr.w	r3, r3, #16
 8002ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ef0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f02:	2307      	movs	r3, #7
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	481e      	ldr	r0, [pc, #120]	; (8002f88 <HAL_UART_MspInit+0x1a4>)
 8002f0e:	f000 ffa7 	bl	8003e60 <HAL_GPIO_Init>
}
 8002f12:	e030      	b.n	8002f76 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_UART_MspInit+0x1b0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d12b      	bne.n	8002f76 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_UART_MspInit+0x1a0>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f56:	230c      	movs	r3, #12
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f66:	2307      	movs	r3, #7
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <HAL_UART_MspInit+0x1a4>)
 8002f72:	f000 ff75 	bl	8003e60 <HAL_GPIO_Init>
}
 8002f76:	bf00      	nop
 8002f78:	3738      	adds	r7, #56	; 0x38
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40004c00 	.word	0x40004c00
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40011000 	.word	0x40011000
 8002f94:	40004400 	.word	0x40004400

08002f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <NMI_Handler+0x4>

08002f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <HardFault_Handler+0x4>

08002fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <MemManage_Handler+0x4>

08002faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <BusFault_Handler+0x4>

08002fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <UsageFault_Handler+0x4>

08002fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe4:	f000 f8ce 	bl	8003184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}

08002fec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <DMA1_Stream5_IRQHandler+0x10>)
 8002ff2:	f000 fcf9 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000414 	.word	0x20000414

08003000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <TIM2_IRQHandler+0x10>)
 8003006:	f004 fe97 	bl	8007d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000554 	.word	0x20000554

08003014 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <TIM3_IRQHandler+0x10>)
 800301a:	f004 fe8d 	bl	8007d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000374 	.word	0x20000374

08003028 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800302c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003030:	f001 fa6c 	bl	800450c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800303c:	4803      	ldr	r0, [pc, #12]	; (800304c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800303e:	f004 fe7b 	bl	8007d38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003042:	4803      	ldr	r0, [pc, #12]	; (8003050 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003044:	f004 fe78 	bl	8007d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	2000023c 	.word	0x2000023c
 8003050:	200005e0 	.word	0x200005e0

08003054 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <UART4_IRQHandler+0x10>)
 800305a:	f006 fc27 	bl	80098ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200004b8 	.word	0x200004b8

08003068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <SystemInit+0x20>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <SystemInit+0x20>)
 8003074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800308c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003092:	490e      	ldr	r1, [pc, #56]	; (80030cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003094:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003098:	e002      	b.n	80030a0 <LoopCopyDataInit>

0800309a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800309c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309e:	3304      	adds	r3, #4

080030a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a4:	d3f9      	bcc.n	800309a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030a8:	4c0b      	ldr	r4, [pc, #44]	; (80030d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ac:	e001      	b.n	80030b2 <LoopFillZerobss>

080030ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b0:	3204      	adds	r2, #4

080030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b4:	d3fb      	bcc.n	80030ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030b6:	f7ff ffd7 	bl	8003068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ba:	f00c ff27 	bl	800ff0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030be:	f7fd ffff 	bl	80010c0 <main>
  bx  lr    
 80030c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030cc:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80030d0:	080102b8 	.word	0x080102b8
  ldr r2, =_sbss
 80030d4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80030d8:	2000072c 	.word	0x2000072c

080030dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <ADC_IRQHandler>
	...

080030e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_Init+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_Init+0x40>)
 80030ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_Init+0x40>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <HAL_Init+0x40>)
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_Init+0x40>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_Init+0x40>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003108:	2003      	movs	r0, #3
 800310a:	f000 f94f 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800310e:	2000      	movs	r0, #0
 8003110:	f000 f808 	bl	8003124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003114:	f7ff fa9c 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00

08003124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_InitTick+0x54>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_InitTick+0x58>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313a:	fbb3 f3f1 	udiv	r3, r3, r1
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f996 	bl	8003474 <HAL_SYSTICK_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00e      	b.n	8003170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d80a      	bhi.n	800316e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003158:	2200      	movs	r2, #0
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f000 f944 	bl	80033ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <HAL_InitTick+0x5c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200000a4 	.word	0x200000a4
 800317c:	200000ac 	.word	0x200000ac
 8003180:	200000a8 	.word	0x200000a8

08003184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_IncTick+0x20>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x24>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_IncTick+0x24>)
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	200000ac 	.word	0x200000ac
 80031a8:	20000628 	.word	0x20000628

080031ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return uwTick;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_GetTick+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000628 	.word	0x20000628

080031c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7ff ffee 	bl	80031ac <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d005      	beq.n	80031ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_Delay+0x44>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ea:	bf00      	nop
 80031ec:	f7ff ffde 	bl	80031ac <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d8f7      	bhi.n	80031ec <HAL_Delay+0x28>
  {
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	200000ac 	.word	0x200000ac

0800320c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323e:	4a04      	ldr	r2, [pc, #16]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60d3      	str	r3, [r2, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <__NVIC_EnableIRQ+0x38>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	; (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	; (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
         );
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	; 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff8e 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b07      	cmp	r3, #7
 80033b8:	d00f      	beq.n	80033da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d00c      	beq.n	80033da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d009      	beq.n	80033da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d006      	beq.n	80033da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d003      	beq.n	80033da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80033d2:	2192      	movs	r1, #146	; 0x92
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80033d6:	f7ff f930 	bl	800263a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ff16 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	0800ffc0 	.word	0x0800ffc0

080033ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d903      	bls.n	800340c <HAL_NVIC_SetPriority+0x20>
 8003404:	21aa      	movs	r1, #170	; 0xaa
 8003406:	480e      	ldr	r0, [pc, #56]	; (8003440 <HAL_NVIC_SetPriority+0x54>)
 8003408:	f7ff f917 	bl	800263a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d903      	bls.n	800341a <HAL_NVIC_SetPriority+0x2e>
 8003412:	21ab      	movs	r1, #171	; 0xab
 8003414:	480a      	ldr	r0, [pc, #40]	; (8003440 <HAL_NVIC_SetPriority+0x54>)
 8003416:	f7ff f910 	bl	800263a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800341a:	f7ff ff1b 	bl	8003254 <__NVIC_GetPriorityGrouping>
 800341e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	6978      	ldr	r0, [r7, #20]
 8003426:	f7ff ff6b 	bl	8003300 <NVIC_EncodePriority>
 800342a:	4602      	mov	r2, r0
 800342c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ff3a 	bl	80032ac <__NVIC_SetPriority>
}
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	0800ffc0 	.word	0x0800ffc0

08003444 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	da03      	bge.n	800345e <HAL_NVIC_EnableIRQ+0x1a>
 8003456:	21be      	movs	r1, #190	; 0xbe
 8003458:	4805      	ldr	r0, [pc, #20]	; (8003470 <HAL_NVIC_EnableIRQ+0x2c>)
 800345a:	f7ff f8ee 	bl	800263a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff04 	bl	8003270 <__NVIC_EnableIRQ>
}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	0800ffc0 	.word	0x0800ffc0

08003474 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff73 	bl	8003368 <SysTick_Config>
 8003482:	4603      	mov	r3, r0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff fe88 	bl	80031ac <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e204      	b.n	80038b2 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a97      	ldr	r2, [pc, #604]	; (800370c <HAL_DMA_Init+0x280>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d04e      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a96      	ldr	r2, [pc, #600]	; (8003710 <HAL_DMA_Init+0x284>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d049      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a94      	ldr	r2, [pc, #592]	; (8003714 <HAL_DMA_Init+0x288>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d044      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a93      	ldr	r2, [pc, #588]	; (8003718 <HAL_DMA_Init+0x28c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d03f      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a91      	ldr	r2, [pc, #580]	; (800371c <HAL_DMA_Init+0x290>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03a      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a90      	ldr	r2, [pc, #576]	; (8003720 <HAL_DMA_Init+0x294>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d035      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a8e      	ldr	r2, [pc, #568]	; (8003724 <HAL_DMA_Init+0x298>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d030      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a8d      	ldr	r2, [pc, #564]	; (8003728 <HAL_DMA_Init+0x29c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02b      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a8b      	ldr	r2, [pc, #556]	; (800372c <HAL_DMA_Init+0x2a0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d026      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a8a      	ldr	r2, [pc, #552]	; (8003730 <HAL_DMA_Init+0x2a4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d021      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a88      	ldr	r2, [pc, #544]	; (8003734 <HAL_DMA_Init+0x2a8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01c      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a87      	ldr	r2, [pc, #540]	; (8003738 <HAL_DMA_Init+0x2ac>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d017      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a85      	ldr	r2, [pc, #532]	; (800373c <HAL_DMA_Init+0x2b0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d012      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a84      	ldr	r2, [pc, #528]	; (8003740 <HAL_DMA_Init+0x2b4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00d      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a82      	ldr	r2, [pc, #520]	; (8003744 <HAL_DMA_Init+0x2b8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d008      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a81      	ldr	r2, [pc, #516]	; (8003748 <HAL_DMA_Init+0x2bc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <HAL_DMA_Init+0xc4>
 8003548:	21b8      	movs	r1, #184	; 0xb8
 800354a:	4880      	ldr	r0, [pc, #512]	; (800374c <HAL_DMA_Init+0x2c0>)
 800354c:	f7ff f875 	bl	800263a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d026      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003560:	d021      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800356a:	d01c      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003574:	d017      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357e:	d012      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003588:	d00d      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800359c:	d003      	beq.n	80035a6 <HAL_DMA_Init+0x11a>
 800359e:	21b9      	movs	r1, #185	; 0xb9
 80035a0:	486a      	ldr	r0, [pc, #424]	; (800374c <HAL_DMA_Init+0x2c0>)
 80035a2:	f7ff f84a 	bl	800263a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_DMA_Init+0x13a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d007      	beq.n	80035c6 <HAL_DMA_Init+0x13a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d003      	beq.n	80035c6 <HAL_DMA_Init+0x13a>
 80035be:	21ba      	movs	r1, #186	; 0xba
 80035c0:	4862      	ldr	r0, [pc, #392]	; (800374c <HAL_DMA_Init+0x2c0>)
 80035c2:	f7ff f83a 	bl	800263a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ce:	d007      	beq.n	80035e0 <HAL_DMA_Init+0x154>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_DMA_Init+0x154>
 80035d8:	21bb      	movs	r1, #187	; 0xbb
 80035da:	485c      	ldr	r0, [pc, #368]	; (800374c <HAL_DMA_Init+0x2c0>)
 80035dc:	f7ff f82d 	bl	800263a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d007      	beq.n	80035fa <HAL_DMA_Init+0x16e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_DMA_Init+0x16e>
 80035f2:	21bc      	movs	r1, #188	; 0xbc
 80035f4:	4855      	ldr	r0, [pc, #340]	; (800374c <HAL_DMA_Init+0x2c0>)
 80035f6:	f7ff f820 	bl	800263a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <HAL_DMA_Init+0x192>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360a:	d008      	beq.n	800361e <HAL_DMA_Init+0x192>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d003      	beq.n	800361e <HAL_DMA_Init+0x192>
 8003616:	21bd      	movs	r1, #189	; 0xbd
 8003618:	484c      	ldr	r0, [pc, #304]	; (800374c <HAL_DMA_Init+0x2c0>)
 800361a:	f7ff f80e 	bl	800263a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <HAL_DMA_Init+0x1b6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Init+0x1b6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003638:	d003      	beq.n	8003642 <HAL_DMA_Init+0x1b6>
 800363a:	21be      	movs	r1, #190	; 0xbe
 800363c:	4843      	ldr	r0, [pc, #268]	; (800374c <HAL_DMA_Init+0x2c0>)
 800363e:	f7fe fffc 	bl	800263a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_DMA_Init+0x1d8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003652:	d007      	beq.n	8003664 <HAL_DMA_Init+0x1d8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b20      	cmp	r3, #32
 800365a:	d003      	beq.n	8003664 <HAL_DMA_Init+0x1d8>
 800365c:	21bf      	movs	r1, #191	; 0xbf
 800365e:	483b      	ldr	r0, [pc, #236]	; (800374c <HAL_DMA_Init+0x2c0>)
 8003660:	f7fe ffeb 	bl	800263a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <HAL_DMA_Init+0x206>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d00d      	beq.n	8003692 <HAL_DMA_Init+0x206>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800367e:	d008      	beq.n	8003692 <HAL_DMA_Init+0x206>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003688:	d003      	beq.n	8003692 <HAL_DMA_Init+0x206>
 800368a:	21c0      	movs	r1, #192	; 0xc0
 800368c:	482f      	ldr	r0, [pc, #188]	; (800374c <HAL_DMA_Init+0x2c0>)
 800368e:	f7fe ffd4 	bl	800263a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <HAL_DMA_Init+0x21e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_DMA_Init+0x21e>
 80036a2:	21c1      	movs	r1, #193	; 0xc1
 80036a4:	4829      	ldr	r0, [pc, #164]	; (800374c <HAL_DMA_Init+0x2c0>)
 80036a6:	f7fe ffc8 	bl	800263a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d065      	beq.n	800377e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00f      	beq.n	80036da <HAL_DMA_Init+0x24e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d00b      	beq.n	80036da <HAL_DMA_Init+0x24e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d007      	beq.n	80036da <HAL_DMA_Init+0x24e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d003      	beq.n	80036da <HAL_DMA_Init+0x24e>
 80036d2:	21c6      	movs	r1, #198	; 0xc6
 80036d4:	481d      	ldr	r0, [pc, #116]	; (800374c <HAL_DMA_Init+0x2c0>)
 80036d6:	f7fe ffb0 	bl	800263a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_DMA_Init+0x2c4>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ea:	d031      	beq.n	8003750 <HAL_DMA_Init+0x2c4>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f4:	d02c      	beq.n	8003750 <HAL_DMA_Init+0x2c4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fe:	d027      	beq.n	8003750 <HAL_DMA_Init+0x2c4>
 8003700:	21c7      	movs	r1, #199	; 0xc7
 8003702:	4812      	ldr	r0, [pc, #72]	; (800374c <HAL_DMA_Init+0x2c0>)
 8003704:	f7fe ff99 	bl	800263a <assert_failed>
 8003708:	e022      	b.n	8003750 <HAL_DMA_Init+0x2c4>
 800370a:	bf00      	nop
 800370c:	40026010 	.word	0x40026010
 8003710:	40026028 	.word	0x40026028
 8003714:	40026040 	.word	0x40026040
 8003718:	40026058 	.word	0x40026058
 800371c:	40026070 	.word	0x40026070
 8003720:	40026088 	.word	0x40026088
 8003724:	400260a0 	.word	0x400260a0
 8003728:	400260b8 	.word	0x400260b8
 800372c:	40026410 	.word	0x40026410
 8003730:	40026428 	.word	0x40026428
 8003734:	40026440 	.word	0x40026440
 8003738:	40026458 	.word	0x40026458
 800373c:	40026470 	.word	0x40026470
 8003740:	40026488 	.word	0x40026488
 8003744:	400264a0 	.word	0x400264a0
 8003748:	400264b8 	.word	0x400264b8
 800374c:	0800fffc 	.word	0x0800fffc
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <HAL_DMA_Init+0x2f2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003760:	d00d      	beq.n	800377e <HAL_DMA_Init+0x2f2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376a:	d008      	beq.n	800377e <HAL_DMA_Init+0x2f2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003774:	d003      	beq.n	800377e <HAL_DMA_Init+0x2f2>
 8003776:	21c8      	movs	r1, #200	; 0xc8
 8003778:	4850      	ldr	r0, [pc, #320]	; (80038bc <HAL_DMA_Init+0x430>)
 800377a:	f7fe ff5e 	bl	800263a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379e:	e00f      	b.n	80037c0 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a0:	f7ff fd04 	bl	80031ac <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d908      	bls.n	80037c0 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2203      	movs	r2, #3
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e078      	b.n	80038b2 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e8      	bne.n	80037a0 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_DMA_Init+0x434>)
 80037da:	4013      	ands	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4313      	orrs	r3, r2
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 0307 	bic.w	r3, r3, #7
 8003840:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2b04      	cmp	r3, #4
 8003852:	d117      	bne.n	8003884 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa7e 	bl	8003d68 <DMA_CheckFifoParam>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003880:	2301      	movs	r3, #1
 8003882:	e016      	b.n	80038b2 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fa35 	bl	8003cfc <DMA_CalcBaseAndBitshift>
 8003892:	4603      	mov	r3, r0
 8003894:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	223f      	movs	r2, #63	; 0x3f
 800389c:	409a      	lsls	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	0800fffc 	.word	0x0800fffc
 80038c0:	f010803f 	.word	0xf010803f

080038c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038d2:	f7ff fc6b 	bl	80031ac <HAL_GetTick>
 80038d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d008      	beq.n	80038f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e052      	b.n	800399c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0216 	bic.w	r2, r2, #22
 8003904:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003914:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <HAL_DMA_Abort+0x62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0208 	bic.w	r2, r2, #8
 8003934:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003946:	e013      	b.n	8003970 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003948:	f7ff fc30 	bl	80031ac <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b05      	cmp	r3, #5
 8003954:	d90c      	bls.n	8003970 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2203      	movs	r2, #3
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e015      	b.n	800399c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e4      	bne.n	8003948 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	223f      	movs	r2, #63	; 0x3f
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e00c      	b.n	80039dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2205      	movs	r2, #5
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f4:	4b92      	ldr	r3, [pc, #584]	; (8003c40 <HAL_DMA_IRQHandler+0x258>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a92      	ldr	r2, [pc, #584]	; (8003c44 <HAL_DMA_IRQHandler+0x25c>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0a9b      	lsrs	r3, r3, #10
 8003a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	2208      	movs	r2, #8
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01a      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0204 	bic.w	r2, r2, #4
 8003a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	2208      	movs	r2, #8
 8003a42:	409a      	lsls	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	2201      	movs	r2, #1
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2204      	movs	r2, #4
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	2204      	movs	r2, #4
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0204 	orr.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d043      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03c      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d018      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e01f      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e016      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0208 	bic.w	r2, r2, #8
 8003b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 808e 	beq.w	8003c86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8086 	beq.w	8003c86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	2220      	movs	r2, #32
 8003b80:	409a      	lsls	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d136      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0216 	bic.w	r2, r2, #22
 8003ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x1da>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0208 	bic.w	r2, r2, #8
 8003bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	223f      	movs	r2, #63	; 0x3f
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d07d      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
        }
        return;
 8003bfe:	e078      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01c      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d108      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d030      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e02b      	b.n	8003c86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d027      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
 8003c3e:	e022      	b.n	8003c86 <HAL_DMA_IRQHandler+0x29e>
 8003c40:	200000a4 	.word	0x200000a4
 8003c44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0210 	bic.w	r2, r2, #16
 8003c64:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d032      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d022      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d307      	bcc.n	8003cce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f2      	bne.n	8003cb2 <HAL_DMA_IRQHandler+0x2ca>
 8003ccc:	e000      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003cce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
 8003cf0:	e000      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cf2:	bf00      	nop
    }
  }
}
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop

08003cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	3b10      	subs	r3, #16
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <DMA_CalcBaseAndBitshift+0x64>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d16:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <DMA_CalcBaseAndBitshift+0x68>)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d909      	bls.n	8003d3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d3c:	e007      	b.n	8003d4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	aaaaaaab 	.word	0xaaaaaaab
 8003d64:	08010278 	.word	0x08010278

08003d68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11f      	bne.n	8003dc2 <DMA_CheckFifoParam+0x5a>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d856      	bhi.n	8003e36 <DMA_CheckFifoParam+0xce>
 8003d88:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <DMA_CheckFifoParam+0x28>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003db3 	.word	0x08003db3
 8003d98:	08003da1 	.word	0x08003da1
 8003d9c:	08003e37 	.word	0x08003e37
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d046      	beq.n	8003e3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db0:	e043      	b.n	8003e3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dba:	d140      	bne.n	8003e3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc0:	e03d      	b.n	8003e3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dca:	d121      	bne.n	8003e10 <DMA_CheckFifoParam+0xa8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d837      	bhi.n	8003e42 <DMA_CheckFifoParam+0xda>
 8003dd2:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <DMA_CheckFifoParam+0x70>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003def 	.word	0x08003def
 8003de0:	08003de9 	.word	0x08003de9
 8003de4:	08003e01 	.word	0x08003e01
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e030      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d025      	beq.n	8003e46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfe:	e022      	b.n	8003e46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e08:	d11f      	bne.n	8003e4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e0e:	e01c      	b.n	8003e4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d903      	bls.n	8003e1e <DMA_CheckFifoParam+0xb6>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d003      	beq.n	8003e24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e1c:	e018      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
      break;
 8003e22:	e015      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
      break;
 8003e34:	e00b      	b.n	8003e4e <DMA_CheckFifoParam+0xe6>
      break;
 8003e36:	bf00      	nop
 8003e38:	e00a      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e008      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e006      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e004      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      break;
 8003e46:	bf00      	nop
 8003e48:	e002      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <DMA_CheckFifoParam+0xe8>
      break;
 8003e4e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a37      	ldr	r2, [pc, #220]	; (8003f58 <HAL_GPIO_Init+0xf8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a36      	ldr	r2, [pc, #216]	; (8003f5c <HAL_GPIO_Init+0xfc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01b      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a35      	ldr	r2, [pc, #212]	; (8003f60 <HAL_GPIO_Init+0x100>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d017      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a34      	ldr	r2, [pc, #208]	; (8003f64 <HAL_GPIO_Init+0x104>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a33      	ldr	r2, [pc, #204]	; (8003f68 <HAL_GPIO_Init+0x108>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a32      	ldr	r2, [pc, #200]	; (8003f6c <HAL_GPIO_Init+0x10c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a31      	ldr	r2, [pc, #196]	; (8003f70 <HAL_GPIO_Init+0x110>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a30      	ldr	r2, [pc, #192]	; (8003f74 <HAL_GPIO_Init+0x114>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x5e>
 8003eb6:	21ac      	movs	r1, #172	; 0xac
 8003eb8:	482f      	ldr	r0, [pc, #188]	; (8003f78 <HAL_GPIO_Init+0x118>)
 8003eba:	f7fe fbbe 	bl	800263a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_GPIO_Init+0x74>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x7c>
 8003ed4:	21ad      	movs	r1, #173	; 0xad
 8003ed6:	4828      	ldr	r0, [pc, #160]	; (8003f78 <HAL_GPIO_Init+0x118>)
 8003ed8:	f7fe fbaf 	bl	800263a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d035      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d031      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b11      	cmp	r3, #17
 8003ef2:	d02d      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d029      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b12      	cmp	r3, #18
 8003f02:	d025      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003f0c:	d020      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003f16:	d01b      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003f20:	d016      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003f2a:	d011      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003f34:	d00c      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003f3e:	d007      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0xf0>
 8003f48:	21ae      	movs	r1, #174	; 0xae
 8003f4a:	480b      	ldr	r0, [pc, #44]	; (8003f78 <HAL_GPIO_Init+0x118>)
 8003f4c:	f7fe fb75 	bl	800263a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e289      	b.n	800446a <HAL_GPIO_Init+0x60a>
 8003f56:	bf00      	nop
 8003f58:	40020000 	.word	0x40020000
 8003f5c:	40020400 	.word	0x40020400
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40020c00 	.word	0x40020c00
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40021400 	.word	0x40021400
 8003f70:	40021800 	.word	0x40021800
 8003f74:	40021c00 	.word	0x40021c00
 8003f78:	08010034 	.word	0x08010034
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 8265 	bne.w	8004464 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d005      	beq.n	8003fb2 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d144      	bne.n	800403c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00f      	beq.n	8003fda <HAL_GPIO_Init+0x17a>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d00b      	beq.n	8003fda <HAL_GPIO_Init+0x17a>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d007      	beq.n	8003fda <HAL_GPIO_Init+0x17a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x17a>
 8003fd2:	21c0      	movs	r1, #192	; 0xc0
 8003fd4:	4831      	ldr	r0, [pc, #196]	; (800409c <HAL_GPIO_Init+0x23c>)
 8003fd6:	f7fe fb30 	bl	800263a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004010:	2201      	movs	r2, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 0201 	and.w	r2, r3, #1
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b03      	cmp	r3, #3
 8004046:	d02b      	beq.n	80040a0 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_GPIO_Init+0x208>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d007      	beq.n	8004068 <HAL_GPIO_Init+0x208>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x208>
 8004060:	21d1      	movs	r1, #209	; 0xd1
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <HAL_GPIO_Init+0x23c>)
 8004064:	f7fe fae9 	bl	800263a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	2203      	movs	r2, #3
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 800409a:	bf00      	nop
 800409c:	08010034 	.word	0x08010034
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	f040 810c 	bne.w	80042c6 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80e3 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b09      	cmp	r3, #9
 80040be:	f000 80de 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80d9 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80d4 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80cf 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80ca 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	f000 80c5 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	f000 80c0 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b02      	cmp	r3, #2
 8004104:	f000 80bb 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b02      	cmp	r3, #2
 800410e:	f000 80b6 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b02      	cmp	r3, #2
 8004118:	f000 80b1 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b03      	cmp	r3, #3
 8004122:	f000 80ac 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b04      	cmp	r3, #4
 800412c:	f000 80a7 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b04      	cmp	r3, #4
 8004136:	f000 80a2 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b04      	cmp	r3, #4
 8004140:	f000 809d 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b05      	cmp	r3, #5
 800414a:	f000 8098 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b05      	cmp	r3, #5
 8004154:	f000 8093 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b09      	cmp	r3, #9
 800415e:	f000 808e 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b06      	cmp	r3, #6
 8004168:	f000 8089 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b09      	cmp	r3, #9
 8004172:	f000 8084 	beq.w	800427e <HAL_GPIO_Init+0x41e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b07      	cmp	r3, #7
 800417c:	d07f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b07      	cmp	r3, #7
 8004184:	d07b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b07      	cmp	r3, #7
 800418c:	d077      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b08      	cmp	r3, #8
 8004194:	d073      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d06f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d06b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d067      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b09      	cmp	r3, #9
 80041b4:	d063      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b0a      	cmp	r3, #10
 80041bc:	d05f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d05b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b0b      	cmp	r3, #11
 80041cc:	d057      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d053      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d04f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b0d      	cmp	r3, #13
 80041e4:	d04b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d047      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d043      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d03f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b06      	cmp	r3, #6
 8004204:	d03b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d037      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d033      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d02f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b06      	cmp	r3, #6
 8004224:	d02b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b06      	cmp	r3, #6
 800422c:	d027      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b07      	cmp	r3, #7
 8004234:	d023      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b07      	cmp	r3, #7
 800423c:	d01f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b07      	cmp	r3, #7
 8004244:	d01b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b07      	cmp	r3, #7
 800424c:	d017      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d013      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b08      	cmp	r3, #8
 800425c:	d00f      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b09      	cmp	r3, #9
 8004264:	d00b      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b0a      	cmp	r3, #10
 800426c:	d007      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b0a      	cmp	r3, #10
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x41e>
 8004276:	21de      	movs	r1, #222	; 0xde
 8004278:	4880      	ldr	r0, [pc, #512]	; (800447c <HAL_GPIO_Init+0x61c>)
 800427a:	f7fe f9de 	bl	800263a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	69b9      	ldr	r1, [r7, #24]
 80042c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 0203 	and.w	r2, r3, #3
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80ae 	beq.w	8004464 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	4b5c      	ldr	r3, [pc, #368]	; (8004480 <HAL_GPIO_Init+0x620>)
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	4a5b      	ldr	r2, [pc, #364]	; (8004480 <HAL_GPIO_Init+0x620>)
 8004312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004316:	6453      	str	r3, [r2, #68]	; 0x44
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <HAL_GPIO_Init+0x620>)
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004324:	4a57      	ldr	r2, [pc, #348]	; (8004484 <HAL_GPIO_Init+0x624>)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3302      	adds	r3, #2
 800432c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	220f      	movs	r2, #15
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a4f      	ldr	r2, [pc, #316]	; (8004488 <HAL_GPIO_Init+0x628>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d025      	beq.n	800439c <HAL_GPIO_Init+0x53c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a4e      	ldr	r2, [pc, #312]	; (800448c <HAL_GPIO_Init+0x62c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01f      	beq.n	8004398 <HAL_GPIO_Init+0x538>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a4d      	ldr	r2, [pc, #308]	; (8004490 <HAL_GPIO_Init+0x630>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d019      	beq.n	8004394 <HAL_GPIO_Init+0x534>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a4c      	ldr	r2, [pc, #304]	; (8004494 <HAL_GPIO_Init+0x634>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_GPIO_Init+0x530>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a4b      	ldr	r2, [pc, #300]	; (8004498 <HAL_GPIO_Init+0x638>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00d      	beq.n	800438c <HAL_GPIO_Init+0x52c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a4a      	ldr	r2, [pc, #296]	; (800449c <HAL_GPIO_Init+0x63c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <HAL_GPIO_Init+0x528>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a49      	ldr	r2, [pc, #292]	; (80044a0 <HAL_GPIO_Init+0x640>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <HAL_GPIO_Init+0x524>
 8004380:	2306      	movs	r3, #6
 8004382:	e00c      	b.n	800439e <HAL_GPIO_Init+0x53e>
 8004384:	2307      	movs	r3, #7
 8004386:	e00a      	b.n	800439e <HAL_GPIO_Init+0x53e>
 8004388:	2305      	movs	r3, #5
 800438a:	e008      	b.n	800439e <HAL_GPIO_Init+0x53e>
 800438c:	2304      	movs	r3, #4
 800438e:	e006      	b.n	800439e <HAL_GPIO_Init+0x53e>
 8004390:	2303      	movs	r3, #3
 8004392:	e004      	b.n	800439e <HAL_GPIO_Init+0x53e>
 8004394:	2302      	movs	r3, #2
 8004396:	e002      	b.n	800439e <HAL_GPIO_Init+0x53e>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_GPIO_Init+0x53e>
 800439c:	2300      	movs	r3, #0
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	f002 0203 	and.w	r2, r2, #3
 80043a4:	0092      	lsls	r2, r2, #2
 80043a6:	4093      	lsls	r3, r2
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ae:	4935      	ldr	r1, [pc, #212]	; (8004484 <HAL_GPIO_Init+0x624>)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043bc:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <HAL_GPIO_Init+0x644>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043e0:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <HAL_GPIO_Init+0x644>)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043e6:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <HAL_GPIO_Init+0x644>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800440a:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <HAL_GPIO_Init+0x644>)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004410:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <HAL_GPIO_Init+0x644>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004434:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <HAL_GPIO_Init+0x644>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <HAL_GPIO_Init+0x644>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800445e:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <HAL_GPIO_Init+0x644>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	3301      	adds	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2b0f      	cmp	r3, #15
 800446e:	f67f ad85 	bls.w	8003f7c <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	08010034 	.word	0x08010034
 8004480:	40023800 	.word	0x40023800
 8004484:	40013800 	.word	0x40013800
 8004488:	40020000 	.word	0x40020000
 800448c:	40020400 	.word	0x40020400
 8004490:	40020800 	.word	0x40020800
 8004494:	40020c00 	.word	0x40020c00
 8004498:	40021000 	.word	0x40021000
 800449c:	40021400 	.word	0x40021400
 80044a0:	40021800 	.word	0x40021800
 80044a4:	40013c00 	.word	0x40013c00

080044a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <HAL_GPIO_WritePin+0x20>
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <HAL_GPIO_WritePin+0x2a>
 80044c8:	f240 119d 	movw	r1, #413	; 0x19d
 80044cc:	480e      	ldr	r0, [pc, #56]	; (8004508 <HAL_GPIO_WritePin+0x60>)
 80044ce:	f7fe f8b4 	bl	800263a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80044d2:	787b      	ldrb	r3, [r7, #1]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_GPIO_WritePin+0x40>
 80044d8:	787b      	ldrb	r3, [r7, #1]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d004      	beq.n	80044e8 <HAL_GPIO_WritePin+0x40>
 80044de:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80044e2:	4809      	ldr	r0, [pc, #36]	; (8004508 <HAL_GPIO_WritePin+0x60>)
 80044e4:	f7fe f8a9 	bl	800263a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80044e8:	787b      	ldrb	r3, [r7, #1]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044f4:	e003      	b.n	80044fe <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044f6:	887b      	ldrh	r3, [r7, #2]
 80044f8:	041a      	lsls	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	619a      	str	r2, [r3, #24]
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	08010034 	.word	0x08010034

0800450c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004522:	4a05      	ldr	r2, [pc, #20]	; (8004538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe f864 	bl	80025f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40013c00 	.word	0x40013c00

0800453c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1be      	b.n	80048cc <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a9f      	ldr	r2, [pc, #636]	; (80047d0 <HAL_I2C_Init+0x294>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_I2C_Init+0x3a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a9d      	ldr	r2, [pc, #628]	; (80047d4 <HAL_I2C_Init+0x298>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_I2C_Init+0x3a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a9c      	ldr	r2, [pc, #624]	; (80047d8 <HAL_I2C_Init+0x29c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_I2C_Init+0x3a>
 800456c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004570:	489a      	ldr	r0, [pc, #616]	; (80047dc <HAL_I2C_Init+0x2a0>)
 8004572:	f7fe f862 	bl	800263a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_I2C_Init+0x4c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a97      	ldr	r2, [pc, #604]	; (80047e0 <HAL_I2C_Init+0x2a4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d904      	bls.n	8004592 <HAL_I2C_Init+0x56>
 8004588:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800458c:	4893      	ldr	r0, [pc, #588]	; (80047dc <HAL_I2C_Init+0x2a0>)
 800458e:	f7fe f854 	bl	800263a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_I2C_Init+0x72>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a2:	d004      	beq.n	80045ae <HAL_I2C_Init+0x72>
 80045a4:	f240 11c1 	movw	r1, #449	; 0x1c1
 80045a8:	488c      	ldr	r0, [pc, #560]	; (80047dc <HAL_I2C_Init+0x2a0>)
 80045aa:	f7fe f846 	bl	800263a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <HAL_I2C_Init+0x8c>
 80045be:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80045c2:	4886      	ldr	r0, [pc, #536]	; (80047dc <HAL_I2C_Init+0x2a0>)
 80045c4:	f7fe f839 	bl	800263a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d0:	d009      	beq.n	80045e6 <HAL_I2C_Init+0xaa>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045da:	d004      	beq.n	80045e6 <HAL_I2C_Init+0xaa>
 80045dc:	f240 11c3 	movw	r1, #451	; 0x1c3
 80045e0:	487e      	ldr	r0, [pc, #504]	; (80047dc <HAL_I2C_Init+0x2a0>)
 80045e2:	f7fe f82a 	bl	800263a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_I2C_Init+0xc4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d004      	beq.n	8004600 <HAL_I2C_Init+0xc4>
 80045f6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80045fa:	4878      	ldr	r0, [pc, #480]	; (80047dc <HAL_I2C_Init+0x2a0>)
 80045fc:	f7fe f81d 	bl	800263a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <HAL_I2C_Init+0xda>
 800460c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004610:	4872      	ldr	r0, [pc, #456]	; (80047dc <HAL_I2C_Init+0x2a0>)
 8004612:	f7fe f812 	bl	800263a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_I2C_Init+0xf4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d004      	beq.n	8004630 <HAL_I2C_Init+0xf4>
 8004626:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800462a:	486c      	ldr	r0, [pc, #432]	; (80047dc <HAL_I2C_Init+0x2a0>)
 800462c:	f7fe f805 	bl	800263a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_I2C_Init+0x10e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d004      	beq.n	800464a <HAL_I2C_Init+0x10e>
 8004640:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004644:	4865      	ldr	r0, [pc, #404]	; (80047dc <HAL_I2C_Init+0x2a0>)
 8004646:	f7fd fff8 	bl	800263a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fe f81e 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2224      	movs	r2, #36	; 0x24
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800468a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800469c:	f001 f96e 	bl	800597c <HAL_RCC_GetPCLK1Freq>
 80046a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4a4f      	ldr	r2, [pc, #316]	; (80047e4 <HAL_I2C_Init+0x2a8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d807      	bhi.n	80046bc <HAL_I2C_Init+0x180>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a4e      	ldr	r2, [pc, #312]	; (80047e8 <HAL_I2C_Init+0x2ac>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf94      	ite	ls
 80046b4:	2301      	movls	r3, #1
 80046b6:	2300      	movhi	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e006      	b.n	80046ca <HAL_I2C_Init+0x18e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4a4b      	ldr	r2, [pc, #300]	; (80047ec <HAL_I2C_Init+0x2b0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	bf94      	ite	ls
 80046c4:	2301      	movls	r3, #1
 80046c6:	2300      	movhi	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e0fc      	b.n	80048cc <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a46      	ldr	r2, [pc, #280]	; (80047f0 <HAL_I2C_Init+0x2b4>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0c9b      	lsrs	r3, r3, #18
 80046dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <HAL_I2C_Init+0x2a8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d802      	bhi.n	800470c <HAL_I2C_Init+0x1d0>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	e009      	b.n	8004720 <HAL_I2C_Init+0x1e4>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	4a37      	ldr	r2, [pc, #220]	; (80047f4 <HAL_I2C_Init+0x2b8>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	099b      	lsrs	r3, r3, #6
 800471e:	3301      	adds	r3, #1
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	430b      	orrs	r3, r1
 8004726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	492a      	ldr	r1, [pc, #168]	; (80047e4 <HAL_I2C_Init+0x2a8>)
 800473c:	428b      	cmp	r3, r1
 800473e:	d819      	bhi.n	8004774 <HAL_I2C_Init+0x238>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1e59      	subs	r1, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fbb1 f3f3 	udiv	r3, r1, r3
 800474e:	1c59      	adds	r1, r3, #1
 8004750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004754:	400b      	ands	r3, r1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_I2C_Init+0x234>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1e59      	subs	r1, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	fbb1 f3f3 	udiv	r3, r1, r3
 8004768:	3301      	adds	r3, #1
 800476a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476e:	e066      	b.n	800483e <HAL_I2C_Init+0x302>
 8004770:	2304      	movs	r3, #4
 8004772:	e064      	b.n	800483e <HAL_I2C_Init+0x302>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d111      	bne.n	80047a0 <HAL_I2C_Init+0x264>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1e58      	subs	r0, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	440b      	add	r3, r1
 800478a:	fbb0 f3f3 	udiv	r3, r0, r3
 800478e:	3301      	adds	r3, #1
 8004790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e012      	b.n	80047c6 <HAL_I2C_Init+0x28a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	0099      	lsls	r1, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_I2C_Init+0x2bc>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e037      	b.n	800483e <HAL_I2C_Init+0x302>
 80047ce:	bf00      	nop
 80047d0:	40005400 	.word	0x40005400
 80047d4:	40005800 	.word	0x40005800
 80047d8:	40005c00 	.word	0x40005c00
 80047dc:	08010070 	.word	0x08010070
 80047e0:	00061a80 	.word	0x00061a80
 80047e4:	000186a0 	.word	0x000186a0
 80047e8:	001e847f 	.word	0x001e847f
 80047ec:	003d08ff 	.word	0x003d08ff
 80047f0:	431bde83 	.word	0x431bde83
 80047f4:	10624dd3 	.word	0x10624dd3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10e      	bne.n	800481e <HAL_I2C_Init+0x2e2>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1e58      	subs	r0, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6859      	ldr	r1, [r3, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481c:	e00f      	b.n	800483e <HAL_I2C_Init+0x302>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1e58      	subs	r0, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6859      	ldr	r1, [r3, #4]
 8004826:	460b      	mov	r3, r1
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	0099      	lsls	r1, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	fbb0 f3f3 	udiv	r3, r0, r3
 8004834:	3301      	adds	r3, #1
 8004836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	6809      	ldr	r1, [r1, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800486c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6911      	ldr	r1, [r2, #16]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68d2      	ldr	r2, [r2, #12]
 8004878:	4311      	orrs	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	430b      	orrs	r3, r1
 8004880:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	461a      	mov	r2, r3
 80048e0:	460b      	mov	r3, r1
 80048e2:	817b      	strh	r3, [r7, #10]
 80048e4:	4613      	mov	r3, r2
 80048e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7fe fc60 	bl	80031ac <HAL_GetTick>
 80048ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	f040 80e0 	bne.w	8004abc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2319      	movs	r3, #25
 8004902:	2201      	movs	r2, #1
 8004904:	4970      	ldr	r1, [pc, #448]	; (8004ac8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fc58 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
 8004914:	e0d3      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_I2C_Master_Transmit+0x50>
 8004920:	2302      	movs	r3, #2
 8004922:	e0cc      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1ea>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d007      	beq.n	800494a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2221      	movs	r2, #33	; 0x21
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2210      	movs	r2, #16
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	893a      	ldrh	r2, [r7, #8]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4a50      	ldr	r2, [pc, #320]	; (8004acc <HAL_I2C_Master_Transmit+0x1f8>)
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800498c:	8979      	ldrh	r1, [r7, #10]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a3a      	ldr	r2, [r7, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fac2 	bl	8004f1c <I2C_MasterRequestWrite>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e08d      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049b8:	e066      	b.n	8004a88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6a39      	ldr	r1, [r7, #32]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fcd2 	bl	8005368 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00d      	beq.n	80049e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d107      	bne.n	80049e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e06b      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	781a      	ldrb	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d11b      	bne.n	8004a5c <HAL_I2C_Master_Transmit+0x188>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d017      	beq.n	8004a5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	6a39      	ldr	r1, [r7, #32]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fcc2 	bl	80053ea <I2C_WaitOnBTFFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d107      	bne.n	8004a84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e01a      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d194      	bne.n	80049ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	00100002 	.word	0x00100002
 8004acc:	ffff0000 	.word	0xffff0000

08004ad0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	461a      	mov	r2, r3
 8004adc:	460b      	mov	r3, r1
 8004ade:	817b      	strh	r3, [r7, #10]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7fe fb62 	bl	80031ac <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	f040 820b 	bne.w	8004f0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2319      	movs	r3, #25
 8004afe:	2201      	movs	r2, #1
 8004b00:	497c      	ldr	r1, [pc, #496]	; (8004cf4 <HAL_I2C_Master_Receive+0x224>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fb5a 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e1fe      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2C_Master_Receive+0x50>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e1f7      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d007      	beq.n	8004b46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2222      	movs	r2, #34	; 0x22
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2210      	movs	r2, #16
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4a5c      	ldr	r2, [pc, #368]	; (8004cf8 <HAL_I2C_Master_Receive+0x228>)
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b88:	8979      	ldrh	r1, [r7, #10]
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa46 	bl	8005020 <I2C_MasterRequestRead>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e1b8      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d113      	bne.n	8004bce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e18c      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d11b      	bne.n	8004c0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e16c      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d11b      	bne.n	8004c4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	e14c      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c74:	e138      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	f200 80f1 	bhi.w	8004e62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d123      	bne.n	8004cd0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fbed 	bl	800546c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e139      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cce:	e10b      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d14e      	bne.n	8004d76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4906      	ldr	r1, [pc, #24]	; (8004cfc <HAL_I2C_Master_Receive+0x22c>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fa6a 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e10e      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
 8004cf2:	bf00      	nop
 8004cf4:	00100002 	.word	0x00100002
 8004cf8:	ffff0000 	.word	0xffff0000
 8004cfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d74:	e0b8      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4966      	ldr	r1, [pc, #408]	; (8004f18 <HAL_I2C_Master_Receive+0x448>)
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fa1b 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0bf      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	2200      	movs	r2, #0
 8004dda:	494f      	ldr	r1, [pc, #316]	; (8004f18 <HAL_I2C_Master_Receive+0x448>)
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f9ed 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e091      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e60:	e042      	b.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fb00 	bl	800546c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e04c      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d118      	bne.n	8004ee8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f47f aec2 	bne.w	8004c76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3728      	adds	r7, #40	; 0x28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	00010004 	.word	0x00010004

08004f1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d006      	beq.n	8004f46 <I2C_MasterRequestWrite+0x2a>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d003      	beq.n	8004f46 <I2C_MasterRequestWrite+0x2a>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f44:	d108      	bne.n	8004f58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e00b      	b.n	8004f70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	2b12      	cmp	r3, #18
 8004f5e:	d107      	bne.n	8004f70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f91d 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f96:	d103      	bne.n	8004fa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e035      	b.n	8005010 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fac:	d108      	bne.n	8004fc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fae:	897b      	ldrh	r3, [r7, #10]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fbc:	611a      	str	r2, [r3, #16]
 8004fbe:	e01b      	b.n	8004ff8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fc0:	897b      	ldrh	r3, [r7, #10]
 8004fc2:	11db      	asrs	r3, r3, #7
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f063 030f 	orn	r3, r3, #15
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	490e      	ldr	r1, [pc, #56]	; (8005018 <I2C_MasterRequestWrite+0xfc>)
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f943 	bl	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e010      	b.n	8005010 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fee:	897b      	ldrh	r3, [r7, #10]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4907      	ldr	r1, [pc, #28]	; (800501c <I2C_MasterRequestWrite+0x100>)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f933 	bl	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	00010008 	.word	0x00010008
 800501c:	00010002 	.word	0x00010002

08005020 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	460b      	mov	r3, r1
 800502e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005044:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d006      	beq.n	800505a <I2C_MasterRequestRead+0x3a>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d003      	beq.n	800505a <I2C_MasterRequestRead+0x3a>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005058:	d108      	bne.n	800506c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	e00b      	b.n	8005084 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	2b11      	cmp	r3, #17
 8005072:	d107      	bne.n	8005084 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005082:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f893 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050aa:	d103      	bne.n	80050b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e079      	b.n	80051ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c0:	d108      	bne.n	80050d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050c2:	897b      	ldrh	r3, [r7, #10]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	611a      	str	r2, [r3, #16]
 80050d2:	e05f      	b.n	8005194 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050d4:	897b      	ldrh	r3, [r7, #10]
 80050d6:	11db      	asrs	r3, r3, #7
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0306 	and.w	r3, r3, #6
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f063 030f 	orn	r3, r3, #15
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4930      	ldr	r1, [pc, #192]	; (80051b4 <I2C_MasterRequestRead+0x194>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f8b9 	bl	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e054      	b.n	80051ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4929      	ldr	r1, [pc, #164]	; (80051b8 <I2C_MasterRequestRead+0x198>)
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f8a9 	bl	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e044      	b.n	80051ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005146:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f831 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516e:	d103      	bne.n	8005178 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005176:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e017      	b.n	80051ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800517c:	897b      	ldrh	r3, [r7, #10]
 800517e:	11db      	asrs	r3, r3, #7
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0306 	and.w	r3, r3, #6
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f063 030e 	orn	r3, r3, #14
 800518c:	b2da      	uxtb	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4907      	ldr	r1, [pc, #28]	; (80051b8 <I2C_MasterRequestRead+0x198>)
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f865 	bl	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	00010008 	.word	0x00010008
 80051b8:	00010002 	.word	0x00010002

080051bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051cc:	e025      	b.n	800521a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d021      	beq.n	800521a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fd ffe9 	bl	80031ac <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d116      	bne.n	800521a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e023      	b.n	8005262 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10d      	bne.n	8005240 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	e00c      	b.n	800525a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	43da      	mvns	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	429a      	cmp	r2, r3
 800525e:	d0b6      	beq.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005278:	e051      	b.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005288:	d123      	bne.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005298:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e046      	b.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d021      	beq.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fd ff67 	bl	80031ac <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d116      	bne.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e020      	b.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	0c1b      	lsrs	r3, r3, #16
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d10c      	bne.n	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	43da      	mvns	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4013      	ands	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e00b      	b.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	43da      	mvns	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf14      	ite	ne
 8005354:	2301      	movne	r3, #1
 8005356:	2300      	moveq	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d18d      	bne.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005374:	e02d      	b.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f8ce 	bl	8005518 <I2C_IsAcknowledgeFailed>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e02d      	b.n	80053e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d021      	beq.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fd ff0d 	bl	80031ac <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d116      	bne.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e007      	b.n	80053e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d1ca      	bne.n	8005376 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053f6:	e02d      	b.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f88d 	bl	8005518 <I2C_IsAcknowledgeFailed>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e02d      	b.n	8005464 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d021      	beq.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005410:	f7fd fecc 	bl	80031ac <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d116      	bne.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e007      	b.n	8005464 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d1ca      	bne.n	80053f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005478:	e042      	b.n	8005500 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d119      	bne.n	80054bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0210 	mvn.w	r2, #16
 8005490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e029      	b.n	8005510 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054bc:	f7fd fe76 	bl	80031ac <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d302      	bcc.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d116      	bne.n	8005500 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e007      	b.n	8005510 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d1b5      	bne.n	800547a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552e:	d11b      	bne.n	8005568 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005538:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4b20      	ldr	r3, [pc, #128]	; (8005608 <HAL_PWREx_EnableOverDrive+0x90>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_PWREx_EnableOverDrive+0x90>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005590:	6413      	str	r3, [r2, #64]	; 0x40
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_PWREx_EnableOverDrive+0x90>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <HAL_PWREx_EnableOverDrive+0x94>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055a4:	f7fd fe02 	bl	80031ac <HAL_GetTick>
 80055a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055aa:	e009      	b.n	80055c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055ac:	f7fd fdfe 	bl	80031ac <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ba:	d901      	bls.n	80055c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e01f      	b.n	8005600 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055c0:	4b13      	ldr	r3, [pc, #76]	; (8005610 <HAL_PWREx_EnableOverDrive+0x98>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055cc:	d1ee      	bne.n	80055ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055ce:	4b11      	ldr	r3, [pc, #68]	; (8005614 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d4:	f7fd fdea 	bl	80031ac <HAL_GetTick>
 80055d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055da:	e009      	b.n	80055f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055dc:	f7fd fde6 	bl	80031ac <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ea:	d901      	bls.n	80055f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e007      	b.n	8005600 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <HAL_PWREx_EnableOverDrive+0x98>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fc:	d1ee      	bne.n	80055dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	420e0040 	.word	0x420e0040
 8005610:	40007000 	.word	0x40007000
 8005614:	420e0044 	.word	0x420e0044

08005618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e18c      	b.n	8005946 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_RCC_ClockConfig+0x24>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d904      	bls.n	8005646 <HAL_RCC_ClockConfig+0x2e>
 800563c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005640:	4887      	ldr	r0, [pc, #540]	; (8005860 <HAL_RCC_ClockConfig+0x248>)
 8005642:	f7fc fffa 	bl	800263a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d031      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d02e      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d02b      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b03      	cmp	r3, #3
 800565c:	d028      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d025      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b05      	cmp	r3, #5
 8005668:	d022      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b06      	cmp	r3, #6
 800566e:	d01f      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b07      	cmp	r3, #7
 8005674:	d01c      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d019      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b09      	cmp	r3, #9
 8005680:	d016      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b0a      	cmp	r3, #10
 8005686:	d013      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b0b      	cmp	r3, #11
 800568c:	d010      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b0c      	cmp	r3, #12
 8005692:	d00d      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b0d      	cmp	r3, #13
 8005698:	d00a      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b0e      	cmp	r3, #14
 800569e:	d007      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b0f      	cmp	r3, #15
 80056a4:	d004      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x98>
 80056a6:	f240 215d 	movw	r1, #605	; 0x25d
 80056aa:	486d      	ldr	r0, [pc, #436]	; (8005860 <HAL_RCC_ClockConfig+0x248>)
 80056ac:	f7fc ffc5 	bl	800263a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b0:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <HAL_RCC_ClockConfig+0x24c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d90c      	bls.n	80056d8 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056be:	4b69      	ldr	r3, [pc, #420]	; (8005864 <HAL_RCC_ClockConfig+0x24c>)
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c6:	4b67      	ldr	r3, [pc, #412]	; (8005864 <HAL_RCC_ClockConfig+0x24c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e136      	b.n	8005946 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d049      	beq.n	8005778 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f0:	4b5d      	ldr	r3, [pc, #372]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	4a5c      	ldr	r2, [pc, #368]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 80056f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005708:	4b57      	ldr	r3, [pc, #348]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a56      	ldr	r2, [pc, #344]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 800570e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d024      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d020      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b90      	cmp	r3, #144	; 0x90
 800572a:	d01c      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2ba0      	cmp	r3, #160	; 0xa0
 8005732:	d018      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2bb0      	cmp	r3, #176	; 0xb0
 800573a:	d014      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2bc0      	cmp	r3, #192	; 0xc0
 8005742:	d010      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2bd0      	cmp	r3, #208	; 0xd0
 800574a:	d00c      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2be0      	cmp	r3, #224	; 0xe0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2bf0      	cmp	r3, #240	; 0xf0
 800575a:	d004      	beq.n	8005766 <HAL_RCC_ClockConfig+0x14e>
 800575c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005760:	483f      	ldr	r0, [pc, #252]	; (8005860 <HAL_RCC_ClockConfig+0x248>)
 8005762:	f7fc ff6a 	bl	800263a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005766:	4b40      	ldr	r3, [pc, #256]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	493d      	ldr	r1, [pc, #244]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 8005774:	4313      	orrs	r3, r2
 8005776:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d059      	beq.n	8005838 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d010      	beq.n	80057ae <HAL_RCC_ClockConfig+0x196>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d00c      	beq.n	80057ae <HAL_RCC_ClockConfig+0x196>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d008      	beq.n	80057ae <HAL_RCC_ClockConfig+0x196>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d004      	beq.n	80057ae <HAL_RCC_ClockConfig+0x196>
 80057a4:	f240 2187 	movw	r1, #647	; 0x287
 80057a8:	482d      	ldr	r0, [pc, #180]	; (8005860 <HAL_RCC_ClockConfig+0x248>)
 80057aa:	f7fc ff46 	bl	800263a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d107      	bne.n	80057c6 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b6:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d119      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e0bf      	b.n	8005946 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d003      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d107      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e0af      	b.n	8005946 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e0a7      	b.n	8005946 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f023 0203 	bic.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4919      	ldr	r1, [pc, #100]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 8005804:	4313      	orrs	r3, r2
 8005806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005808:	f7fd fcd0 	bl	80031ac <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	e00a      	b.n	8005826 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fd fccc 	bl	80031ac <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e08f      	b.n	8005946 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_RCC_ClockConfig+0x250>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 020c 	and.w	r2, r3, #12
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	429a      	cmp	r2, r3
 8005836:	d1eb      	bne.n	8005810 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x24c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d212      	bcs.n	800586c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	4b07      	ldr	r3, [pc, #28]	; (8005864 <HAL_RCC_ClockConfig+0x24c>)
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <HAL_RCC_ClockConfig+0x24c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d007      	beq.n	800586c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e072      	b.n	8005946 <HAL_RCC_ClockConfig+0x32e>
 8005860:	080100a8 	.word	0x080100a8
 8005864:	40023c00 	.word	0x40023c00
 8005868:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d025      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d018      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x29a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d013      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x29a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005892:	d00e      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x29a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800589c:	d009      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x29a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80058a6:	d004      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x29a>
 80058a8:	f240 21c5 	movw	r1, #709	; 0x2c5
 80058ac:	4828      	ldr	r0, [pc, #160]	; (8005950 <HAL_RCC_ClockConfig+0x338>)
 80058ae:	f7fc fec4 	bl	800263a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b2:	4b28      	ldr	r3, [pc, #160]	; (8005954 <HAL_RCC_ClockConfig+0x33c>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4925      	ldr	r1, [pc, #148]	; (8005954 <HAL_RCC_ClockConfig+0x33c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d026      	beq.n	800591e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d018      	beq.n	800590a <HAL_RCC_ClockConfig+0x2f2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e0:	d013      	beq.n	800590a <HAL_RCC_ClockConfig+0x2f2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058ea:	d00e      	beq.n	800590a <HAL_RCC_ClockConfig+0x2f2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80058f4:	d009      	beq.n	800590a <HAL_RCC_ClockConfig+0x2f2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80058fe:	d004      	beq.n	800590a <HAL_RCC_ClockConfig+0x2f2>
 8005900:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005904:	4812      	ldr	r0, [pc, #72]	; (8005950 <HAL_RCC_ClockConfig+0x338>)
 8005906:	f7fc fe98 	bl	800263a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800590a:	4b12      	ldr	r3, [pc, #72]	; (8005954 <HAL_RCC_ClockConfig+0x33c>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	490e      	ldr	r1, [pc, #56]	; (8005954 <HAL_RCC_ClockConfig+0x33c>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800591e:	f000 f855 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 8005922:	4602      	mov	r2, r0
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_RCC_ClockConfig+0x33c>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	490a      	ldr	r1, [pc, #40]	; (8005958 <HAL_RCC_ClockConfig+0x340>)
 8005930:	5ccb      	ldrb	r3, [r1, r3]
 8005932:	fa22 f303 	lsr.w	r3, r2, r3
 8005936:	4a09      	ldr	r2, [pc, #36]	; (800595c <HAL_RCC_ClockConfig+0x344>)
 8005938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <HAL_RCC_ClockConfig+0x348>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fd fbf0 	bl	8003124 <HAL_InitTick>

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	080100a8 	.word	0x080100a8
 8005954:	40023800 	.word	0x40023800
 8005958:	08010260 	.word	0x08010260
 800595c:	200000a4 	.word	0x200000a4
 8005960:	200000a8 	.word	0x200000a8

08005964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005968:	4b03      	ldr	r3, [pc, #12]	; (8005978 <HAL_RCC_GetHCLKFreq+0x14>)
 800596a:	681b      	ldr	r3, [r3, #0]
}
 800596c:	4618      	mov	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	200000a4 	.word	0x200000a4

0800597c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005980:	f7ff fff0 	bl	8005964 <HAL_RCC_GetHCLKFreq>
 8005984:	4602      	mov	r2, r0
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	0a9b      	lsrs	r3, r3, #10
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	4903      	ldr	r1, [pc, #12]	; (80059a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005992:	5ccb      	ldrb	r3, [r1, r3]
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40023800 	.word	0x40023800
 80059a0:	08010270 	.word	0x08010270

080059a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059a8:	f7ff ffdc 	bl	8005964 <HAL_RCC_GetHCLKFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	0b5b      	lsrs	r3, r3, #13
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	4903      	ldr	r1, [pc, #12]	; (80059c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ba:	5ccb      	ldrb	r3, [r1, r3]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40023800 	.word	0x40023800
 80059c8:	08010270 	.word	0x08010270

080059cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d0:	b088      	sub	sp, #32
 80059d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059e8:	4bce      	ldr	r3, [pc, #824]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 030c 	and.w	r3, r3, #12
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	f200 818d 	bhi.w	8005d10 <HAL_RCC_GetSysClockFreq+0x344>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <HAL_RCC_GetSysClockFreq+0x30>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a31 	.word	0x08005a31
 8005a00:	08005d11 	.word	0x08005d11
 8005a04:	08005d11 	.word	0x08005d11
 8005a08:	08005d11 	.word	0x08005d11
 8005a0c:	08005a37 	.word	0x08005a37
 8005a10:	08005d11 	.word	0x08005d11
 8005a14:	08005d11 	.word	0x08005d11
 8005a18:	08005d11 	.word	0x08005d11
 8005a1c:	08005a3d 	.word	0x08005a3d
 8005a20:	08005d11 	.word	0x08005d11
 8005a24:	08005d11 	.word	0x08005d11
 8005a28:	08005d11 	.word	0x08005d11
 8005a2c:	08005bb1 	.word	0x08005bb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a30:	4bbd      	ldr	r3, [pc, #756]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005a32:	61bb      	str	r3, [r7, #24]
       break;
 8005a34:	e16f      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a36:	4bbd      	ldr	r3, [pc, #756]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x360>)
 8005a38:	61bb      	str	r3, [r7, #24]
      break;
 8005a3a:	e16c      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a3c:	4bb9      	ldr	r3, [pc, #740]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a46:	4bb7      	ldr	r3, [pc, #732]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d053      	beq.n	8005afa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a52:	4bb4      	ldr	r3, [pc, #720]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	ea02 0400 	and.w	r4, r2, r0
 8005a6a:	603c      	str	r4, [r7, #0]
 8005a6c:	400b      	ands	r3, r1
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a74:	4620      	mov	r0, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	014b      	lsls	r3, r1, #5
 8005a82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a86:	0142      	lsls	r2, r0, #5
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	1ac0      	subs	r0, r0, r3
 8005a90:	462b      	mov	r3, r5
 8005a92:	eb61 0103 	sbc.w	r1, r1, r3
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	018b      	lsls	r3, r1, #6
 8005aa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005aa4:	0182      	lsls	r2, r0, #6
 8005aa6:	1a12      	subs	r2, r2, r0
 8005aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8005aac:	f04f 0000 	mov.w	r0, #0
 8005ab0:	f04f 0100 	mov.w	r1, #0
 8005ab4:	00d9      	lsls	r1, r3, #3
 8005ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aba:	00d0      	lsls	r0, r2, #3
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	1852      	adds	r2, r2, r1
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	eb43 0101 	adc.w	r1, r3, r1
 8005aca:	460b      	mov	r3, r1
 8005acc:	f04f 0000 	mov.w	r0, #0
 8005ad0:	f04f 0100 	mov.w	r1, #0
 8005ad4:	0259      	lsls	r1, r3, #9
 8005ad6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ada:	0250      	lsls	r0, r2, #9
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	f7fa ff78 	bl	80009e0 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4613      	mov	r3, r2
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	e04c      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	4b8a      	ldr	r3, [pc, #552]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	461a      	mov	r2, r3
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	ea02 0a00 	and.w	sl, r2, r0
 8005b12:	ea03 0b01 	and.w	fp, r3, r1
 8005b16:	4650      	mov	r0, sl
 8005b18:	4659      	mov	r1, fp
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	014b      	lsls	r3, r1, #5
 8005b24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b28:	0142      	lsls	r2, r0, #5
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	ebb0 000a 	subs.w	r0, r0, sl
 8005b32:	eb61 010b 	sbc.w	r1, r1, fp
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	018b      	lsls	r3, r1, #6
 8005b40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b44:	0182      	lsls	r2, r0, #6
 8005b46:	1a12      	subs	r2, r2, r0
 8005b48:	eb63 0301 	sbc.w	r3, r3, r1
 8005b4c:	f04f 0000 	mov.w	r0, #0
 8005b50:	f04f 0100 	mov.w	r1, #0
 8005b54:	00d9      	lsls	r1, r3, #3
 8005b56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b5a:	00d0      	lsls	r0, r2, #3
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	eb12 020a 	adds.w	r2, r2, sl
 8005b64:	eb43 030b 	adc.w	r3, r3, fp
 8005b68:	f04f 0000 	mov.w	r0, #0
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	0299      	lsls	r1, r3, #10
 8005b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b76:	0290      	lsls	r0, r2, #10
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	f7fa ff2a 	bl	80009e0 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b94:	4b63      	ldr	r3, [pc, #396]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	61bb      	str	r3, [r7, #24]
      break;
 8005bae:	e0b2      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bb0:	4b5c      	ldr	r3, [pc, #368]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bba:	4b5a      	ldr	r3, [pc, #360]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d04d      	beq.n	8005c62 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc6:	4b57      	ldr	r3, [pc, #348]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	099b      	lsrs	r3, r3, #6
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bd6:	f04f 0100 	mov.w	r1, #0
 8005bda:	ea02 0800 	and.w	r8, r2, r0
 8005bde:	ea03 0901 	and.w	r9, r3, r1
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	014b      	lsls	r3, r1, #5
 8005bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bf4:	0142      	lsls	r2, r0, #5
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	ebb0 0008 	subs.w	r0, r0, r8
 8005bfe:	eb61 0109 	sbc.w	r1, r1, r9
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	018b      	lsls	r3, r1, #6
 8005c0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c10:	0182      	lsls	r2, r0, #6
 8005c12:	1a12      	subs	r2, r2, r0
 8005c14:	eb63 0301 	sbc.w	r3, r3, r1
 8005c18:	f04f 0000 	mov.w	r0, #0
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	00d9      	lsls	r1, r3, #3
 8005c22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c26:	00d0      	lsls	r0, r2, #3
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	eb12 0208 	adds.w	r2, r2, r8
 8005c30:	eb43 0309 	adc.w	r3, r3, r9
 8005c34:	f04f 0000 	mov.w	r0, #0
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	0259      	lsls	r1, r3, #9
 8005c3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c42:	0250      	lsls	r0, r2, #9
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f7fa fec4 	bl	80009e0 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e04a      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c62:	4b30      	ldr	r3, [pc, #192]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	099b      	lsrs	r3, r3, #6
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c72:	f04f 0100 	mov.w	r1, #0
 8005c76:	ea02 0400 	and.w	r4, r2, r0
 8005c7a:	ea03 0501 	and.w	r5, r3, r1
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	014b      	lsls	r3, r1, #5
 8005c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c90:	0142      	lsls	r2, r0, #5
 8005c92:	4610      	mov	r0, r2
 8005c94:	4619      	mov	r1, r3
 8005c96:	1b00      	subs	r0, r0, r4
 8005c98:	eb61 0105 	sbc.w	r1, r1, r5
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	018b      	lsls	r3, r1, #6
 8005ca6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005caa:	0182      	lsls	r2, r0, #6
 8005cac:	1a12      	subs	r2, r2, r0
 8005cae:	eb63 0301 	sbc.w	r3, r3, r1
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f04f 0100 	mov.w	r1, #0
 8005cba:	00d9      	lsls	r1, r3, #3
 8005cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cc0:	00d0      	lsls	r0, r2, #3
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	1912      	adds	r2, r2, r4
 8005cc8:	eb45 0303 	adc.w	r3, r5, r3
 8005ccc:	f04f 0000 	mov.w	r0, #0
 8005cd0:	f04f 0100 	mov.w	r1, #0
 8005cd4:	0299      	lsls	r1, r3, #10
 8005cd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cda:	0290      	lsls	r0, r2, #10
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	f7fa fe78 	bl	80009e0 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	0f1b      	lsrs	r3, r3, #28
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	61bb      	str	r3, [r7, #24]
      break;
 8005d0e:	e002      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005d12:	61bb      	str	r3, [r7, #24]
      break;
 8005d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d16:	69bb      	ldr	r3, [r7, #24]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00f42400 	.word	0x00f42400
 8005d2c:	007a1200 	.word	0x007a1200

08005d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e34b      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	d904      	bls.n	8005d54 <HAL_RCC_OscConfig+0x24>
 8005d4a:	f640 5112 	movw	r1, #3346	; 0xd12
 8005d4e:	48a5      	ldr	r0, [pc, #660]	; (8005fe4 <HAL_RCC_OscConfig+0x2b4>)
 8005d50:	f7fc fc73 	bl	800263a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8096 	beq.w	8005e8e <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00e      	beq.n	8005d88 <HAL_RCC_OscConfig+0x58>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d72:	d009      	beq.n	8005d88 <HAL_RCC_OscConfig+0x58>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d7c:	d004      	beq.n	8005d88 <HAL_RCC_OscConfig+0x58>
 8005d7e:	f640 5117 	movw	r1, #3351	; 0xd17
 8005d82:	4898      	ldr	r0, [pc, #608]	; (8005fe4 <HAL_RCC_OscConfig+0x2b4>)
 8005d84:	f7fc fc59 	bl	800263a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d88:	4b97      	ldr	r3, [pc, #604]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d019      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d94:	4b94      	ldr	r3, [pc, #592]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d106      	bne.n	8005dae <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005da0:	4b91      	ldr	r3, [pc, #580]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dac:	d00c      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dae:	4b8e      	ldr	r3, [pc, #568]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d112      	bne.n	8005de0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dba:	4b8b      	ldr	r3, [pc, #556]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dc6:	d10b      	bne.n	8005de0 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc8:	4b87      	ldr	r3, [pc, #540]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05b      	beq.n	8005e8c <HAL_RCC_OscConfig+0x15c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d157      	bne.n	8005e8c <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e2fc      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de8:	d106      	bne.n	8005df8 <HAL_RCC_OscConfig+0xc8>
 8005dea:	4b7f      	ldr	r3, [pc, #508]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a7e      	ldr	r2, [pc, #504]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e01d      	b.n	8005e34 <HAL_RCC_OscConfig+0x104>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0xec>
 8005e02:	4b79      	ldr	r3, [pc, #484]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a78      	ldr	r2, [pc, #480]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	4b76      	ldr	r3, [pc, #472]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a75      	ldr	r2, [pc, #468]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCC_OscConfig+0x104>
 8005e1c:	4b72      	ldr	r3, [pc, #456]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a71      	ldr	r2, [pc, #452]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	4b6f      	ldr	r3, [pc, #444]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a6e      	ldr	r2, [pc, #440]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fd f9b6 	bl	80031ac <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e44:	f7fd f9b2 	bl	80031ac <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b64      	cmp	r3, #100	; 0x64
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e2c1      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e56:	4b64      	ldr	r3, [pc, #400]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0f0      	beq.n	8005e44 <HAL_RCC_OscConfig+0x114>
 8005e62:	e014      	b.n	8005e8e <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e64:	f7fd f9a2 	bl	80031ac <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e6c:	f7fd f99e 	bl	80031ac <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b64      	cmp	r3, #100	; 0x64
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e2ad      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7e:	4b5a      	ldr	r3, [pc, #360]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x13c>
 8005e8a:	e000      	b.n	8005e8e <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 8086 	beq.w	8005fa8 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x186>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d004      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x186>
 8005eac:	f640 514f 	movw	r1, #3407	; 0xd4f
 8005eb0:	484c      	ldr	r0, [pc, #304]	; (8005fe4 <HAL_RCC_OscConfig+0x2b4>)
 8005eb2:	f7fc fbc2 	bl	800263a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b1f      	cmp	r3, #31
 8005ebc:	d904      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x198>
 8005ebe:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 8005ec2:	4848      	ldr	r0, [pc, #288]	; (8005fe4 <HAL_RCC_OscConfig+0x2b4>)
 8005ec4:	f7fc fbb9 	bl	800263a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ec8:	4b47      	ldr	r3, [pc, #284]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 030c 	and.w	r3, r3, #12
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ed4:	4b44      	ldr	r3, [pc, #272]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d105      	bne.n	8005eec <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ee0:	4b41      	ldr	r3, [pc, #260]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eec:	4b3e      	ldr	r3, [pc, #248]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ef4:	2b0c      	cmp	r3, #12
 8005ef6:	d11c      	bne.n	8005f32 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef8:	4b3b      	ldr	r3, [pc, #236]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d116      	bne.n	8005f32 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f04:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_OscConfig+0x1ec>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e25e      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1c:	4b32      	ldr	r3, [pc, #200]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	492f      	ldr	r1, [pc, #188]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f30:	e03a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d020      	beq.n	8005f7c <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_RCC_OscConfig+0x2bc>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f40:	f7fd f934 	bl	80031ac <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f48:	f7fd f930 	bl	80031ac <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e23f      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f0      	beq.n	8005f48 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	491c      	ldr	r1, [pc, #112]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]
 8005f7a:	e015      	b.n	8005fa8 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCC_OscConfig+0x2bc>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fd f913 	bl	80031ac <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8a:	f7fd f90f 	bl	80031ac <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e21e      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9c:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <HAL_RCC_OscConfig+0x2b8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f0      	bne.n	8005f8a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d045      	beq.n	8006040 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_RCC_OscConfig+0x29e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d004      	beq.n	8005fce <HAL_RCC_OscConfig+0x29e>
 8005fc4:	f640 5196 	movw	r1, #3478	; 0xd96
 8005fc8:	4806      	ldr	r0, [pc, #24]	; (8005fe4 <HAL_RCC_OscConfig+0x2b4>)
 8005fca:	f7fc fb36 	bl	800263a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01e      	beq.n	8006014 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_RCC_OscConfig+0x2c0>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fd f8e6 	bl	80031ac <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe2:	e010      	b.n	8006006 <HAL_RCC_OscConfig+0x2d6>
 8005fe4:	080100e0 	.word	0x080100e0
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	42470000 	.word	0x42470000
 8005ff0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff4:	f7fd f8da 	bl	80031ac <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e1e9      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006006:	4ba4      	ldr	r3, [pc, #656]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x2c4>
 8006012:	e015      	b.n	8006040 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006014:	4ba1      	ldr	r3, [pc, #644]	; (800629c <HAL_RCC_OscConfig+0x56c>)
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601a:	f7fd f8c7 	bl	80031ac <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006022:	f7fd f8c3 	bl	80031ac <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e1d2      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006034:	4b98      	ldr	r3, [pc, #608]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f0      	bne.n	8006022 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80a8 	beq.w	800619e <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00c      	beq.n	8006074 <HAL_RCC_OscConfig+0x344>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d008      	beq.n	8006074 <HAL_RCC_OscConfig+0x344>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b05      	cmp	r3, #5
 8006068:	d004      	beq.n	8006074 <HAL_RCC_OscConfig+0x344>
 800606a:	f640 51c2 	movw	r1, #3522	; 0xdc2
 800606e:	488c      	ldr	r0, [pc, #560]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 8006070:	f7fc fae3 	bl	800263a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006074:	4b88      	ldr	r3, [pc, #544]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10f      	bne.n	80060a0 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006080:	2300      	movs	r3, #0
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	4b84      	ldr	r3, [pc, #528]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	4a83      	ldr	r2, [pc, #524]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 800608a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608e:	6413      	str	r3, [r2, #64]	; 0x40
 8006090:	4b81      	ldr	r3, [pc, #516]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a0:	4b80      	ldr	r3, [pc, #512]	; (80062a4 <HAL_RCC_OscConfig+0x574>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d118      	bne.n	80060de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ac:	4b7d      	ldr	r3, [pc, #500]	; (80062a4 <HAL_RCC_OscConfig+0x574>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a7c      	ldr	r2, [pc, #496]	; (80062a4 <HAL_RCC_OscConfig+0x574>)
 80060b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b8:	f7fd f878 	bl	80031ac <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c0:	f7fd f874 	bl	80031ac <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e183      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d2:	4b74      	ldr	r3, [pc, #464]	; (80062a4 <HAL_RCC_OscConfig+0x574>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f0      	beq.n	80060c0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d106      	bne.n	80060f4 <HAL_RCC_OscConfig+0x3c4>
 80060e6:	4b6c      	ldr	r3, [pc, #432]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	4a6b      	ldr	r2, [pc, #428]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
 80060f2:	e01c      	b.n	800612e <HAL_RCC_OscConfig+0x3fe>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	d10c      	bne.n	8006116 <HAL_RCC_OscConfig+0x3e6>
 80060fc:	4b66      	ldr	r3, [pc, #408]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 80060fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006100:	4a65      	ldr	r2, [pc, #404]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006102:	f043 0304 	orr.w	r3, r3, #4
 8006106:	6713      	str	r3, [r2, #112]	; 0x70
 8006108:	4b63      	ldr	r3, [pc, #396]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4a62      	ldr	r2, [pc, #392]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	6713      	str	r3, [r2, #112]	; 0x70
 8006114:	e00b      	b.n	800612e <HAL_RCC_OscConfig+0x3fe>
 8006116:	4b60      	ldr	r3, [pc, #384]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	4a5f      	ldr	r2, [pc, #380]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	6713      	str	r3, [r2, #112]	; 0x70
 8006122:	4b5d      	ldr	r3, [pc, #372]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	4a5c      	ldr	r2, [pc, #368]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006128:	f023 0304 	bic.w	r3, r3, #4
 800612c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d015      	beq.n	8006162 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006136:	f7fd f839 	bl	80031ac <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613c:	e00a      	b.n	8006154 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800613e:	f7fd f835 	bl	80031ac <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f241 3288 	movw	r2, #5000	; 0x1388
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e142      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006154:	4b50      	ldr	r3, [pc, #320]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ee      	beq.n	800613e <HAL_RCC_OscConfig+0x40e>
 8006160:	e014      	b.n	800618c <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006162:	f7fd f823 	bl	80031ac <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006168:	e00a      	b.n	8006180 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616a:	f7fd f81f 	bl	80031ac <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	f241 3288 	movw	r2, #5000	; 0x1388
 8006178:	4293      	cmp	r3, r2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e12c      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006180:	4b45      	ldr	r3, [pc, #276]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1ee      	bne.n	800616a <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d105      	bne.n	800619e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006192:	4b41      	ldr	r3, [pc, #260]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	4a40      	ldr	r2, [pc, #256]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 8006198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00c      	beq.n	80061c0 <HAL_RCC_OscConfig+0x490>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d008      	beq.n	80061c0 <HAL_RCC_OscConfig+0x490>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d004      	beq.n	80061c0 <HAL_RCC_OscConfig+0x490>
 80061b6:	f640 6105 	movw	r1, #3589	; 0xe05
 80061ba:	4839      	ldr	r0, [pc, #228]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 80061bc:	f7fc fa3d 	bl	800263a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8107 	beq.w	80063d8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ca:	4b33      	ldr	r3, [pc, #204]	; (8006298 <HAL_RCC_OscConfig+0x568>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	f000 80c0 	beq.w	8006358 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	f040 80a4 	bne.w	800632a <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <HAL_RCC_OscConfig+0x4ce>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f2:	d004      	beq.n	80061fe <HAL_RCC_OscConfig+0x4ce>
 80061f4:	f640 610e 	movw	r1, #3598	; 0xe0e
 80061f8:	4829      	ldr	r0, [pc, #164]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 80061fa:	f7fc fa1e 	bl	800263a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	2b3f      	cmp	r3, #63	; 0x3f
 8006204:	d904      	bls.n	8006210 <HAL_RCC_OscConfig+0x4e0>
 8006206:	f640 610f 	movw	r1, #3599	; 0xe0f
 800620a:	4825      	ldr	r0, [pc, #148]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 800620c:	f7fc fa15 	bl	800263a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	2b31      	cmp	r3, #49	; 0x31
 8006216:	d904      	bls.n	8006222 <HAL_RCC_OscConfig+0x4f2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006220:	d904      	bls.n	800622c <HAL_RCC_OscConfig+0x4fc>
 8006222:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006226:	481e      	ldr	r0, [pc, #120]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 8006228:	f7fc fa07 	bl	800263a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	2b02      	cmp	r3, #2
 8006232:	d010      	beq.n	8006256 <HAL_RCC_OscConfig+0x526>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	2b04      	cmp	r3, #4
 800623a:	d00c      	beq.n	8006256 <HAL_RCC_OscConfig+0x526>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	2b06      	cmp	r3, #6
 8006242:	d008      	beq.n	8006256 <HAL_RCC_OscConfig+0x526>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	2b08      	cmp	r3, #8
 800624a:	d004      	beq.n	8006256 <HAL_RCC_OscConfig+0x526>
 800624c:	f640 6111 	movw	r1, #3601	; 0xe11
 8006250:	4813      	ldr	r0, [pc, #76]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 8006252:	f7fc f9f2 	bl	800263a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d903      	bls.n	8006266 <HAL_RCC_OscConfig+0x536>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d904      	bls.n	8006270 <HAL_RCC_OscConfig+0x540>
 8006266:	f640 6112 	movw	r1, #3602	; 0xe12
 800626a:	480d      	ldr	r0, [pc, #52]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 800626c:	f7fc f9e5 	bl	800263a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	2b01      	cmp	r3, #1
 8006276:	d903      	bls.n	8006280 <HAL_RCC_OscConfig+0x550>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	2b07      	cmp	r3, #7
 800627e:	d904      	bls.n	800628a <HAL_RCC_OscConfig+0x55a>
 8006280:	f640 6113 	movw	r1, #3603	; 0xe13
 8006284:	4806      	ldr	r0, [pc, #24]	; (80062a0 <HAL_RCC_OscConfig+0x570>)
 8006286:	f7fc f9d8 	bl	800263a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <HAL_RCC_OscConfig+0x578>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc ff8c 	bl	80031ac <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006296:	e012      	b.n	80062be <HAL_RCC_OscConfig+0x58e>
 8006298:	40023800 	.word	0x40023800
 800629c:	42470e80 	.word	0x42470e80
 80062a0:	080100e0 	.word	0x080100e0
 80062a4:	40007000 	.word	0x40007000
 80062a8:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fc ff7e 	bl	80031ac <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e08d      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062be:	4b49      	ldr	r3, [pc, #292]	; (80063e4 <HAL_RCC_OscConfig+0x6b4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	019b      	lsls	r3, r3, #6
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	3b01      	subs	r3, #1
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	061b      	lsls	r3, r3, #24
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	071b      	lsls	r3, r3, #28
 80062f6:	493b      	ldr	r1, [pc, #236]	; (80063e4 <HAL_RCC_OscConfig+0x6b4>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062fc:	4b3a      	ldr	r3, [pc, #232]	; (80063e8 <HAL_RCC_OscConfig+0x6b8>)
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006302:	f7fc ff53 	bl	80031ac <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800630a:	f7fc ff4f 	bl	80031ac <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e05e      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631c:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <HAL_RCC_OscConfig+0x6b4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0f0      	beq.n	800630a <HAL_RCC_OscConfig+0x5da>
 8006328:	e056      	b.n	80063d8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632a:	4b2f      	ldr	r3, [pc, #188]	; (80063e8 <HAL_RCC_OscConfig+0x6b8>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006330:	f7fc ff3c 	bl	80031ac <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006338:	f7fc ff38 	bl	80031ac <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e047      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634a:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <HAL_RCC_OscConfig+0x6b4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0x608>
 8006356:	e03f      	b.n	80063d8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e03a      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006364:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <HAL_RCC_OscConfig+0x6b4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d030      	beq.n	80063d4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800637c:	429a      	cmp	r2, r3
 800637e:	d129      	bne.n	80063d4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638a:	429a      	cmp	r2, r3
 800638c:	d122      	bne.n	80063d4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800639a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800639c:	4293      	cmp	r3, r2
 800639e:	d119      	bne.n	80063d4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	3b01      	subs	r3, #1
 80063ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d10f      	bne.n	80063d4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d107      	bne.n	80063d4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800
 80063e8:	42470060 	.word	0x42470060

080063ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e184      	b.n	8006708 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a72      	ldr	r2, [pc, #456]	; (80065cc <HAL_SPI_Init+0x1e0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d013      	beq.n	8006430 <HAL_SPI_Init+0x44>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a70      	ldr	r2, [pc, #448]	; (80065d0 <HAL_SPI_Init+0x1e4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00e      	beq.n	8006430 <HAL_SPI_Init+0x44>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a6f      	ldr	r2, [pc, #444]	; (80065d4 <HAL_SPI_Init+0x1e8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d009      	beq.n	8006430 <HAL_SPI_Init+0x44>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a6d      	ldr	r2, [pc, #436]	; (80065d8 <HAL_SPI_Init+0x1ec>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_SPI_Init+0x44>
 8006426:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800642a:	486c      	ldr	r0, [pc, #432]	; (80065dc <HAL_SPI_Init+0x1f0>)
 800642c:	f7fc f905 	bl	800263a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <HAL_SPI_Init+0x60>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006440:	d004      	beq.n	800644c <HAL_SPI_Init+0x60>
 8006442:	f240 1143 	movw	r1, #323	; 0x143
 8006446:	4865      	ldr	r0, [pc, #404]	; (80065dc <HAL_SPI_Init+0x1f0>)
 8006448:	f7fc f8f7 	bl	800263a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00e      	beq.n	8006472 <HAL_SPI_Init+0x86>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645c:	d009      	beq.n	8006472 <HAL_SPI_Init+0x86>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006466:	d004      	beq.n	8006472 <HAL_SPI_Init+0x86>
 8006468:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800646c:	485b      	ldr	r0, [pc, #364]	; (80065dc <HAL_SPI_Init+0x1f0>)
 800646e:	f7fc f8e4 	bl	800263a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647a:	d008      	beq.n	800648e <HAL_SPI_Init+0xa2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <HAL_SPI_Init+0xa2>
 8006484:	f240 1145 	movw	r1, #325	; 0x145
 8006488:	4854      	ldr	r0, [pc, #336]	; (80065dc <HAL_SPI_Init+0x1f0>)
 800648a:	f7fc f8d6 	bl	800263a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006496:	d00d      	beq.n	80064b4 <HAL_SPI_Init+0xc8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <HAL_SPI_Init+0xc8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064a8:	d004      	beq.n	80064b4 <HAL_SPI_Init+0xc8>
 80064aa:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80064ae:	484b      	ldr	r0, [pc, #300]	; (80065dc <HAL_SPI_Init+0x1f0>)
 80064b0:	f7fc f8c3 	bl	800263a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d020      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d01c      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d018      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	2b18      	cmp	r3, #24
 80064d2:	d014      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d010      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	2b28      	cmp	r3, #40	; 0x28
 80064e2:	d00c      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	2b30      	cmp	r3, #48	; 0x30
 80064ea:	d008      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	2b38      	cmp	r3, #56	; 0x38
 80064f2:	d004      	beq.n	80064fe <HAL_SPI_Init+0x112>
 80064f4:	f240 1147 	movw	r1, #327	; 0x147
 80064f8:	4838      	ldr	r0, [pc, #224]	; (80065dc <HAL_SPI_Init+0x1f0>)
 80064fa:	f7fc f89e 	bl	800263a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_SPI_Init+0x12c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	2b80      	cmp	r3, #128	; 0x80
 800650c:	d004      	beq.n	8006518 <HAL_SPI_Init+0x12c>
 800650e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006512:	4832      	ldr	r0, [pc, #200]	; (80065dc <HAL_SPI_Init+0x1f0>)
 8006514:	f7fc f891 	bl	800263a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_SPI_Init+0x146>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2b10      	cmp	r3, #16
 8006526:	d004      	beq.n	8006532 <HAL_SPI_Init+0x146>
 8006528:	f240 1149 	movw	r1, #329	; 0x149
 800652c:	482b      	ldr	r0, [pc, #172]	; (80065dc <HAL_SPI_Init+0x1f0>)
 800652e:	f7fc f884 	bl	800263a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d152      	bne.n	80065e0 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d008      	beq.n	8006554 <HAL_SPI_Init+0x168>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d004      	beq.n	8006554 <HAL_SPI_Init+0x168>
 800654a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800654e:	4823      	ldr	r0, [pc, #140]	; (80065dc <HAL_SPI_Init+0x1f0>)
 8006550:	f7fc f873 	bl	800263a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <HAL_SPI_Init+0x182>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d004      	beq.n	800656e <HAL_SPI_Init+0x182>
 8006564:	f240 114d 	movw	r1, #333	; 0x14d
 8006568:	481c      	ldr	r0, [pc, #112]	; (80065dc <HAL_SPI_Init+0x1f0>)
 800656a:	f7fc f866 	bl	800263a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006576:	d125      	bne.n	80065c4 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d05a      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d056      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	2b10      	cmp	r3, #16
 800658e:	d052      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	2b18      	cmp	r3, #24
 8006596:	d04e      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	2b20      	cmp	r3, #32
 800659e:	d04a      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	2b28      	cmp	r3, #40	; 0x28
 80065a6:	d046      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d042      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	2b38      	cmp	r3, #56	; 0x38
 80065b6:	d03e      	beq.n	8006636 <HAL_SPI_Init+0x24a>
 80065b8:	f240 1151 	movw	r1, #337	; 0x151
 80065bc:	4807      	ldr	r0, [pc, #28]	; (80065dc <HAL_SPI_Init+0x1f0>)
 80065be:	f7fc f83c 	bl	800263a <assert_failed>
 80065c2:	e038      	b.n	8006636 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	61da      	str	r2, [r3, #28]
 80065ca:	e034      	b.n	8006636 <HAL_SPI_Init+0x24a>
 80065cc:	40013000 	.word	0x40013000
 80065d0:	40003800 	.word	0x40003800
 80065d4:	40003c00 	.word	0x40003c00
 80065d8:	40013400 	.word	0x40013400
 80065dc:	0801011c 	.word	0x0801011c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d020      	beq.n	800662a <HAL_SPI_Init+0x23e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d01c      	beq.n	800662a <HAL_SPI_Init+0x23e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d018      	beq.n	800662a <HAL_SPI_Init+0x23e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	2b18      	cmp	r3, #24
 80065fe:	d014      	beq.n	800662a <HAL_SPI_Init+0x23e>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	2b20      	cmp	r3, #32
 8006606:	d010      	beq.n	800662a <HAL_SPI_Init+0x23e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2b28      	cmp	r3, #40	; 0x28
 800660e:	d00c      	beq.n	800662a <HAL_SPI_Init+0x23e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d008      	beq.n	800662a <HAL_SPI_Init+0x23e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	2b38      	cmp	r3, #56	; 0x38
 800661e:	d004      	beq.n	800662a <HAL_SPI_Init+0x23e>
 8006620:	f240 115b 	movw	r1, #347	; 0x15b
 8006624:	483a      	ldr	r0, [pc, #232]	; (8006710 <HAL_SPI_Init+0x324>)
 8006626:	f7fc f808 	bl	800263a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7fc f919 	bl	8002888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800666c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	ea42 0103 	orr.w	r1, r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	f003 0104 	and.w	r1, r3, #4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	f003 0210 	and.w	r2, r3, #16
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69da      	ldr	r2, [r3, #28]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	0801011c 	.word	0x0801011c

08006714 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <HAL_SPI_Transmit+0x30>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006738:	d004      	beq.n	8006744 <HAL_SPI_Transmit+0x30>
 800673a:	f240 310a 	movw	r1, #778	; 0x30a
 800673e:	4893      	ldr	r0, [pc, #588]	; (800698c <HAL_SPI_Transmit+0x278>)
 8006740:	f7fb ff7b 	bl	800263a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_SPI_Transmit+0x3e>
 800674e:	2302      	movs	r3, #2
 8006750:	e128      	b.n	80069a4 <HAL_SPI_Transmit+0x290>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800675a:	f7fc fd27 	bl	80031ac <HAL_GetTick>
 800675e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	d002      	beq.n	8006776 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006770:	2302      	movs	r3, #2
 8006772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006774:	e10d      	b.n	8006992 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <HAL_SPI_Transmit+0x6e>
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006786:	e104      	b.n	8006992 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2203      	movs	r2, #3
 800678c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	88fa      	ldrh	r2, [r7, #6]
 80067a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ce:	d10f      	bne.n	80067f0 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d007      	beq.n	800680e <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800680c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006816:	d14b      	bne.n	80068b0 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_Transmit+0x112>
 8006820:	8afb      	ldrh	r3, [r7, #22]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d13e      	bne.n	80068a4 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	881a      	ldrh	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	1c9a      	adds	r2, r3, #2
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800684a:	e02b      	b.n	80068a4 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b02      	cmp	r3, #2
 8006858:	d112      	bne.n	8006880 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	881a      	ldrh	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	1c9a      	adds	r2, r3, #2
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	86da      	strh	r2, [r3, #54]	; 0x36
 800687e:	e011      	b.n	80068a4 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006880:	f7fc fc94 	bl	80031ac <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d803      	bhi.n	8006898 <HAL_SPI_Transmit+0x184>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d102      	bne.n	800689e <HAL_SPI_Transmit+0x18a>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068a2:	e076      	b.n	8006992 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1ce      	bne.n	800684c <HAL_SPI_Transmit+0x138>
 80068ae:	e04c      	b.n	800694a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <HAL_SPI_Transmit+0x1aa>
 80068b8:	8afb      	ldrh	r3, [r7, #22]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d140      	bne.n	8006940 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	330c      	adds	r3, #12
 80068c8:	7812      	ldrb	r2, [r2, #0]
 80068ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068e4:	e02c      	b.n	8006940 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d113      	bne.n	800691c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	7812      	ldrb	r2, [r2, #0]
 8006900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	86da      	strh	r2, [r3, #54]	; 0x36
 800691a:	e011      	b.n	8006940 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800691c:	f7fc fc46 	bl	80031ac <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d803      	bhi.n	8006934 <HAL_SPI_Transmit+0x220>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d102      	bne.n	800693a <HAL_SPI_Transmit+0x226>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d102      	bne.n	8006940 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800693e:	e028      	b.n	8006992 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1cd      	bne.n	80068e6 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fbda 	bl	8007108 <SPI_EndRxTxTransaction>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006968:	2300      	movs	r3, #0
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e002      	b.n	8006992 <HAL_SPI_Transmit+0x27e>
 800698c:	0801011c 	.word	0x0801011c
  }

error:
 8006990:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c8:	d112      	bne.n	80069f0 <HAL_SPI_Receive+0x44>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10e      	bne.n	80069f0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2204      	movs	r2, #4
 80069d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069da:	88fa      	ldrh	r2, [r7, #6]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f8f2 	bl	8006bd0 <HAL_SPI_TransmitReceive>
 80069ec:	4603      	mov	r3, r0
 80069ee:	e0ea      	b.n	8006bc6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <HAL_SPI_Receive+0x52>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e0e3      	b.n	8006bc6 <HAL_SPI_Receive+0x21a>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a06:	f7fc fbd1 	bl	80031ac <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a1c:	e0ca      	b.n	8006bb4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_SPI_Receive+0x7e>
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a2e:	e0c1      	b.n	8006bb4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2204      	movs	r2, #4
 8006a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	88fa      	ldrh	r2, [r7, #6]
 8006a48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a76:	d10f      	bne.n	8006a98 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d007      	beq.n	8006ab6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d162      	bne.n	8006b84 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006abe:	e02e      	b.n	8006b1e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d115      	bne.n	8006afa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f103 020c 	add.w	r2, r3, #12
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	7812      	ldrb	r2, [r2, #0]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006af8:	e011      	b.n	8006b1e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afa:	f7fc fb57 	bl	80031ac <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d803      	bhi.n	8006b12 <HAL_SPI_Receive+0x166>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d102      	bne.n	8006b18 <HAL_SPI_Receive+0x16c>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b1c:	e04a      	b.n	8006bb4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1cb      	bne.n	8006ac0 <HAL_SPI_Receive+0x114>
 8006b28:	e031      	b.n	8006b8e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d113      	bne.n	8006b60 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	b292      	uxth	r2, r2
 8006b44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	1c9a      	adds	r2, r3, #2
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b5e:	e011      	b.n	8006b84 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b60:	f7fc fb24 	bl	80031ac <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d803      	bhi.n	8006b78 <HAL_SPI_Receive+0x1cc>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d102      	bne.n	8006b7e <HAL_SPI_Receive+0x1d2>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b82:	e017      	b.n	8006bb4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1cd      	bne.n	8006b2a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fa52 	bl	800703c <SPI_EndRxTransaction>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
 8006bb0:	e000      	b.n	8006bb4 <HAL_SPI_Receive+0x208>
  }

error :
 8006bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	; 0x30
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bde:	2301      	movs	r3, #1
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_SPI_TransmitReceive+0x2a>
 8006bf0:	f240 417e 	movw	r1, #1150	; 0x47e
 8006bf4:	4884      	ldr	r0, [pc, #528]	; (8006e08 <HAL_SPI_TransmitReceive+0x238>)
 8006bf6:	f7fb fd20 	bl	800263a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_SPI_TransmitReceive+0x38>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e18d      	b.n	8006f24 <HAL_SPI_TransmitReceive+0x354>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c10:	f7fc facc 	bl	80031ac <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c26:	887b      	ldrh	r3, [r7, #2]
 8006c28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d00f      	beq.n	8006c52 <HAL_SPI_TransmitReceive+0x82>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c38:	d107      	bne.n	8006c4a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <HAL_SPI_TransmitReceive+0x7a>
 8006c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d003      	beq.n	8006c52 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c50:	e15e      	b.n	8006f10 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x94>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x94>
 8006c5e:	887b      	ldrh	r3, [r7, #2]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c6a:	e151      	b.n	8006f10 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d003      	beq.n	8006c80 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	887a      	ldrh	r2, [r7, #2]
 8006c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	887a      	ldrh	r2, [r7, #2]
 8006c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	887a      	ldrh	r2, [r7, #2]
 8006ca2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	887a      	ldrh	r2, [r7, #2]
 8006ca8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d007      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cdc:	d178      	bne.n	8006dd0 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_SPI_TransmitReceive+0x11c>
 8006ce6:	8b7b      	ldrh	r3, [r7, #26]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d166      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	881a      	ldrh	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	1c9a      	adds	r2, r3, #2
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d10:	e053      	b.n	8006dba <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d11b      	bne.n	8006d58 <HAL_SPI_TransmitReceive+0x188>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d016      	beq.n	8006d58 <HAL_SPI_TransmitReceive+0x188>
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d113      	bne.n	8006d58 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	1c9a      	adds	r2, r3, #2
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d119      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x1ca>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d014      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	b292      	uxth	r2, r2
 8006d7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	1c9a      	adds	r2, r3, #2
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d96:	2301      	movs	r3, #1
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d9a:	f7fc fa07 	bl	80031ac <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d807      	bhi.n	8006dba <HAL_SPI_TransmitReceive+0x1ea>
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d003      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006db8:	e0aa      	b.n	8006f10 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1a6      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x142>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1a1      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x142>
 8006dce:	e07f      	b.n	8006ed0 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <HAL_SPI_TransmitReceive+0x20e>
 8006dd8:	8b7b      	ldrh	r3, [r7, #26]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d16e      	bne.n	8006ebc <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e04:	e05a      	b.n	8006ebc <HAL_SPI_TransmitReceive+0x2ec>
 8006e06:	bf00      	nop
 8006e08:	0801011c 	.word	0x0801011c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d11c      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x284>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d017      	beq.n	8006e54 <HAL_SPI_TransmitReceive+0x284>
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d114      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	330c      	adds	r3, #12
 8006e34:	7812      	ldrb	r2, [r2, #0]
 8006e36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d119      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x2c6>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d014      	beq.n	8006e96 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e92:	2301      	movs	r3, #1
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e96:	f7fc f989 	bl	80031ac <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d803      	bhi.n	8006eae <HAL_SPI_TransmitReceive+0x2de>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d102      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x2e4>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006eba:	e029      	b.n	8006f10 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1a2      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x23c>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d19d      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f917 	bl	8007108 <SPI_EndRxTxTransaction>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d006      	beq.n	8006eee <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006eec:	e010      	b.n	8006f10 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10b      	bne.n	8006f0e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	e000      	b.n	8006f10 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8006f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3730      	adds	r7, #48	; 0x30
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f3c:	f7fc f936 	bl	80031ac <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	4413      	add	r3, r2
 8006f4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f4c:	f7fc f92e 	bl	80031ac <HAL_GetTick>
 8006f50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f52:	4b39      	ldr	r3, [pc, #228]	; (8007038 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	015b      	lsls	r3, r3, #5
 8006f58:	0d1b      	lsrs	r3, r3, #20
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f62:	e054      	b.n	800700e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d050      	beq.n	800700e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f6c:	f7fc f91e 	bl	80031ac <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d902      	bls.n	8006f82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d13d      	bne.n	8006ffe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f9a:	d111      	bne.n	8006fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa4:	d004      	beq.n	8006fb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fae:	d107      	bne.n	8006fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc8:	d10f      	bne.n	8006fea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e017      	b.n	800702e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	3b01      	subs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4013      	ands	r3, r2
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	429a      	cmp	r2, r3
 800701c:	bf0c      	ite	eq
 800701e:	2301      	moveq	r3, #1
 8007020:	2300      	movne	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	429a      	cmp	r2, r3
 800702a:	d19b      	bne.n	8006f64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3720      	adds	r7, #32
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	200000a4 	.word	0x200000a4

0800703c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007050:	d111      	bne.n	8007076 <SPI_EndRxTransaction+0x3a>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800705a:	d004      	beq.n	8007066 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007064:	d107      	bne.n	8007076 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007074:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707e:	d12a      	bne.n	80070d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007088:	d012      	beq.n	80070b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	2180      	movs	r1, #128	; 0x80
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff ff49 	bl	8006f2c <SPI_WaitFlagStateUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02d      	beq.n	80070fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e026      	b.n	80070fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	2101      	movs	r1, #1
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff ff36 	bl	8006f2c <SPI_WaitFlagStateUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01a      	beq.n	80070fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	f043 0220 	orr.w	r2, r3, #32
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e013      	b.n	80070fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	2101      	movs	r1, #1
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff ff23 	bl	8006f2c <SPI_WaitFlagStateUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f0:	f043 0220 	orr.w	r2, r3, #32
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e000      	b.n	80070fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007114:	4b1b      	ldr	r3, [pc, #108]	; (8007184 <SPI_EndRxTxTransaction+0x7c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1b      	ldr	r2, [pc, #108]	; (8007188 <SPI_EndRxTxTransaction+0x80>)
 800711a:	fba2 2303 	umull	r2, r3, r2, r3
 800711e:	0d5b      	lsrs	r3, r3, #21
 8007120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007132:	d112      	bne.n	800715a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2200      	movs	r2, #0
 800713c:	2180      	movs	r1, #128	; 0x80
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff fef4 	bl	8006f2c <SPI_WaitFlagStateUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d016      	beq.n	8007178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	f043 0220 	orr.w	r2, r3, #32
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e00f      	b.n	800717a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	3b01      	subs	r3, #1
 8007164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b80      	cmp	r3, #128	; 0x80
 8007172:	d0f2      	beq.n	800715a <SPI_EndRxTxTransaction+0x52>
 8007174:	e000      	b.n	8007178 <SPI_EndRxTxTransaction+0x70>
        break;
 8007176:	bf00      	nop
  }

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200000a4 	.word	0x200000a4
 8007188:	165e9f81 	.word	0x165e9f81

0800718c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e0c5      	b.n	800732a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a64      	ldr	r2, [pc, #400]	; (8007334 <HAL_TIM_Base_Init+0x1a8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d045      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b0:	d040      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a60      	ldr	r2, [pc, #384]	; (8007338 <HAL_TIM_Base_Init+0x1ac>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d03b      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a5e      	ldr	r2, [pc, #376]	; (800733c <HAL_TIM_Base_Init+0x1b0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d036      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a5d      	ldr	r2, [pc, #372]	; (8007340 <HAL_TIM_Base_Init+0x1b4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d031      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a5b      	ldr	r2, [pc, #364]	; (8007344 <HAL_TIM_Base_Init+0x1b8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02c      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a5a      	ldr	r2, [pc, #360]	; (8007348 <HAL_TIM_Base_Init+0x1bc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d027      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a58      	ldr	r2, [pc, #352]	; (800734c <HAL_TIM_Base_Init+0x1c0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d022      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a57      	ldr	r2, [pc, #348]	; (8007350 <HAL_TIM_Base_Init+0x1c4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d01d      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a55      	ldr	r2, [pc, #340]	; (8007354 <HAL_TIM_Base_Init+0x1c8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a54      	ldr	r2, [pc, #336]	; (8007358 <HAL_TIM_Base_Init+0x1cc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a52      	ldr	r2, [pc, #328]	; (800735c <HAL_TIM_Base_Init+0x1d0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a51      	ldr	r2, [pc, #324]	; (8007360 <HAL_TIM_Base_Init+0x1d4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a4f      	ldr	r2, [pc, #316]	; (8007364 <HAL_TIM_Base_Init+0x1d8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_TIM_Base_Init+0xa8>
 800722a:	f240 1113 	movw	r1, #275	; 0x113
 800722e:	484e      	ldr	r0, [pc, #312]	; (8007368 <HAL_TIM_Base_Init+0x1dc>)
 8007230:	f7fb fa03 	bl	800263a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d014      	beq.n	8007266 <HAL_TIM_Base_Init+0xda>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b10      	cmp	r3, #16
 8007242:	d010      	beq.n	8007266 <HAL_TIM_Base_Init+0xda>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b20      	cmp	r3, #32
 800724a:	d00c      	beq.n	8007266 <HAL_TIM_Base_Init+0xda>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	d008      	beq.n	8007266 <HAL_TIM_Base_Init+0xda>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b60      	cmp	r3, #96	; 0x60
 800725a:	d004      	beq.n	8007266 <HAL_TIM_Base_Init+0xda>
 800725c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007260:	4841      	ldr	r0, [pc, #260]	; (8007368 <HAL_TIM_Base_Init+0x1dc>)
 8007262:	f7fb f9ea 	bl	800263a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <HAL_TIM_Base_Init+0x100>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007276:	d009      	beq.n	800728c <HAL_TIM_Base_Init+0x100>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007280:	d004      	beq.n	800728c <HAL_TIM_Base_Init+0x100>
 8007282:	f240 1115 	movw	r1, #277	; 0x115
 8007286:	4838      	ldr	r0, [pc, #224]	; (8007368 <HAL_TIM_Base_Init+0x1dc>)
 8007288:	f7fb f9d7 	bl	800263a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_TIM_Base_Init+0x11a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d004      	beq.n	80072a6 <HAL_TIM_Base_Init+0x11a>
 800729c:	f44f 718b 	mov.w	r1, #278	; 0x116
 80072a0:	4831      	ldr	r0, [pc, #196]	; (8007368 <HAL_TIM_Base_Init+0x1dc>)
 80072a2:	f7fb f9ca 	bl	800263a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fb fc36 	bl	8002b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f001 fbb8 	bl	8008a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40010000 	.word	0x40010000
 8007338:	40000400 	.word	0x40000400
 800733c:	40000800 	.word	0x40000800
 8007340:	40000c00 	.word	0x40000c00
 8007344:	40001000 	.word	0x40001000
 8007348:	40001400 	.word	0x40001400
 800734c:	40010400 	.word	0x40010400
 8007350:	40014000 	.word	0x40014000
 8007354:	40014400 	.word	0x40014400
 8007358:	40014800 	.word	0x40014800
 800735c:	40001800 	.word	0x40001800
 8007360:	40001c00 	.word	0x40001c00
 8007364:	40002000 	.word	0x40002000
 8007368:	08010154 	.word	0x08010154

0800736c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a51      	ldr	r2, [pc, #324]	; (80074c0 <HAL_TIM_Base_Start_IT+0x154>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d045      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007386:	d040      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a4d      	ldr	r2, [pc, #308]	; (80074c4 <HAL_TIM_Base_Start_IT+0x158>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d03b      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a4c      	ldr	r2, [pc, #304]	; (80074c8 <HAL_TIM_Base_Start_IT+0x15c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d036      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <HAL_TIM_Base_Start_IT+0x160>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d031      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a49      	ldr	r2, [pc, #292]	; (80074d0 <HAL_TIM_Base_Start_IT+0x164>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d02c      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a47      	ldr	r2, [pc, #284]	; (80074d4 <HAL_TIM_Base_Start_IT+0x168>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d027      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a46      	ldr	r2, [pc, #280]	; (80074d8 <HAL_TIM_Base_Start_IT+0x16c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d022      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a44      	ldr	r2, [pc, #272]	; (80074dc <HAL_TIM_Base_Start_IT+0x170>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a43      	ldr	r2, [pc, #268]	; (80074e0 <HAL_TIM_Base_Start_IT+0x174>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d018      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a41      	ldr	r2, [pc, #260]	; (80074e4 <HAL_TIM_Base_Start_IT+0x178>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a40      	ldr	r2, [pc, #256]	; (80074e8 <HAL_TIM_Base_Start_IT+0x17c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a3e      	ldr	r2, [pc, #248]	; (80074ec <HAL_TIM_Base_Start_IT+0x180>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3d      	ldr	r2, [pc, #244]	; (80074f0 <HAL_TIM_Base_Start_IT+0x184>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x9e>
 8007400:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007404:	483b      	ldr	r0, [pc, #236]	; (80074f4 <HAL_TIM_Base_Start_IT+0x188>)
 8007406:	f7fb f918 	bl	800263a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b01      	cmp	r3, #1
 8007414:	d001      	beq.n	800741a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e04e      	b.n	80074b8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0201 	orr.w	r2, r2, #1
 8007430:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <HAL_TIM_Base_Start_IT+0x154>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d022      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0x116>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007444:	d01d      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0x116>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <HAL_TIM_Base_Start_IT+0x158>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d018      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0x116>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1c      	ldr	r2, [pc, #112]	; (80074c8 <HAL_TIM_Base_Start_IT+0x15c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0x116>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1b      	ldr	r2, [pc, #108]	; (80074cc <HAL_TIM_Base_Start_IT+0x160>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00e      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0x116>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <HAL_TIM_Base_Start_IT+0x16c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d009      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0x116>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1a      	ldr	r2, [pc, #104]	; (80074dc <HAL_TIM_Base_Start_IT+0x170>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0x116>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1a      	ldr	r2, [pc, #104]	; (80074e8 <HAL_TIM_Base_Start_IT+0x17c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d111      	bne.n	80074a6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b06      	cmp	r3, #6
 8007492:	d010      	beq.n	80074b6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a4:	e007      	b.n	80074b6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 0201 	orr.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40010000 	.word	0x40010000
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40000800 	.word	0x40000800
 80074cc:	40000c00 	.word	0x40000c00
 80074d0:	40001000 	.word	0x40001000
 80074d4:	40001400 	.word	0x40001400
 80074d8:	40010400 	.word	0x40010400
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40014400 	.word	0x40014400
 80074e4:	40014800 	.word	0x40014800
 80074e8:	40001800 	.word	0x40001800
 80074ec:	40001c00 	.word	0x40001c00
 80074f0:	40002000 	.word	0x40002000
 80074f4:	08010154 	.word	0x08010154

080074f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e0c5      	b.n	8007696 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a64      	ldr	r2, [pc, #400]	; (80076a0 <HAL_TIM_PWM_Init+0x1a8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d045      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d040      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a60      	ldr	r2, [pc, #384]	; (80076a4 <HAL_TIM_PWM_Init+0x1ac>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d03b      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a5e      	ldr	r2, [pc, #376]	; (80076a8 <HAL_TIM_PWM_Init+0x1b0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d036      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a5d      	ldr	r2, [pc, #372]	; (80076ac <HAL_TIM_PWM_Init+0x1b4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d031      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a5b      	ldr	r2, [pc, #364]	; (80076b0 <HAL_TIM_PWM_Init+0x1b8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d02c      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a5a      	ldr	r2, [pc, #360]	; (80076b4 <HAL_TIM_PWM_Init+0x1bc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d027      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a58      	ldr	r2, [pc, #352]	; (80076b8 <HAL_TIM_PWM_Init+0x1c0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d022      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a57      	ldr	r2, [pc, #348]	; (80076bc <HAL_TIM_PWM_Init+0x1c4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d01d      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a55      	ldr	r2, [pc, #340]	; (80076c0 <HAL_TIM_PWM_Init+0x1c8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d018      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a54      	ldr	r2, [pc, #336]	; (80076c4 <HAL_TIM_PWM_Init+0x1cc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d013      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a52      	ldr	r2, [pc, #328]	; (80076c8 <HAL_TIM_PWM_Init+0x1d0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00e      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a51      	ldr	r2, [pc, #324]	; (80076cc <HAL_TIM_PWM_Init+0x1d4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a4f      	ldr	r2, [pc, #316]	; (80076d0 <HAL_TIM_PWM_Init+0x1d8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <HAL_TIM_PWM_Init+0xa8>
 8007596:	f240 5129 	movw	r1, #1321	; 0x529
 800759a:	484e      	ldr	r0, [pc, #312]	; (80076d4 <HAL_TIM_PWM_Init+0x1dc>)
 800759c:	f7fb f84d 	bl	800263a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d014      	beq.n	80075d2 <HAL_TIM_PWM_Init+0xda>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d010      	beq.n	80075d2 <HAL_TIM_PWM_Init+0xda>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d00c      	beq.n	80075d2 <HAL_TIM_PWM_Init+0xda>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d008      	beq.n	80075d2 <HAL_TIM_PWM_Init+0xda>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d004      	beq.n	80075d2 <HAL_TIM_PWM_Init+0xda>
 80075c8:	f240 512a 	movw	r1, #1322	; 0x52a
 80075cc:	4841      	ldr	r0, [pc, #260]	; (80076d4 <HAL_TIM_PWM_Init+0x1dc>)
 80075ce:	f7fb f834 	bl	800263a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00e      	beq.n	80075f8 <HAL_TIM_PWM_Init+0x100>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e2:	d009      	beq.n	80075f8 <HAL_TIM_PWM_Init+0x100>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ec:	d004      	beq.n	80075f8 <HAL_TIM_PWM_Init+0x100>
 80075ee:	f240 512b 	movw	r1, #1323	; 0x52b
 80075f2:	4838      	ldr	r0, [pc, #224]	; (80076d4 <HAL_TIM_PWM_Init+0x1dc>)
 80075f4:	f7fb f821 	bl	800263a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_TIM_PWM_Init+0x11a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b80      	cmp	r3, #128	; 0x80
 8007606:	d004      	beq.n	8007612 <HAL_TIM_PWM_Init+0x11a>
 8007608:	f240 512c 	movw	r1, #1324	; 0x52c
 800760c:	4831      	ldr	r0, [pc, #196]	; (80076d4 <HAL_TIM_PWM_Init+0x1dc>)
 800760e:	f7fb f814 	bl	800263a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fb fae2 	bl	8002bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f001 fa02 	bl	8008a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40000c00 	.word	0x40000c00
 80076b0:	40001000 	.word	0x40001000
 80076b4:	40001400 	.word	0x40001400
 80076b8:	40010400 	.word	0x40010400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800
 80076c8:	40001800 	.word	0x40001800
 80076cc:	40001c00 	.word	0x40001c00
 80076d0:	40002000 	.word	0x40002000
 80076d4:	08010154 	.word	0x08010154

080076d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a84      	ldr	r2, [pc, #528]	; (80078f8 <HAL_TIM_PWM_Start+0x220>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d10f      	bne.n	800770c <HAL_TIM_PWM_Start+0x34>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 809f 	beq.w	8007832 <HAL_TIM_PWM_Start+0x15a>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	f000 809b 	beq.w	8007832 <HAL_TIM_PWM_Start+0x15a>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b08      	cmp	r3, #8
 8007700:	f000 8097 	beq.w	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b0c      	cmp	r3, #12
 8007708:	f000 8093 	beq.w	8007832 <HAL_TIM_PWM_Start+0x15a>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d10e      	bne.n	8007734 <HAL_TIM_PWM_Start+0x5c>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 808a 	beq.w	8007832 <HAL_TIM_PWM_Start+0x15a>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b04      	cmp	r3, #4
 8007722:	f000 8086 	beq.w	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b08      	cmp	r3, #8
 800772a:	f000 8082 	beq.w	8007832 <HAL_TIM_PWM_Start+0x15a>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b0c      	cmp	r3, #12
 8007732:	d07e      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a70      	ldr	r2, [pc, #448]	; (80078fc <HAL_TIM_PWM_Start+0x224>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d10b      	bne.n	8007756 <HAL_TIM_PWM_Start+0x7e>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d076      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b04      	cmp	r3, #4
 8007748:	d073      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b08      	cmp	r3, #8
 800774e:	d070      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b0c      	cmp	r3, #12
 8007754:	d06d      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a69      	ldr	r2, [pc, #420]	; (8007900 <HAL_TIM_PWM_Start+0x228>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10b      	bne.n	8007778 <HAL_TIM_PWM_Start+0xa0>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d065      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b04      	cmp	r3, #4
 800776a:	d062      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b08      	cmp	r3, #8
 8007770:	d05f      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b0c      	cmp	r3, #12
 8007776:	d05c      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a61      	ldr	r2, [pc, #388]	; (8007904 <HAL_TIM_PWM_Start+0x22c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10b      	bne.n	800779a <HAL_TIM_PWM_Start+0xc2>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d054      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b04      	cmp	r3, #4
 800778c:	d051      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b08      	cmp	r3, #8
 8007792:	d04e      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b0c      	cmp	r3, #12
 8007798:	d04b      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a5a      	ldr	r2, [pc, #360]	; (8007908 <HAL_TIM_PWM_Start+0x230>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d10b      	bne.n	80077bc <HAL_TIM_PWM_Start+0xe4>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d043      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d040      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d03d      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b0c      	cmp	r3, #12
 80077ba:	d03a      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a52      	ldr	r2, [pc, #328]	; (800790c <HAL_TIM_PWM_Start+0x234>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d105      	bne.n	80077d2 <HAL_TIM_PWM_Start+0xfa>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d032      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d02f      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a4e      	ldr	r2, [pc, #312]	; (8007910 <HAL_TIM_PWM_Start+0x238>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d102      	bne.n	80077e2 <HAL_TIM_PWM_Start+0x10a>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d027      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a4b      	ldr	r2, [pc, #300]	; (8007914 <HAL_TIM_PWM_Start+0x23c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d102      	bne.n	80077f2 <HAL_TIM_PWM_Start+0x11a>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01f      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a48      	ldr	r2, [pc, #288]	; (8007918 <HAL_TIM_PWM_Start+0x240>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d105      	bne.n	8007808 <HAL_TIM_PWM_Start+0x130>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d014      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a43      	ldr	r2, [pc, #268]	; (800791c <HAL_TIM_PWM_Start+0x244>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d102      	bne.n	8007818 <HAL_TIM_PWM_Start+0x140>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a40      	ldr	r2, [pc, #256]	; (8007920 <HAL_TIM_PWM_Start+0x248>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d102      	bne.n	8007828 <HAL_TIM_PWM_Start+0x150>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <HAL_TIM_PWM_Start+0x15a>
 8007828:	f240 51af 	movw	r1, #1455	; 0x5af
 800782c:	483d      	ldr	r0, [pc, #244]	; (8007924 <HAL_TIM_PWM_Start+0x24c>)
 800782e:	f7fa ff04 	bl	800263a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d109      	bne.n	800784c <HAL_TIM_PWM_Start+0x174>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	bf14      	ite	ne
 8007844:	2301      	movne	r3, #1
 8007846:	2300      	moveq	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e022      	b.n	8007892 <HAL_TIM_PWM_Start+0x1ba>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b04      	cmp	r3, #4
 8007850:	d109      	bne.n	8007866 <HAL_TIM_PWM_Start+0x18e>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b01      	cmp	r3, #1
 800785c:	bf14      	ite	ne
 800785e:	2301      	movne	r3, #1
 8007860:	2300      	moveq	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	e015      	b.n	8007892 <HAL_TIM_PWM_Start+0x1ba>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d109      	bne.n	8007880 <HAL_TIM_PWM_Start+0x1a8>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	bf14      	ite	ne
 8007878:	2301      	movne	r3, #1
 800787a:	2300      	moveq	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e008      	b.n	8007892 <HAL_TIM_PWM_Start+0x1ba>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b01      	cmp	r3, #1
 800788a:	bf14      	ite	ne
 800788c:	2301      	movne	r3, #1
 800788e:	2300      	moveq	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e094      	b.n	80079c4 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <HAL_TIM_PWM_Start+0x1d2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078a8:	e013      	b.n	80078d2 <HAL_TIM_PWM_Start+0x1fa>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_PWM_Start+0x1e2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b8:	e00b      	b.n	80078d2 <HAL_TIM_PWM_Start+0x1fa>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d104      	bne.n	80078ca <HAL_TIM_PWM_Start+0x1f2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c8:	e003      	b.n	80078d2 <HAL_TIM_PWM_Start+0x1fa>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2201      	movs	r2, #1
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 fc28 	bl	8009130 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <HAL_TIM_PWM_Start+0x220>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <HAL_TIM_PWM_Start+0x21c>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a06      	ldr	r2, [pc, #24]	; (8007908 <HAL_TIM_PWM_Start+0x230>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d119      	bne.n	8007928 <HAL_TIM_PWM_Start+0x250>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e018      	b.n	800792a <HAL_TIM_PWM_Start+0x252>
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40010400 	.word	0x40010400
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800
 8007918:	40001800 	.word	0x40001800
 800791c:	40001c00 	.word	0x40001c00
 8007920:	40002000 	.word	0x40002000
 8007924:	08010154 	.word	0x08010154
 8007928:	2300      	movs	r3, #0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800793c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a22      	ldr	r2, [pc, #136]	; (80079cc <HAL_TIM_PWM_Start+0x2f4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d022      	beq.n	800798e <HAL_TIM_PWM_Start+0x2b6>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007950:	d01d      	beq.n	800798e <HAL_TIM_PWM_Start+0x2b6>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1e      	ldr	r2, [pc, #120]	; (80079d0 <HAL_TIM_PWM_Start+0x2f8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d018      	beq.n	800798e <HAL_TIM_PWM_Start+0x2b6>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1c      	ldr	r2, [pc, #112]	; (80079d4 <HAL_TIM_PWM_Start+0x2fc>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d013      	beq.n	800798e <HAL_TIM_PWM_Start+0x2b6>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <HAL_TIM_PWM_Start+0x300>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00e      	beq.n	800798e <HAL_TIM_PWM_Start+0x2b6>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a19      	ldr	r2, [pc, #100]	; (80079dc <HAL_TIM_PWM_Start+0x304>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d009      	beq.n	800798e <HAL_TIM_PWM_Start+0x2b6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a18      	ldr	r2, [pc, #96]	; (80079e0 <HAL_TIM_PWM_Start+0x308>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d004      	beq.n	800798e <HAL_TIM_PWM_Start+0x2b6>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a16      	ldr	r2, [pc, #88]	; (80079e4 <HAL_TIM_PWM_Start+0x30c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d111      	bne.n	80079b2 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b06      	cmp	r3, #6
 800799e:	d010      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b0:	e007      	b.n	80079c2 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0201 	orr.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40010000 	.word	0x40010000
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40000c00 	.word	0x40000c00
 80079dc:	40010400 	.word	0x40010400
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40001800 	.word	0x40001800

080079e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e198      	b.n	8007d2e <HAL_TIM_Encoder_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a7d      	ldr	r2, [pc, #500]	; (8007bf8 <HAL_TIM_Encoder_Init+0x210>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d027      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0e:	d022      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a79      	ldr	r2, [pc, #484]	; (8007bfc <HAL_TIM_Encoder_Init+0x214>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d01d      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a78      	ldr	r2, [pc, #480]	; (8007c00 <HAL_TIM_Encoder_Init+0x218>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d018      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a76      	ldr	r2, [pc, #472]	; (8007c04 <HAL_TIM_Encoder_Init+0x21c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d013      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a75      	ldr	r2, [pc, #468]	; (8007c08 <HAL_TIM_Encoder_Init+0x220>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00e      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a73      	ldr	r2, [pc, #460]	; (8007c0c <HAL_TIM_Encoder_Init+0x224>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d009      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a72      	ldr	r2, [pc, #456]	; (8007c10 <HAL_TIM_Encoder_Init+0x228>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d004      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x6e>
 8007a4c:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007a50:	4870      	ldr	r0, [pc, #448]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007a52:	f7fa fdf2 	bl	800263a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d014      	beq.n	8007a88 <HAL_TIM_Encoder_Init+0xa0>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d010      	beq.n	8007a88 <HAL_TIM_Encoder_Init+0xa0>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d00c      	beq.n	8007a88 <HAL_TIM_Encoder_Init+0xa0>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b40      	cmp	r3, #64	; 0x40
 8007a74:	d008      	beq.n	8007a88 <HAL_TIM_Encoder_Init+0xa0>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b60      	cmp	r3, #96	; 0x60
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIM_Encoder_Init+0xa0>
 8007a7e:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007a82:	4864      	ldr	r0, [pc, #400]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007a84:	f7fa fdd9 	bl	800263a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00e      	beq.n	8007aae <HAL_TIM_Encoder_Init+0xc6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a98:	d009      	beq.n	8007aae <HAL_TIM_Encoder_Init+0xc6>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa2:	d004      	beq.n	8007aae <HAL_TIM_Encoder_Init+0xc6>
 8007aa4:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007aa8:	485a      	ldr	r0, [pc, #360]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007aaa:	f7fa fdc6 	bl	800263a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d008      	beq.n	8007ac8 <HAL_TIM_Encoder_Init+0xe0>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d004      	beq.n	8007ac8 <HAL_TIM_Encoder_Init+0xe0>
 8007abe:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8007ac2:	4854      	ldr	r0, [pc, #336]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007ac4:	f7fa fdb9 	bl	800263a <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d00c      	beq.n	8007aea <HAL_TIM_Encoder_Init+0x102>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d008      	beq.n	8007aea <HAL_TIM_Encoder_Init+0x102>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d004      	beq.n	8007aea <HAL_TIM_Encoder_Init+0x102>
 8007ae0:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8007ae4:	484b      	ldr	r0, [pc, #300]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007ae6:	f7fa fda8 	bl	800263a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d00c      	beq.n	8007b0c <HAL_TIM_Encoder_Init+0x124>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d008      	beq.n	8007b0c <HAL_TIM_Encoder_Init+0x124>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d004      	beq.n	8007b0c <HAL_TIM_Encoder_Init+0x124>
 8007b02:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8007b06:	4843      	ldr	r0, [pc, #268]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007b08:	f7fa fd97 	bl	800263a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d00c      	beq.n	8007b2e <HAL_TIM_Encoder_Init+0x146>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d008      	beq.n	8007b2e <HAL_TIM_Encoder_Init+0x146>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d004      	beq.n	8007b2e <HAL_TIM_Encoder_Init+0x146>
 8007b24:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8007b28:	483a      	ldr	r0, [pc, #232]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007b2a:	f7fa fd86 	bl	800263a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d008      	beq.n	8007b48 <HAL_TIM_Encoder_Init+0x160>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d004      	beq.n	8007b48 <HAL_TIM_Encoder_Init+0x160>
 8007b3e:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8007b42:	4834      	ldr	r0, [pc, #208]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007b44:	f7fa fd79 	bl	800263a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_TIM_Encoder_Init+0x17a>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIM_Encoder_Init+0x17a>
 8007b58:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007b5c:	482d      	ldr	r0, [pc, #180]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007b5e:	f7fa fd6c 	bl	800263a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d010      	beq.n	8007b8c <HAL_TIM_Encoder_Init+0x1a4>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d00c      	beq.n	8007b8c <HAL_TIM_Encoder_Init+0x1a4>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d008      	beq.n	8007b8c <HAL_TIM_Encoder_Init+0x1a4>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b0c      	cmp	r3, #12
 8007b80:	d004      	beq.n	8007b8c <HAL_TIM_Encoder_Init+0x1a4>
 8007b82:	f640 31da 	movw	r1, #3034	; 0xbda
 8007b86:	4823      	ldr	r0, [pc, #140]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007b88:	f7fa fd57 	bl	800263a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d010      	beq.n	8007bb6 <HAL_TIM_Encoder_Init+0x1ce>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d00c      	beq.n	8007bb6 <HAL_TIM_Encoder_Init+0x1ce>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d008      	beq.n	8007bb6 <HAL_TIM_Encoder_Init+0x1ce>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	2b0c      	cmp	r3, #12
 8007baa:	d004      	beq.n	8007bb6 <HAL_TIM_Encoder_Init+0x1ce>
 8007bac:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007bb0:	4818      	ldr	r0, [pc, #96]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007bb2:	f7fa fd42 	bl	800263a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b0f      	cmp	r3, #15
 8007bbc:	d904      	bls.n	8007bc8 <HAL_TIM_Encoder_Init+0x1e0>
 8007bbe:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007bc2:	4814      	ldr	r0, [pc, #80]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007bc4:	f7fa fd39 	bl	800263a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	2b0f      	cmp	r3, #15
 8007bce:	d904      	bls.n	8007bda <HAL_TIM_Encoder_Init+0x1f2>
 8007bd0:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007bd4:	480f      	ldr	r0, [pc, #60]	; (8007c14 <HAL_TIM_Encoder_Init+0x22c>)
 8007bd6:	f7fa fd30 	bl	800263a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d118      	bne.n	8007c18 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7fb f826 	bl	8002c40 <HAL_TIM_Encoder_MspInit>
 8007bf4:	e010      	b.n	8007c18 <HAL_TIM_Encoder_Init+0x230>
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800
 8007c04:	40000c00 	.word	0x40000c00
 8007c08:	40010400 	.word	0x40010400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40001800 	.word	0x40001800
 8007c14:	08010154 	.word	0x08010154
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c2e:	f023 0307 	bic.w	r3, r3, #7
 8007c32:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f000 ff02 	bl	8008a48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6c:	f023 0303 	bic.w	r3, r3, #3
 8007c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c8a:	f023 030c 	bic.w	r3, r3, #12
 8007c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	011a      	lsls	r2, r3, #4
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	031b      	lsls	r3, r3, #12
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cc8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007cd0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop

08007d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d122      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d11b      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0202 	mvn.w	r2, #2
 8007d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fe46 	bl	8008a0c <HAL_TIM_IC_CaptureCallback>
 8007d80:	e005      	b.n	8007d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fe38 	bl	80089f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fe49 	bl	8008a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d122      	bne.n	8007de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d11b      	bne.n	8007de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0204 	mvn.w	r2, #4
 8007db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fe1c 	bl	8008a0c <HAL_TIM_IC_CaptureCallback>
 8007dd4:	e005      	b.n	8007de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fe0e 	bl	80089f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fe1f 	bl	8008a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d122      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d11b      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f06f 0208 	mvn.w	r2, #8
 8007e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2204      	movs	r2, #4
 8007e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fdf2 	bl	8008a0c <HAL_TIM_IC_CaptureCallback>
 8007e28:	e005      	b.n	8007e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fde4 	bl	80089f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fdf5 	bl	8008a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d122      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d11b      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0210 	mvn.w	r2, #16
 8007e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2208      	movs	r2, #8
 8007e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fdc8 	bl	8008a0c <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fdba 	bl	80089f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fdcb 	bl	8008a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d10e      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d107      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0201 	mvn.w	r2, #1
 8007eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f9 f8f8 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec6:	2b80      	cmp	r3, #128	; 0x80
 8007ec8:	d10e      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed4:	2b80      	cmp	r3, #128	; 0x80
 8007ed6:	d107      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fb5c 	bl	80095a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	d10e      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f00:	2b40      	cmp	r3, #64	; 0x40
 8007f02:	d107      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fd90 	bl	8008a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d10e      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	d107      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f06f 0220 	mvn.w	r2, #32
 8007f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fb26 	bl	800958c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d010      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d00d      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d00a      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b0c      	cmp	r3, #12
 8007f6e:	d007      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b3c      	cmp	r3, #60	; 0x3c
 8007f74:	d004      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f76:	f241 0177 	movw	r1, #4215	; 0x1077
 8007f7a:	4883      	ldr	r0, [pc, #524]	; (8008188 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007f7c:	f7fa fb5d 	bl	800263a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b60      	cmp	r3, #96	; 0x60
 8007f86:	d008      	beq.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x52>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b70      	cmp	r3, #112	; 0x70
 8007f8e:	d004      	beq.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x52>
 8007f90:	f241 0178 	movw	r1, #4216	; 0x1078
 8007f94:	487c      	ldr	r0, [pc, #496]	; (8008188 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007f96:	f7fa fb50 	bl	800263a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007faa:	f241 0179 	movw	r1, #4217	; 0x1079
 8007fae:	4876      	ldr	r0, [pc, #472]	; (8008188 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007fb0:	f7fa fb43 	bl	800263a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d004      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fc4:	f241 017a 	movw	r1, #4218	; 0x107a
 8007fc8:	486f      	ldr	r0, [pc, #444]	; (8008188 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007fca:	f7fa fb36 	bl	800263a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d101      	bne.n	8007fdc <HAL_TIM_PWM_ConfigChannel+0x94>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e17c      	b.n	80082d6 <HAL_TIM_PWM_ConfigChannel+0x38e>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b0c      	cmp	r3, #12
 8007fe8:	f200 816d 	bhi.w	80082c6 <HAL_TIM_PWM_ConfigChannel+0x37e>
 8007fec:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008029 	.word	0x08008029
 8007ff8:	080082c7 	.word	0x080082c7
 8007ffc:	080082c7 	.word	0x080082c7
 8008000:	080082c7 	.word	0x080082c7
 8008004:	080080eb 	.word	0x080080eb
 8008008:	080082c7 	.word	0x080082c7
 800800c:	080082c7 	.word	0x080082c7
 8008010:	080082c7 	.word	0x080082c7
 8008014:	080081b9 	.word	0x080081b9
 8008018:	080082c7 	.word	0x080082c7
 800801c:	080082c7 	.word	0x080082c7
 8008020:	080082c7 	.word	0x080082c7
 8008024:	0800823f 	.word	0x0800823f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a57      	ldr	r2, [pc, #348]	; (800818c <HAL_TIM_PWM_ConfigChannel+0x244>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d03b      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803a:	d036      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a53      	ldr	r2, [pc, #332]	; (8008190 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d031      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a52      	ldr	r2, [pc, #328]	; (8008194 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d02c      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a50      	ldr	r2, [pc, #320]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d027      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a4f      	ldr	r2, [pc, #316]	; (800819c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d022      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a4d      	ldr	r2, [pc, #308]	; (80081a0 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d01d      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a4c      	ldr	r2, [pc, #304]	; (80081a4 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d018      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a4a      	ldr	r2, [pc, #296]	; (80081a8 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d013      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a49      	ldr	r2, [pc, #292]	; (80081ac <HAL_TIM_PWM_ConfigChannel+0x264>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00e      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a47      	ldr	r2, [pc, #284]	; (80081b0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d009      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a46      	ldr	r2, [pc, #280]	; (80081b4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d004      	beq.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x162>
 80080a0:	f241 0184 	movw	r1, #4228	; 0x1084
 80080a4:	4838      	ldr	r0, [pc, #224]	; (8008188 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80080a6:	f7fa fac8 	bl	800263a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fd69 	bl	8008b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699a      	ldr	r2, [r3, #24]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 0208 	orr.w	r2, r2, #8
 80080c4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0204 	bic.w	r2, r2, #4
 80080d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6999      	ldr	r1, [r3, #24]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	619a      	str	r2, [r3, #24]
      break;
 80080e8:	e0f0      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a27      	ldr	r2, [pc, #156]	; (800818c <HAL_TIM_PWM_ConfigChannel+0x244>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d027      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fc:	d022      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a23      	ldr	r2, [pc, #140]	; (8008190 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d01d      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a21      	ldr	r2, [pc, #132]	; (8008194 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d018      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a20      	ldr	r2, [pc, #128]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d013      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1e      	ldr	r2, [pc, #120]	; (800819c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00e      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a1d      	ldr	r2, [pc, #116]	; (80081a0 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d009      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1d      	ldr	r2, [pc, #116]	; (80081ac <HAL_TIM_PWM_ConfigChannel+0x264>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800813a:	f241 0195 	movw	r1, #4245	; 0x1095
 800813e:	4812      	ldr	r0, [pc, #72]	; (8008188 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8008140:	f7fa fa7b 	bl	800263a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fdb6 	bl	8008cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699a      	ldr	r2, [r3, #24]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800815e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800816e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6999      	ldr	r1, [r3, #24]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	021a      	lsls	r2, r3, #8
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	619a      	str	r2, [r3, #24]
      break;
 8008184:	e0a2      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x384>
 8008186:	bf00      	nop
 8008188:	08010154 	.word	0x08010154
 800818c:	40010000 	.word	0x40010000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40010400 	.word	0x40010400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40014400 	.word	0x40014400
 80081a8:	40014800 	.word	0x40014800
 80081ac:	40001800 	.word	0x40001800
 80081b0:	40001c00 	.word	0x40001c00
 80081b4:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a48      	ldr	r2, [pc, #288]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x398>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d01d      	beq.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ca:	d018      	beq.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a44      	ldr	r2, [pc, #272]	; (80082e4 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d013      	beq.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a43      	ldr	r2, [pc, #268]	; (80082e8 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00e      	beq.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a41      	ldr	r2, [pc, #260]	; (80082ec <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d009      	beq.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a40      	ldr	r2, [pc, #256]	; (80082f0 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d004      	beq.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80081f4:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80081f8:	483e      	ldr	r0, [pc, #248]	; (80082f4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80081fa:	f7fa fa1e 	bl	800263a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fdf7 	bl	8008df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f042 0208 	orr.w	r2, r2, #8
 8008218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0204 	bic.w	r2, r2, #4
 8008228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69d9      	ldr	r1, [r3, #28]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	61da      	str	r2, [r3, #28]
      break;
 800823c:	e046      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a27      	ldr	r2, [pc, #156]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d01d      	beq.n	8008284 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008250:	d018      	beq.n	8008284 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a23      	ldr	r2, [pc, #140]	; (80082e4 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d013      	beq.n	8008284 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a21      	ldr	r2, [pc, #132]	; (80082e8 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00e      	beq.n	8008284 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a20      	ldr	r2, [pc, #128]	; (80082ec <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d009      	beq.n	8008284 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800827a:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800827e:	481d      	ldr	r0, [pc, #116]	; (80082f4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8008280:	f7fa f9db 	bl	800263a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fe52 	bl	8008f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69da      	ldr	r2, [r3, #28]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800829e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69da      	ldr	r2, [r3, #28]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69d9      	ldr	r1, [r3, #28]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	021a      	lsls	r2, r3, #8
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	61da      	str	r2, [r3, #28]
      break;
 80082c4:	e002      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40000400 	.word	0x40000400
 80082e8:	40000800 	.word	0x40000800
 80082ec:	40000c00 	.word	0x40000c00
 80082f0:	40010400 	.word	0x40010400
 80082f4:	08010154 	.word	0x08010154

080082f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_TIM_ConfigClockSource+0x1c>
 8008310:	2302      	movs	r3, #2
 8008312:	e35c      	b.n	80089ce <HAL_TIM_ConfigClockSource+0x6d6>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d029      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008336:	d024      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d020      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b10      	cmp	r3, #16
 8008346:	d01c      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b20      	cmp	r3, #32
 800834e:	d018      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b30      	cmp	r3, #48	; 0x30
 8008356:	d014      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b40      	cmp	r3, #64	; 0x40
 800835e:	d010      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b50      	cmp	r3, #80	; 0x50
 8008366:	d00c      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b60      	cmp	r3, #96	; 0x60
 800836e:	d008      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b70      	cmp	r3, #112	; 0x70
 8008376:	d004      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x8a>
 8008378:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800837c:	4893      	ldr	r0, [pc, #588]	; (80085cc <HAL_TIM_ConfigClockSource+0x2d4>)
 800837e:	f7fa f95c 	bl	800263a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008390:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008398:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083aa:	f000 812b 	beq.w	8008604 <HAL_TIM_ConfigClockSource+0x30c>
 80083ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b2:	f200 82ff 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ba:	d02e      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x122>
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c0:	f200 82f8 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 80083c4:	2b70      	cmp	r3, #112	; 0x70
 80083c6:	f000 8082 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1d6>
 80083ca:	2b70      	cmp	r3, #112	; 0x70
 80083cc:	f200 82f2 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 80083d0:	2b60      	cmp	r3, #96	; 0x60
 80083d2:	f000 81e8 	beq.w	80087a6 <HAL_TIM_ConfigClockSource+0x4ae>
 80083d6:	2b60      	cmp	r3, #96	; 0x60
 80083d8:	f200 82ec 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 80083dc:	2b50      	cmp	r3, #80	; 0x50
 80083de:	f000 8182 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x3ee>
 80083e2:	2b50      	cmp	r3, #80	; 0x50
 80083e4:	f200 82e6 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	f000 824d 	beq.w	8008888 <HAL_TIM_ConfigClockSource+0x590>
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	f200 82e0 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 80083f4:	2b30      	cmp	r3, #48	; 0x30
 80083f6:	f000 82a7 	beq.w	8008948 <HAL_TIM_ConfigClockSource+0x650>
 80083fa:	2b30      	cmp	r3, #48	; 0x30
 80083fc:	f200 82da 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 8008400:	2b20      	cmp	r3, #32
 8008402:	f000 82a1 	beq.w	8008948 <HAL_TIM_ConfigClockSource+0x650>
 8008406:	2b20      	cmp	r3, #32
 8008408:	f200 82d4 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 829b 	beq.w	8008948 <HAL_TIM_ConfigClockSource+0x650>
 8008412:	2b10      	cmp	r3, #16
 8008414:	f000 8298 	beq.w	8008948 <HAL_TIM_ConfigClockSource+0x650>
 8008418:	e2cc      	b.n	80089b4 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a6c      	ldr	r2, [pc, #432]	; (80085d0 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	f000 82ca 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842e:	f000 82c4 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a67      	ldr	r2, [pc, #412]	; (80085d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	f000 82be 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a65      	ldr	r2, [pc, #404]	; (80085d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	f000 82b8 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a63      	ldr	r2, [pc, #396]	; (80085dc <HAL_TIM_ConfigClockSource+0x2e4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	f000 82b2 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a61      	ldr	r2, [pc, #388]	; (80085e0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	f000 82ac 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a5f      	ldr	r2, [pc, #380]	; (80085e4 <HAL_TIM_ConfigClockSource+0x2ec>)
 8008468:	4293      	cmp	r3, r2
 800846a:	f000 82a6 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a5d      	ldr	r2, [pc, #372]	; (80085e8 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008474:	4293      	cmp	r3, r2
 8008476:	f000 82a0 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a5b      	ldr	r2, [pc, #364]	; (80085ec <HAL_TIM_ConfigClockSource+0x2f4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	f000 829a 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a59      	ldr	r2, [pc, #356]	; (80085f0 <HAL_TIM_ConfigClockSource+0x2f8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	f000 8294 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a57      	ldr	r2, [pc, #348]	; (80085f4 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008498:	4293      	cmp	r3, r2
 800849a:	f000 828e 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a55      	ldr	r2, [pc, #340]	; (80085f8 <HAL_TIM_ConfigClockSource+0x300>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	f000 8288 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a53      	ldr	r2, [pc, #332]	; (80085fc <HAL_TIM_ConfigClockSource+0x304>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	f000 8282 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a51      	ldr	r2, [pc, #324]	; (8008600 <HAL_TIM_ConfigClockSource+0x308>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	f000 827c 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
 80084c2:	f241 41c7 	movw	r1, #5319	; 0x14c7
 80084c6:	4841      	ldr	r0, [pc, #260]	; (80085cc <HAL_TIM_ConfigClockSource+0x2d4>)
 80084c8:	f7fa f8b7 	bl	800263a <assert_failed>
      break;
 80084cc:	e275      	b.n	80089ba <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a3f      	ldr	r2, [pc, #252]	; (80085d0 <HAL_TIM_ConfigClockSource+0x2d8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d027      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e0:	d022      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a3b      	ldr	r2, [pc, #236]	; (80085d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d01d      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a39      	ldr	r2, [pc, #228]	; (80085d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d018      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a38      	ldr	r2, [pc, #224]	; (80085dc <HAL_TIM_ConfigClockSource+0x2e4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d013      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a38      	ldr	r2, [pc, #224]	; (80085e8 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00e      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a37      	ldr	r2, [pc, #220]	; (80085ec <HAL_TIM_ConfigClockSource+0x2f4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d009      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a37      	ldr	r2, [pc, #220]	; (80085f8 <HAL_TIM_ConfigClockSource+0x300>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d004      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x230>
 800851e:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008522:	482a      	ldr	r0, [pc, #168]	; (80085cc <HAL_TIM_ConfigClockSource+0x2d4>)
 8008524:	f7fa f889 	bl	800263a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d013      	beq.n	8008558 <HAL_TIM_ConfigClockSource+0x260>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008538:	d00e      	beq.n	8008558 <HAL_TIM_ConfigClockSource+0x260>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008542:	d009      	beq.n	8008558 <HAL_TIM_ConfigClockSource+0x260>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800854c:	d004      	beq.n	8008558 <HAL_TIM_ConfigClockSource+0x260>
 800854e:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8008552:	481e      	ldr	r0, [pc, #120]	; (80085cc <HAL_TIM_ConfigClockSource+0x2d4>)
 8008554:	f7fa f871 	bl	800263a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008560:	d014      	beq.n	800858c <HAL_TIM_ConfigClockSource+0x294>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d010      	beq.n	800858c <HAL_TIM_ConfigClockSource+0x294>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00c      	beq.n	800858c <HAL_TIM_ConfigClockSource+0x294>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d008      	beq.n	800858c <HAL_TIM_ConfigClockSource+0x294>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d004      	beq.n	800858c <HAL_TIM_ConfigClockSource+0x294>
 8008582:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8008586:	4811      	ldr	r0, [pc, #68]	; (80085cc <HAL_TIM_ConfigClockSource+0x2d4>)
 8008588:	f7fa f857 	bl	800263a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	2b0f      	cmp	r3, #15
 8008592:	d904      	bls.n	800859e <HAL_TIM_ConfigClockSource+0x2a6>
 8008594:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8008598:	480c      	ldr	r0, [pc, #48]	; (80085cc <HAL_TIM_ConfigClockSource+0x2d4>)
 800859a:	f7fa f84e 	bl	800263a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6899      	ldr	r1, [r3, #8]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f000 fd9f 	bl	80090f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	609a      	str	r2, [r3, #8]
      break;
 80085ca:	e1f7      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x6c4>
 80085cc:	08010154 	.word	0x08010154
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40000400 	.word	0x40000400
 80085d8:	40000800 	.word	0x40000800
 80085dc:	40000c00 	.word	0x40000c00
 80085e0:	40001000 	.word	0x40001000
 80085e4:	40001400 	.word	0x40001400
 80085e8:	40010400 	.word	0x40010400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800
 80085f8:	40001800 	.word	0x40001800
 80085fc:	40001c00 	.word	0x40001c00
 8008600:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a97      	ldr	r2, [pc, #604]	; (8008868 <HAL_TIM_ConfigClockSource+0x570>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d01d      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x352>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008616:	d018      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x352>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a93      	ldr	r2, [pc, #588]	; (800886c <HAL_TIM_ConfigClockSource+0x574>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d013      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x352>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a92      	ldr	r2, [pc, #584]	; (8008870 <HAL_TIM_ConfigClockSource+0x578>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d00e      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x352>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a90      	ldr	r2, [pc, #576]	; (8008874 <HAL_TIM_ConfigClockSource+0x57c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d009      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x352>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a8f      	ldr	r2, [pc, #572]	; (8008878 <HAL_TIM_ConfigClockSource+0x580>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d004      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x352>
 8008640:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008644:	488d      	ldr	r0, [pc, #564]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 8008646:	f7f9 fff8 	bl	800263a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d013      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x382>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800865a:	d00e      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x382>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008664:	d009      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x382>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800866e:	d004      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x382>
 8008670:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8008674:	4881      	ldr	r0, [pc, #516]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 8008676:	f7f9 ffe0 	bl	800263a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008682:	d014      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3b6>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d010      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3b6>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3b6>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d008      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3b6>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b0a      	cmp	r3, #10
 80086a2:	d004      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3b6>
 80086a4:	f241 41ea 	movw	r1, #5354	; 0x14ea
 80086a8:	4874      	ldr	r0, [pc, #464]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 80086aa:	f7f9 ffc6 	bl	800263a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b0f      	cmp	r3, #15
 80086b4:	d904      	bls.n	80086c0 <HAL_TIM_ConfigClockSource+0x3c8>
 80086b6:	f241 41eb 	movw	r1, #5355	; 0x14eb
 80086ba:	4870      	ldr	r0, [pc, #448]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 80086bc:	f7f9 ffbd 	bl	800263a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6899      	ldr	r1, [r3, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f000 fd0e 	bl	80090f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086e2:	609a      	str	r2, [r3, #8]
      break;
 80086e4:	e16a      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a5f      	ldr	r2, [pc, #380]	; (8008868 <HAL_TIM_ConfigClockSource+0x570>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d027      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f8:	d022      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a5b      	ldr	r2, [pc, #364]	; (800886c <HAL_TIM_ConfigClockSource+0x574>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d01d      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a59      	ldr	r2, [pc, #356]	; (8008870 <HAL_TIM_ConfigClockSource+0x578>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d018      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a58      	ldr	r2, [pc, #352]	; (8008874 <HAL_TIM_ConfigClockSource+0x57c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d013      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a56      	ldr	r2, [pc, #344]	; (8008878 <HAL_TIM_ConfigClockSource+0x580>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00e      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a56      	ldr	r2, [pc, #344]	; (8008880 <HAL_TIM_ConfigClockSource+0x588>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d009      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a54      	ldr	r2, [pc, #336]	; (8008884 <HAL_TIM_ConfigClockSource+0x58c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d004      	beq.n	8008740 <HAL_TIM_ConfigClockSource+0x448>
 8008736:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800873a:	4850      	ldr	r0, [pc, #320]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 800873c:	f7f9 ff7d 	bl	800263a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008748:	d014      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x47c>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d010      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x47c>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00c      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x47c>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d008      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x47c>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b0a      	cmp	r3, #10
 8008768:	d004      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x47c>
 800876a:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800876e:	4843      	ldr	r0, [pc, #268]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 8008770:	f7f9 ff63 	bl	800263a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	2b0f      	cmp	r3, #15
 800877a:	d904      	bls.n	8008786 <HAL_TIM_ConfigClockSource+0x48e>
 800877c:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8008780:	483e      	ldr	r0, [pc, #248]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 8008782:	f7f9 ff5a 	bl	800263a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6859      	ldr	r1, [r3, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	461a      	mov	r2, r3
 8008794:	f000 fc32 	bl	8008ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2150      	movs	r1, #80	; 0x50
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fc8b 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 80087a4:	e10a      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a2f      	ldr	r2, [pc, #188]	; (8008868 <HAL_TIM_ConfigClockSource+0x570>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d027      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b8:	d022      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a2b      	ldr	r2, [pc, #172]	; (800886c <HAL_TIM_ConfigClockSource+0x574>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d01d      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a29      	ldr	r2, [pc, #164]	; (8008870 <HAL_TIM_ConfigClockSource+0x578>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d018      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a28      	ldr	r2, [pc, #160]	; (8008874 <HAL_TIM_ConfigClockSource+0x57c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a26      	ldr	r2, [pc, #152]	; (8008878 <HAL_TIM_ConfigClockSource+0x580>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00e      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a26      	ldr	r2, [pc, #152]	; (8008880 <HAL_TIM_ConfigClockSource+0x588>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d009      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a24      	ldr	r2, [pc, #144]	; (8008884 <HAL_TIM_ConfigClockSource+0x58c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x508>
 80087f6:	f241 510a 	movw	r1, #5386	; 0x150a
 80087fa:	4820      	ldr	r0, [pc, #128]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 80087fc:	f7f9 ff1d 	bl	800263a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008808:	d014      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0x53c>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d010      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0x53c>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00c      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0x53c>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d008      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0x53c>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2b0a      	cmp	r3, #10
 8008828:	d004      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0x53c>
 800882a:	f241 510d 	movw	r1, #5389	; 0x150d
 800882e:	4813      	ldr	r0, [pc, #76]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 8008830:	f7f9 ff03 	bl	800263a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	2b0f      	cmp	r3, #15
 800883a:	d904      	bls.n	8008846 <HAL_TIM_ConfigClockSource+0x54e>
 800883c:	f241 510e 	movw	r1, #5390	; 0x150e
 8008840:	480e      	ldr	r0, [pc, #56]	; (800887c <HAL_TIM_ConfigClockSource+0x584>)
 8008842:	f7f9 fefa 	bl	800263a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6859      	ldr	r1, [r3, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	461a      	mov	r2, r3
 8008854:	f000 fc01 	bl	800905a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2160      	movs	r1, #96	; 0x60
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fc2b 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 8008864:	e0aa      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x6c4>
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40010400 	.word	0x40010400
 800887c:	08010154 	.word	0x08010154
 8008880:	40014000 	.word	0x40014000
 8008884:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a52      	ldr	r2, [pc, #328]	; (80089d8 <HAL_TIM_ConfigClockSource+0x6e0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d027      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889a:	d022      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a4e      	ldr	r2, [pc, #312]	; (80089dc <HAL_TIM_ConfigClockSource+0x6e4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01d      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a4d      	ldr	r2, [pc, #308]	; (80089e0 <HAL_TIM_ConfigClockSource+0x6e8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d018      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a4b      	ldr	r2, [pc, #300]	; (80089e4 <HAL_TIM_ConfigClockSource+0x6ec>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a4a      	ldr	r2, [pc, #296]	; (80089e8 <HAL_TIM_ConfigClockSource+0x6f0>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a48      	ldr	r2, [pc, #288]	; (80089ec <HAL_TIM_ConfigClockSource+0x6f4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a47      	ldr	r2, [pc, #284]	; (80089f0 <HAL_TIM_ConfigClockSource+0x6f8>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x5ea>
 80088d8:	f241 511a 	movw	r1, #5402	; 0x151a
 80088dc:	4845      	ldr	r0, [pc, #276]	; (80089f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 80088de:	f7f9 feac 	bl	800263a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ea:	d014      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x61e>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x61e>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00c      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x61e>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d008      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x61e>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2b0a      	cmp	r3, #10
 800890a:	d004      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x61e>
 800890c:	f241 511d 	movw	r1, #5405	; 0x151d
 8008910:	4838      	ldr	r0, [pc, #224]	; (80089f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008912:	f7f9 fe92 	bl	800263a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b0f      	cmp	r3, #15
 800891c:	d904      	bls.n	8008928 <HAL_TIM_ConfigClockSource+0x630>
 800891e:	f241 511e 	movw	r1, #5406	; 0x151e
 8008922:	4834      	ldr	r0, [pc, #208]	; (80089f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 8008924:	f7f9 fe89 	bl	800263a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	6859      	ldr	r1, [r3, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	461a      	mov	r2, r3
 8008936:	f000 fb61 	bl	8008ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2140      	movs	r1, #64	; 0x40
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fbba 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 8008946:	e039      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a22      	ldr	r2, [pc, #136]	; (80089d8 <HAL_TIM_ConfigClockSource+0x6e0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d027      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800895a:	d022      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a1e      	ldr	r2, [pc, #120]	; (80089dc <HAL_TIM_ConfigClockSource+0x6e4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01d      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a1d      	ldr	r2, [pc, #116]	; (80089e0 <HAL_TIM_ConfigClockSource+0x6e8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d018      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1a      	ldr	r2, [pc, #104]	; (80089e8 <HAL_TIM_ConfigClockSource+0x6f0>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a18      	ldr	r2, [pc, #96]	; (80089ec <HAL_TIM_ConfigClockSource+0x6f4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <HAL_TIM_ConfigClockSource+0x6f8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x6aa>
 8008998:	f241 512d 	movw	r1, #5421	; 0x152d
 800899c:	4815      	ldr	r0, [pc, #84]	; (80089f4 <HAL_TIM_ConfigClockSource+0x6fc>)
 800899e:	f7f9 fe4c 	bl	800263a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f000 fb84 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 80089b2:	e003      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
      break;
 80089b8:	e000      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 80089ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	40010000 	.word	0x40010000
 80089dc:	40000400 	.word	0x40000400
 80089e0:	40000800 	.word	0x40000800
 80089e4:	40000c00 	.word	0x40000c00
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40001800 	.word	0x40001800
 80089f4:	08010154 	.word	0x08010154

080089f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a40      	ldr	r2, [pc, #256]	; (8008b5c <TIM_Base_SetConfig+0x114>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d013      	beq.n	8008a88 <TIM_Base_SetConfig+0x40>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a66:	d00f      	beq.n	8008a88 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a3d      	ldr	r2, [pc, #244]	; (8008b60 <TIM_Base_SetConfig+0x118>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d00b      	beq.n	8008a88 <TIM_Base_SetConfig+0x40>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a3c      	ldr	r2, [pc, #240]	; (8008b64 <TIM_Base_SetConfig+0x11c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d007      	beq.n	8008a88 <TIM_Base_SetConfig+0x40>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a3b      	ldr	r2, [pc, #236]	; (8008b68 <TIM_Base_SetConfig+0x120>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d003      	beq.n	8008a88 <TIM_Base_SetConfig+0x40>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a3a      	ldr	r2, [pc, #232]	; (8008b6c <TIM_Base_SetConfig+0x124>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d108      	bne.n	8008a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a2f      	ldr	r2, [pc, #188]	; (8008b5c <TIM_Base_SetConfig+0x114>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d02b      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa8:	d027      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a2c      	ldr	r2, [pc, #176]	; (8008b60 <TIM_Base_SetConfig+0x118>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d023      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a2b      	ldr	r2, [pc, #172]	; (8008b64 <TIM_Base_SetConfig+0x11c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d01f      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a2a      	ldr	r2, [pc, #168]	; (8008b68 <TIM_Base_SetConfig+0x120>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d01b      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a29      	ldr	r2, [pc, #164]	; (8008b6c <TIM_Base_SetConfig+0x124>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d017      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a28      	ldr	r2, [pc, #160]	; (8008b70 <TIM_Base_SetConfig+0x128>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d013      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a27      	ldr	r2, [pc, #156]	; (8008b74 <TIM_Base_SetConfig+0x12c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d00f      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a26      	ldr	r2, [pc, #152]	; (8008b78 <TIM_Base_SetConfig+0x130>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00b      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a25      	ldr	r2, [pc, #148]	; (8008b7c <TIM_Base_SetConfig+0x134>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d007      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a24      	ldr	r2, [pc, #144]	; (8008b80 <TIM_Base_SetConfig+0x138>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_Base_SetConfig+0xb2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a23      	ldr	r2, [pc, #140]	; (8008b84 <TIM_Base_SetConfig+0x13c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d108      	bne.n	8008b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a0a      	ldr	r2, [pc, #40]	; (8008b5c <TIM_Base_SetConfig+0x114>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_Base_SetConfig+0xf8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <TIM_Base_SetConfig+0x124>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d103      	bne.n	8008b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	615a      	str	r2, [r3, #20]
}
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40000400 	.word	0x40000400
 8008b64:	40000800 	.word	0x40000800
 8008b68:	40000c00 	.word	0x40000c00
 8008b6c:	40010400 	.word	0x40010400
 8008b70:	40014000 	.word	0x40014000
 8008b74:	40014400 	.word	0x40014400
 8008b78:	40014800 	.word	0x40014800
 8008b7c:	40001800 	.word	0x40001800
 8008b80:	40001c00 	.word	0x40001c00
 8008b84:	40002000 	.word	0x40002000

08008b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f023 0201 	bic.w	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f023 0302 	bic.w	r3, r3, #2
 8008bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a34      	ldr	r2, [pc, #208]	; (8008cb0 <TIM_OC1_SetConfig+0x128>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d003      	beq.n	8008bec <TIM_OC1_SetConfig+0x64>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a33      	ldr	r2, [pc, #204]	; (8008cb4 <TIM_OC1_SetConfig+0x12c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d119      	bne.n	8008c20 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <TIM_OC1_SetConfig+0x7e>
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d004      	beq.n	8008c06 <TIM_OC1_SetConfig+0x7e>
 8008bfc:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8008c00:	482d      	ldr	r0, [pc, #180]	; (8008cb8 <TIM_OC1_SetConfig+0x130>)
 8008c02:	f7f9 fd1a 	bl	800263a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f023 0308 	bic.w	r3, r3, #8
 8008c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f023 0304 	bic.w	r3, r3, #4
 8008c1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a23      	ldr	r2, [pc, #140]	; (8008cb0 <TIM_OC1_SetConfig+0x128>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_OC1_SetConfig+0xa8>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a22      	ldr	r2, [pc, #136]	; (8008cb4 <TIM_OC1_SetConfig+0x12c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d12d      	bne.n	8008c8c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c38:	d008      	beq.n	8008c4c <TIM_OC1_SetConfig+0xc4>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <TIM_OC1_SetConfig+0xc4>
 8008c42:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 8008c46:	481c      	ldr	r0, [pc, #112]	; (8008cb8 <TIM_OC1_SetConfig+0x130>)
 8008c48:	f7f9 fcf7 	bl	800263a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c54:	d008      	beq.n	8008c68 <TIM_OC1_SetConfig+0xe0>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <TIM_OC1_SetConfig+0xe0>
 8008c5e:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8008c62:	4815      	ldr	r0, [pc, #84]	; (8008cb8 <TIM_OC1_SetConfig+0x130>)
 8008c64:	f7f9 fce9 	bl	800263a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	621a      	str	r2, [r3, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40010400 	.word	0x40010400
 8008cb8:	08010154 	.word	0x08010154

08008cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f023 0210 	bic.w	r2, r3, #16
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f023 0320 	bic.w	r3, r3, #32
 8008d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a35      	ldr	r2, [pc, #212]	; (8008dec <TIM_OC2_SetConfig+0x130>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC2_SetConfig+0x68>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a34      	ldr	r2, [pc, #208]	; (8008df0 <TIM_OC2_SetConfig+0x134>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d11a      	bne.n	8008d5a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d008      	beq.n	8008d3e <TIM_OC2_SetConfig+0x82>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d004      	beq.n	8008d3e <TIM_OC2_SetConfig+0x82>
 8008d34:	f641 3116 	movw	r1, #6934	; 0x1b16
 8008d38:	482e      	ldr	r0, [pc, #184]	; (8008df4 <TIM_OC2_SetConfig+0x138>)
 8008d3a:	f7f9 fc7e 	bl	800263a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d58:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a23      	ldr	r2, [pc, #140]	; (8008dec <TIM_OC2_SetConfig+0x130>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_OC2_SetConfig+0xae>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a22      	ldr	r2, [pc, #136]	; (8008df0 <TIM_OC2_SetConfig+0x134>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d12f      	bne.n	8008dca <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d72:	d008      	beq.n	8008d86 <TIM_OC2_SetConfig+0xca>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d004      	beq.n	8008d86 <TIM_OC2_SetConfig+0xca>
 8008d7c:	f641 3124 	movw	r1, #6948	; 0x1b24
 8008d80:	481c      	ldr	r0, [pc, #112]	; (8008df4 <TIM_OC2_SetConfig+0x138>)
 8008d82:	f7f9 fc5a 	bl	800263a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d8e:	d008      	beq.n	8008da2 <TIM_OC2_SetConfig+0xe6>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d004      	beq.n	8008da2 <TIM_OC2_SetConfig+0xe6>
 8008d98:	f641 3125 	movw	r1, #6949	; 0x1b25
 8008d9c:	4815      	ldr	r0, [pc, #84]	; (8008df4 <TIM_OC2_SetConfig+0x138>)
 8008d9e:	f7f9 fc4c 	bl	800263a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	621a      	str	r2, [r3, #32]
}
 8008de4:	bf00      	nop
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40010400 	.word	0x40010400
 8008df4:	08010154 	.word	0x08010154

08008df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f023 0303 	bic.w	r3, r3, #3
 8008e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	021b      	lsls	r3, r3, #8
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a35      	ldr	r2, [pc, #212]	; (8008f28 <TIM_OC3_SetConfig+0x130>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d003      	beq.n	8008e5e <TIM_OC3_SetConfig+0x66>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a34      	ldr	r2, [pc, #208]	; (8008f2c <TIM_OC3_SetConfig+0x134>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d11a      	bne.n	8008e94 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d008      	beq.n	8008e78 <TIM_OC3_SetConfig+0x80>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d004      	beq.n	8008e78 <TIM_OC3_SetConfig+0x80>
 8008e6e:	f641 3161 	movw	r1, #7009	; 0x1b61
 8008e72:	482f      	ldr	r0, [pc, #188]	; (8008f30 <TIM_OC3_SetConfig+0x138>)
 8008e74:	f7f9 fbe1 	bl	800263a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a24      	ldr	r2, [pc, #144]	; (8008f28 <TIM_OC3_SetConfig+0x130>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_OC3_SetConfig+0xac>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a23      	ldr	r2, [pc, #140]	; (8008f2c <TIM_OC3_SetConfig+0x134>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d12f      	bne.n	8008f04 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eac:	d008      	beq.n	8008ec0 <TIM_OC3_SetConfig+0xc8>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <TIM_OC3_SetConfig+0xc8>
 8008eb6:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8008eba:	481d      	ldr	r0, [pc, #116]	; (8008f30 <TIM_OC3_SetConfig+0x138>)
 8008ebc:	f7f9 fbbd 	bl	800263a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec8:	d008      	beq.n	8008edc <TIM_OC3_SetConfig+0xe4>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d004      	beq.n	8008edc <TIM_OC3_SetConfig+0xe4>
 8008ed2:	f641 316f 	movw	r1, #7023	; 0x1b6f
 8008ed6:	4816      	ldr	r0, [pc, #88]	; (8008f30 <TIM_OC3_SetConfig+0x138>)
 8008ed8:	f7f9 fbaf 	bl	800263a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	011b      	lsls	r3, r3, #4
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	621a      	str	r2, [r3, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	40010000 	.word	0x40010000
 8008f2c:	40010400 	.word	0x40010400
 8008f30:	08010154 	.word	0x08010154

08008f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	031b      	lsls	r3, r3, #12
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a18      	ldr	r2, [pc, #96]	; (8008ff0 <TIM_OC4_SetConfig+0xbc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_OC4_SetConfig+0x68>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a17      	ldr	r2, [pc, #92]	; (8008ff4 <TIM_OC4_SetConfig+0xc0>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d117      	bne.n	8008fcc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa4:	d008      	beq.n	8008fb8 <TIM_OC4_SetConfig+0x84>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d004      	beq.n	8008fb8 <TIM_OC4_SetConfig+0x84>
 8008fae:	f641 31ad 	movw	r1, #7085	; 0x1bad
 8008fb2:	4811      	ldr	r0, [pc, #68]	; (8008ff8 <TIM_OC4_SetConfig+0xc4>)
 8008fb4:	f7f9 fb41 	bl	800263a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	019b      	lsls	r3, r3, #6
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	621a      	str	r2, [r3, #32]
}
 8008fe6:	bf00      	nop
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	40010000 	.word	0x40010000
 8008ff4:	40010400 	.word	0x40010400
 8008ff8:	08010154 	.word	0x08010154

08008ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	f023 0201 	bic.w	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4313      	orrs	r3, r2
 8009030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f023 030a 	bic.w	r3, r3, #10
 8009038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905a:	b480      	push	{r7}
 800905c:	b087      	sub	sp, #28
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0210 	bic.w	r2, r3, #16
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	031b      	lsls	r3, r3, #12
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009096:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4313      	orrs	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	621a      	str	r2, [r3, #32]
}
 80090ae:	bf00      	nop
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	f043 0307 	orr.w	r3, r3, #7
 80090dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	609a      	str	r2, [r3, #8]
}
 80090e4:	bf00      	nop
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800910a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	021a      	lsls	r2, r3, #8
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	431a      	orrs	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4313      	orrs	r3, r2
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	609a      	str	r2, [r3, #8]
}
 8009124:	bf00      	nop
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4a32      	ldr	r2, [pc, #200]	; (8009208 <TIM_CCxChannelCmd+0xd8>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d030      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914a:	d02c      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a2f      	ldr	r2, [pc, #188]	; (800920c <TIM_CCxChannelCmd+0xdc>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d028      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a2e      	ldr	r2, [pc, #184]	; (8009210 <TIM_CCxChannelCmd+0xe0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d024      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4a2d      	ldr	r2, [pc, #180]	; (8009214 <TIM_CCxChannelCmd+0xe4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d020      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a2c      	ldr	r2, [pc, #176]	; (8009218 <TIM_CCxChannelCmd+0xe8>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d01c      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4a2b      	ldr	r2, [pc, #172]	; (800921c <TIM_CCxChannelCmd+0xec>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d018      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a2a      	ldr	r2, [pc, #168]	; (8009220 <TIM_CCxChannelCmd+0xf0>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d014      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4a29      	ldr	r2, [pc, #164]	; (8009224 <TIM_CCxChannelCmd+0xf4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d010      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a28      	ldr	r2, [pc, #160]	; (8009228 <TIM_CCxChannelCmd+0xf8>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d00c      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4a27      	ldr	r2, [pc, #156]	; (800922c <TIM_CCxChannelCmd+0xfc>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d008      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a26      	ldr	r2, [pc, #152]	; (8009230 <TIM_CCxChannelCmd+0x100>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d004      	beq.n	80091a6 <TIM_CCxChannelCmd+0x76>
 800919c:	f641 5198 	movw	r1, #7576	; 0x1d98
 80091a0:	4824      	ldr	r0, [pc, #144]	; (8009234 <TIM_CCxChannelCmd+0x104>)
 80091a2:	f7f9 fa4a 	bl	800263a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d010      	beq.n	80091ce <TIM_CCxChannelCmd+0x9e>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d00d      	beq.n	80091ce <TIM_CCxChannelCmd+0x9e>
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d00a      	beq.n	80091ce <TIM_CCxChannelCmd+0x9e>
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2b0c      	cmp	r3, #12
 80091bc:	d007      	beq.n	80091ce <TIM_CCxChannelCmd+0x9e>
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b3c      	cmp	r3, #60	; 0x3c
 80091c2:	d004      	beq.n	80091ce <TIM_CCxChannelCmd+0x9e>
 80091c4:	f641 5199 	movw	r1, #7577	; 0x1d99
 80091c8:	481a      	ldr	r0, [pc, #104]	; (8009234 <TIM_CCxChannelCmd+0x104>)
 80091ca:	f7f9 fa36 	bl	800263a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f003 031f 	and.w	r3, r3, #31
 80091d4:	2201      	movs	r2, #1
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1a      	ldr	r2, [r3, #32]
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	43db      	mvns	r3, r3
 80091e4:	401a      	ands	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a1a      	ldr	r2, [r3, #32]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f003 031f 	and.w	r3, r3, #31
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	fa01 f303 	lsl.w	r3, r1, r3
 80091fa:	431a      	orrs	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	621a      	str	r2, [r3, #32]
}
 8009200:	bf00      	nop
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40010000 	.word	0x40010000
 800920c:	40000400 	.word	0x40000400
 8009210:	40000800 	.word	0x40000800
 8009214:	40000c00 	.word	0x40000c00
 8009218:	40010400 	.word	0x40010400
 800921c:	40014000 	.word	0x40014000
 8009220:	40014400 	.word	0x40014400
 8009224:	40014800 	.word	0x40014800
 8009228:	40001800 	.word	0x40001800
 800922c:	40001c00 	.word	0x40001c00
 8009230:	40002000 	.word	0x40002000
 8009234:	08010154 	.word	0x08010154

08009238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a61      	ldr	r2, [pc, #388]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d027      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009254:	d022      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a5d      	ldr	r2, [pc, #372]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d01d      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a5b      	ldr	r2, [pc, #364]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d018      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a5a      	ldr	r2, [pc, #360]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d013      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a58      	ldr	r2, [pc, #352]	; (80093dc <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00e      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a57      	ldr	r2, [pc, #348]	; (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d009      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a55      	ldr	r2, [pc, #340]	; (80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d004      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009292:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009296:	4854      	ldr	r0, [pc, #336]	; (80093e8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009298:	f7f9 f9cf 	bl	800263a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d020      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b10      	cmp	r3, #16
 80092aa:	d01c      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d018      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b30      	cmp	r3, #48	; 0x30
 80092ba:	d014      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b40      	cmp	r3, #64	; 0x40
 80092c2:	d010      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b50      	cmp	r3, #80	; 0x50
 80092ca:	d00c      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b60      	cmp	r3, #96	; 0x60
 80092d2:	d008      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b70      	cmp	r3, #112	; 0x70
 80092da:	d004      	beq.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80092dc:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80092e0:	4841      	ldr	r0, [pc, #260]	; (80093e8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80092e2:	f7f9 f9aa 	bl	800263a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b80      	cmp	r3, #128	; 0x80
 80092ec:	d008      	beq.n	8009300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d004      	beq.n	8009300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092f6:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80092fa:	483b      	ldr	r0, [pc, #236]	; (80093e8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80092fc:	f7f9 f99d 	bl	800263a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800930a:	2302      	movs	r3, #2
 800930c:	e05a      	b.n	80093c4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2202      	movs	r2, #2
 800931a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009334:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4313      	orrs	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d022      	beq.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d01d      	beq.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d018      	beq.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1a      	ldr	r2, [pc, #104]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d013      	beq.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a18      	ldr	r2, [pc, #96]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00e      	beq.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a19      	ldr	r2, [pc, #100]	; (80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d009      	beq.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a18      	ldr	r2, [pc, #96]	; (80093ec <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d004      	beq.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a17      	ldr	r2, [pc, #92]	; (80093f0 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d10c      	bne.n	80093b2 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	40010000 	.word	0x40010000
 80093d0:	40000400 	.word	0x40000400
 80093d4:	40000800 	.word	0x40000800
 80093d8:	40000c00 	.word	0x40000c00
 80093dc:	40001000 	.word	0x40001000
 80093e0:	40001400 	.word	0x40001400
 80093e4:	40010400 	.word	0x40010400
 80093e8:	0801018c 	.word	0x0801018c
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40001800 	.word	0x40001800

080093f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a5e      	ldr	r2, [pc, #376]	; (8009580 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d009      	beq.n	8009420 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a5c      	ldr	r2, [pc, #368]	; (8009584 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d004      	beq.n	8009420 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009416:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800941a:	485b      	ldr	r0, [pc, #364]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800941c:	f7f9 f90d 	bl	800263a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009428:	d008      	beq.n	800943c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8009432:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8009436:	4854      	ldr	r0, [pc, #336]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009438:	f7f9 f8ff 	bl	800263a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009444:	d008      	beq.n	8009458 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800944e:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8009452:	484d      	ldr	r0, [pc, #308]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009454:	f7f9 f8f1 	bl	800263a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d013      	beq.n	8009488 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009468:	d00e      	beq.n	8009488 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009472:	d009      	beq.n	8009488 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800947c:	d004      	beq.n	8009488 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800947e:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8009482:	4841      	ldr	r0, [pc, #260]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009484:	f7f9 f8d9 	bl	800263a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	2bff      	cmp	r3, #255	; 0xff
 800948e:	d904      	bls.n	800949a <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8009490:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8009494:	483c      	ldr	r0, [pc, #240]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009496:	f7f9 f8d0 	bl	800263a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a2:	d008      	beq.n	80094b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80094ac:	f240 71f3 	movw	r1, #2035	; 0x7f3
 80094b0:	4835      	ldr	r0, [pc, #212]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80094b2:	f7f9 f8c2 	bl	800263a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d009      	beq.n	80094d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c6:	d004      	beq.n	80094d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80094c8:	f240 71f4 	movw	r1, #2036	; 0x7f4
 80094cc:	482e      	ldr	r0, [pc, #184]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80094ce:	f7f9 f8b4 	bl	800263a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094da:	d008      	beq.n	80094ee <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80094e4:	f240 71f5 	movw	r1, #2037	; 0x7f5
 80094e8:	4827      	ldr	r0, [pc, #156]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80094ea:	f7f9 f8a6 	bl	800263a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d101      	bne.n	80094fc <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 80094f8:	2302      	movs	r3, #2
 80094fa:	e03d      	b.n	8009578 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4313      	orrs	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	40010000 	.word	0x40010000
 8009584:	40010400 	.word	0x40010400
 8009588:	0801018c 	.word	0x0801018c

0800958c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e0be      	b.n	8009744 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d03b      	beq.n	8009646 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a5e      	ldr	r2, [pc, #376]	; (800974c <HAL_UART_Init+0x198>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d01d      	beq.n	8009614 <HAL_UART_Init+0x60>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a5c      	ldr	r2, [pc, #368]	; (8009750 <HAL_UART_Init+0x19c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d018      	beq.n	8009614 <HAL_UART_Init+0x60>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a5b      	ldr	r2, [pc, #364]	; (8009754 <HAL_UART_Init+0x1a0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d013      	beq.n	8009614 <HAL_UART_Init+0x60>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a59      	ldr	r2, [pc, #356]	; (8009758 <HAL_UART_Init+0x1a4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d00e      	beq.n	8009614 <HAL_UART_Init+0x60>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a58      	ldr	r2, [pc, #352]	; (800975c <HAL_UART_Init+0x1a8>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d009      	beq.n	8009614 <HAL_UART_Init+0x60>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a56      	ldr	r2, [pc, #344]	; (8009760 <HAL_UART_Init+0x1ac>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d004      	beq.n	8009614 <HAL_UART_Init+0x60>
 800960a:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800960e:	4855      	ldr	r0, [pc, #340]	; (8009764 <HAL_UART_Init+0x1b0>)
 8009610:	f7f9 f813 	bl	800263a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d037      	beq.n	800968c <HAL_UART_Init+0xd8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009624:	d032      	beq.n	800968c <HAL_UART_Init+0xd8>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800962e:	d02d      	beq.n	800968c <HAL_UART_Init+0xd8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009638:	d028      	beq.n	800968c <HAL_UART_Init+0xd8>
 800963a:	f240 1173 	movw	r1, #371	; 0x173
 800963e:	4849      	ldr	r0, [pc, #292]	; (8009764 <HAL_UART_Init+0x1b0>)
 8009640:	f7f8 fffb 	bl	800263a <assert_failed>
 8009644:	e022      	b.n	800968c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a40      	ldr	r2, [pc, #256]	; (800974c <HAL_UART_Init+0x198>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d01d      	beq.n	800968c <HAL_UART_Init+0xd8>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a3e      	ldr	r2, [pc, #248]	; (8009750 <HAL_UART_Init+0x19c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d018      	beq.n	800968c <HAL_UART_Init+0xd8>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a3d      	ldr	r2, [pc, #244]	; (8009754 <HAL_UART_Init+0x1a0>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d013      	beq.n	800968c <HAL_UART_Init+0xd8>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a3b      	ldr	r2, [pc, #236]	; (8009758 <HAL_UART_Init+0x1a4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d00e      	beq.n	800968c <HAL_UART_Init+0xd8>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a3a      	ldr	r2, [pc, #232]	; (800975c <HAL_UART_Init+0x1a8>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d009      	beq.n	800968c <HAL_UART_Init+0xd8>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a38      	ldr	r2, [pc, #224]	; (8009760 <HAL_UART_Init+0x1ac>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_UART_Init+0xd8>
 8009682:	f240 1177 	movw	r1, #375	; 0x177
 8009686:	4837      	ldr	r0, [pc, #220]	; (8009764 <HAL_UART_Init+0x1b0>)
 8009688:	f7f8 ffd7 	bl	800263a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <HAL_UART_Init+0xf4>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969c:	d004      	beq.n	80096a8 <HAL_UART_Init+0xf4>
 800969e:	f240 1179 	movw	r1, #377	; 0x179
 80096a2:	4830      	ldr	r0, [pc, #192]	; (8009764 <HAL_UART_Init+0x1b0>)
 80096a4:	f7f8 ffc9 	bl	800263a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d009      	beq.n	80096c4 <HAL_UART_Init+0x110>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b8:	d004      	beq.n	80096c4 <HAL_UART_Init+0x110>
 80096ba:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80096be:	4829      	ldr	r0, [pc, #164]	; (8009764 <HAL_UART_Init+0x1b0>)
 80096c0:	f7f8 ffbb 	bl	800263a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7f9 fb83 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2224      	movs	r2, #36	; 0x24
 80096e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fd8e 	bl	800a218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	691a      	ldr	r2, [r3, #16]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800970a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	695a      	ldr	r2, [r3, #20]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800971a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800972a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2220      	movs	r2, #32
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	40011000 	.word	0x40011000
 8009750:	40004400 	.word	0x40004400
 8009754:	40004800 	.word	0x40004800
 8009758:	40004c00 	.word	0x40004c00
 800975c:	40005000 	.word	0x40005000
 8009760:	40011400 	.word	0x40011400
 8009764:	080101c8 	.word	0x080101c8

08009768 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	; 0x28
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	4613      	mov	r3, r2
 8009776:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b20      	cmp	r3, #32
 8009786:	f040 808c 	bne.w	80098a2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <HAL_UART_Receive+0x2e>
 8009790:	88fb      	ldrh	r3, [r7, #6]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e084      	b.n	80098a4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_UART_Receive+0x40>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e07d      	b.n	80098a4 <HAL_UART_Receive+0x13c>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2222      	movs	r2, #34	; 0x22
 80097ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097c4:	f7f9 fcf2 	bl	80031ac <HAL_GetTick>
 80097c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097de:	d108      	bne.n	80097f2 <HAL_UART_Receive+0x8a>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d104      	bne.n	80097f2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	61bb      	str	r3, [r7, #24]
 80097f0:	e003      	b.n	80097fa <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009802:	e043      	b.n	800988c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2200      	movs	r2, #0
 800980c:	2120      	movs	r1, #32
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f000 fafa 	bl	8009e08 <UART_WaitOnFlagUntilTimeout>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e042      	b.n	80098a4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10c      	bne.n	800983e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	b29b      	uxth	r3, r3
 800982c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009830:	b29a      	uxth	r2, r3
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	3302      	adds	r3, #2
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	e01f      	b.n	800987e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009846:	d007      	beq.n	8009858 <HAL_UART_Receive+0xf0>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <HAL_UART_Receive+0xfe>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d106      	bne.n	8009866 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	b2da      	uxtb	r2, r3
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	e008      	b.n	8009878 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009872:	b2da      	uxtb	r2, r3
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	3301      	adds	r3, #1
 800987c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009882:	b29b      	uxth	r3, r3
 8009884:	3b01      	subs	r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009890:	b29b      	uxth	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1b6      	bne.n	8009804 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2220      	movs	r2, #32
 800989a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	e000      	b.n	80098a4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80098a2:	2302      	movs	r3, #2
  }
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3720      	adds	r7, #32
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b0ba      	sub	sp, #232	; 0xe8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80098ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10f      	bne.n	8009912 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d009      	beq.n	8009912 <HAL_UART_IRQHandler+0x66>
 80098fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fbc9 	bl	800a0a2 <UART_Receive_IT>
      return;
 8009910:	e256      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 80de 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x22c>
 800991c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80d1 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <HAL_UART_IRQHandler+0xae>
 8009942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	f043 0201 	orr.w	r2, r3, #1
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800995a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <HAL_UART_IRQHandler+0xd2>
 8009966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	f043 0202 	orr.w	r2, r3, #2
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800997e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <HAL_UART_IRQHandler+0xf6>
 800998a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	f043 0204 	orr.w	r2, r3, #4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a6:	f003 0308 	and.w	r3, r3, #8
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d011      	beq.n	80099d2 <HAL_UART_IRQHandler+0x126>
 80099ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d105      	bne.n	80099c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80099ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	f043 0208 	orr.w	r2, r3, #8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 81ed 	beq.w	8009db6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e0:	f003 0320 	and.w	r3, r3, #32
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d008      	beq.n	80099fa <HAL_UART_IRQHandler+0x14e>
 80099e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fb54 	bl	800a0a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	bf0c      	ite	eq
 8009a08:	2301      	moveq	r3, #1
 8009a0a:	2300      	movne	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	f003 0308 	and.w	r3, r3, #8
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d103      	bne.n	8009a26 <HAL_UART_IRQHandler+0x17a>
 8009a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d04f      	beq.n	8009ac6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa5c 	bl	8009ee4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a36:	2b40      	cmp	r3, #64	; 0x40
 8009a38:	d141      	bne.n	8009abe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3314      	adds	r3, #20
 8009a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3314      	adds	r3, #20
 8009a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1d9      	bne.n	8009a3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d013      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	4a7d      	ldr	r2, [pc, #500]	; (8009c88 <HAL_UART_IRQHandler+0x3dc>)
 8009a94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f9 ff82 	bl	80039a4 <HAL_DMA_Abort_IT>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d016      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab4:	e00e      	b.n	8009ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f990 	bl	8009ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abc:	e00a      	b.n	8009ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f98c 	bl	8009ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac4:	e006      	b.n	8009ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f988 	bl	8009ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ad2:	e170      	b.n	8009db6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad4:	bf00      	nop
    return;
 8009ad6:	e16e      	b.n	8009db6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	f040 814a 	bne.w	8009d76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae6:	f003 0310 	and.w	r3, r3, #16
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 8143 	beq.w	8009d76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af4:	f003 0310 	and.w	r3, r3, #16
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 813c 	beq.w	8009d76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009afe:	2300      	movs	r3, #0
 8009b00:	60bb      	str	r3, [r7, #8]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60bb      	str	r3, [r7, #8]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	60bb      	str	r3, [r7, #8]
 8009b12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1e:	2b40      	cmp	r3, #64	; 0x40
 8009b20:	f040 80b4 	bne.w	8009c8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 8140 	beq.w	8009dba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b42:	429a      	cmp	r2, r3
 8009b44:	f080 8139 	bcs.w	8009dba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b5a:	f000 8088 	beq.w	8009c6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	330c      	adds	r3, #12
 8009b86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1d9      	bne.n	8009b5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3314      	adds	r3, #20
 8009bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bbc:	f023 0301 	bic.w	r3, r3, #1
 8009bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3314      	adds	r3, #20
 8009bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e1      	bne.n	8009baa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3314      	adds	r3, #20
 8009bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3314      	adds	r3, #20
 8009c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e3      	bne.n	8009be6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	330c      	adds	r3, #12
 8009c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c3e:	f023 0310 	bic.w	r3, r3, #16
 8009c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	330c      	adds	r3, #12
 8009c4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c50:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e3      	bne.n	8009c2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f9 fe2b 	bl	80038c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f8b6 	bl	8009df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c84:	e099      	b.n	8009dba <HAL_UART_IRQHandler+0x50e>
 8009c86:	bf00      	nop
 8009c88:	08009fab 	.word	0x08009fab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 808b 	beq.w	8009dbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8086 	beq.w	8009dbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	330c      	adds	r3, #12
 8009cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009cd6:	647a      	str	r2, [r7, #68]	; 0x44
 8009cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e3      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3314      	adds	r3, #20
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3314      	adds	r3, #20
 8009d0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d0e:	633a      	str	r2, [r7, #48]	; 0x30
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e3      	bne.n	8009cea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	330c      	adds	r3, #12
 8009d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0310 	bic.w	r3, r3, #16
 8009d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	330c      	adds	r3, #12
 8009d50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009d54:	61fa      	str	r2, [r7, #28]
 8009d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	69b9      	ldr	r1, [r7, #24]
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	617b      	str	r3, [r7, #20]
   return(result);
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e3      	bne.n	8009d30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f83e 	bl	8009df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d74:	e023      	b.n	8009dbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d009      	beq.n	8009d96 <HAL_UART_IRQHandler+0x4ea>
 8009d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f91f 	bl	8009fd2 <UART_Transmit_IT>
    return;
 8009d94:	e014      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00e      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x514>
 8009da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d008      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f95f 	bl	800a072 <UART_EndTransmit_IT>
    return;
 8009db4:	e004      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
    return;
 8009db6:	bf00      	nop
 8009db8:	e002      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8009dba:	bf00      	nop
 8009dbc:	e000      	b.n	8009dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8009dbe:	bf00      	nop
  }
}
 8009dc0:	37e8      	adds	r7, #232	; 0xe8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop

08009dc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b090      	sub	sp, #64	; 0x40
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e18:	e050      	b.n	8009ebc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e20:	d04c      	beq.n	8009ebc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e28:	f7f9 f9c0 	bl	80031ac <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d241      	bcs.n	8009ebc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	330c      	adds	r3, #12
 8009e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e58:	637a      	str	r2, [r7, #52]	; 0x34
 8009e5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e5      	bne.n	8009e38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3314      	adds	r3, #20
 8009e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3314      	adds	r3, #20
 8009e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e8c:	623a      	str	r2, [r7, #32]
 8009e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	69f9      	ldr	r1, [r7, #28]
 8009e92:	6a3a      	ldr	r2, [r7, #32]
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e5      	bne.n	8009e6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e00f      	b.n	8009edc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	bf0c      	ite	eq
 8009ecc:	2301      	moveq	r3, #1
 8009ece:	2300      	movne	r3, #0
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d09f      	beq.n	8009e1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3740      	adds	r7, #64	; 0x40
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b095      	sub	sp, #84	; 0x54
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	330c      	adds	r3, #12
 8009f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f0c:	643a      	str	r2, [r7, #64]	; 0x40
 8009f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e5      	bne.n	8009eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3314      	adds	r3, #20
 8009f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	f023 0301 	bic.w	r3, r3, #1
 8009f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3314      	adds	r3, #20
 8009f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e5      	bne.n	8009f20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d119      	bne.n	8009f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	330c      	adds	r3, #12
 8009f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f023 0310 	bic.w	r3, r3, #16
 8009f72:	647b      	str	r3, [r7, #68]	; 0x44
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	330c      	adds	r3, #12
 8009f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f7c:	61ba      	str	r2, [r7, #24]
 8009f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	6979      	ldr	r1, [r7, #20]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	613b      	str	r3, [r7, #16]
   return(result);
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e5      	bne.n	8009f5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f9e:	bf00      	nop
 8009fa0:	3754      	adds	r7, #84	; 0x54
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff ff09 	bl	8009ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fca:	bf00      	nop
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b21      	cmp	r3, #33	; 0x21
 8009fe4:	d13e      	bne.n	800a064 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fee:	d114      	bne.n	800a01a <UART_Transmit_IT+0x48>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d110      	bne.n	800a01a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a00c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	1c9a      	adds	r2, r3, #2
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	621a      	str	r2, [r3, #32]
 800a018:	e008      	b.n	800a02c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	1c59      	adds	r1, r3, #1
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	6211      	str	r1, [r2, #32]
 800a024:	781a      	ldrb	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a030:	b29b      	uxth	r3, r3
 800a032:	3b01      	subs	r3, #1
 800a034:	b29b      	uxth	r3, r3
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	4619      	mov	r1, r3
 800a03a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10f      	bne.n	800a060 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a04e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a05e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	e000      	b.n	800a066 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a064:	2302      	movs	r3, #2
  }
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a088:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff fe98 	bl	8009dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b08c      	sub	sp, #48	; 0x30
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b22      	cmp	r3, #34	; 0x22
 800a0b4:	f040 80ab 	bne.w	800a20e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c0:	d117      	bne.n	800a0f2 <UART_Receive_IT+0x50>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d113      	bne.n	800a0f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	1c9a      	adds	r2, r3, #2
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	629a      	str	r2, [r3, #40]	; 0x28
 800a0f0:	e026      	b.n	800a140 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a104:	d007      	beq.n	800a116 <UART_Receive_IT+0x74>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <UART_Receive_IT+0x82>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d106      	bne.n	800a124 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	e008      	b.n	800a136 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a130:	b2da      	uxtb	r2, r3
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	b29b      	uxth	r3, r3
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	4619      	mov	r1, r3
 800a14e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a150:	2b00      	cmp	r3, #0
 800a152:	d15a      	bne.n	800a20a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0220 	bic.w	r2, r2, #32
 800a162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	695a      	ldr	r2, [r3, #20]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f022 0201 	bic.w	r2, r2, #1
 800a182:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2220      	movs	r2, #32
 800a188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a190:	2b01      	cmp	r3, #1
 800a192:	d135      	bne.n	800a200 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f023 0310 	bic.w	r3, r3, #16
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	330c      	adds	r3, #12
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	623a      	str	r2, [r7, #32]
 800a1bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	69f9      	ldr	r1, [r7, #28]
 800a1c0:	6a3a      	ldr	r2, [r7, #32]
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e5      	bne.n	800a19a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0310 	and.w	r3, r3, #16
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d10a      	bne.n	800a1f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff fdf9 	bl	8009df0 <HAL_UARTEx_RxEventCallback>
 800a1fe:	e002      	b.n	800a206 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7f6 ff49 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	e002      	b.n	800a210 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	e000      	b.n	800a210 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a20e:	2302      	movs	r3, #2
  }
}
 800a210:	4618      	mov	r0, r3
 800a212:	3730      	adds	r7, #48	; 0x30
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	b09f      	sub	sp, #124	; 0x7c
 800a21e:	af00      	add	r7, sp, #0
 800a220:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	4b9b      	ldr	r3, [pc, #620]	; (800a494 <UART_SetConfig+0x27c>)
 800a228:	429a      	cmp	r2, r3
 800a22a:	d904      	bls.n	800a236 <UART_SetConfig+0x1e>
 800a22c:	f640 6156 	movw	r1, #3670	; 0xe56
 800a230:	4899      	ldr	r0, [pc, #612]	; (800a498 <UART_SetConfig+0x280>)
 800a232:	f7f8 fa02 	bl	800263a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <UART_SetConfig+0x3a>
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a246:	d004      	beq.n	800a252 <UART_SetConfig+0x3a>
 800a248:	f640 6157 	movw	r1, #3671	; 0xe57
 800a24c:	4892      	ldr	r0, [pc, #584]	; (800a498 <UART_SetConfig+0x280>)
 800a24e:	f7f8 f9f4 	bl	800263a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00e      	beq.n	800a278 <UART_SetConfig+0x60>
 800a25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a262:	d009      	beq.n	800a278 <UART_SetConfig+0x60>
 800a264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a26c:	d004      	beq.n	800a278 <UART_SetConfig+0x60>
 800a26e:	f640 6158 	movw	r1, #3672	; 0xe58
 800a272:	4889      	ldr	r0, [pc, #548]	; (800a498 <UART_SetConfig+0x280>)
 800a274:	f7f8 f9e1 	bl	800263a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a27a:	695a      	ldr	r2, [r3, #20]
 800a27c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800a280:	4013      	ands	r3, r2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <UART_SetConfig+0x76>
 800a286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <UART_SetConfig+0x80>
 800a28e:	f640 6159 	movw	r1, #3673	; 0xe59
 800a292:	4881      	ldr	r0, [pc, #516]	; (800a498 <UART_SetConfig+0x280>)
 800a294:	f7f8 f9d1 	bl	800263a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a4:	68d9      	ldr	r1, [r3, #12]
 800a2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	ea40 0301 	orr.w	r3, r0, r1
 800a2ae:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2d2:	f021 010c 	bic.w	r1, r1, #12
 800a2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ec:	6999      	ldr	r1, [r3, #24]
 800a2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	ea40 0301 	orr.w	r3, r0, r1
 800a2f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	4b67      	ldr	r3, [pc, #412]	; (800a49c <UART_SetConfig+0x284>)
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d004      	beq.n	800a30c <UART_SetConfig+0xf4>
 800a302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	4b66      	ldr	r3, [pc, #408]	; (800a4a0 <UART_SetConfig+0x288>)
 800a308:	429a      	cmp	r2, r3
 800a30a:	d103      	bne.n	800a314 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a30c:	f7fb fb4a 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 800a310:	6778      	str	r0, [r7, #116]	; 0x74
 800a312:	e002      	b.n	800a31a <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a314:	f7fb fb32 	bl	800597c <HAL_RCC_GetPCLK1Freq>
 800a318:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a322:	f040 80c1 	bne.w	800a4a8 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a328:	461c      	mov	r4, r3
 800a32a:	f04f 0500 	mov.w	r5, #0
 800a32e:	4622      	mov	r2, r4
 800a330:	462b      	mov	r3, r5
 800a332:	1891      	adds	r1, r2, r2
 800a334:	6439      	str	r1, [r7, #64]	; 0x40
 800a336:	415b      	adcs	r3, r3
 800a338:	647b      	str	r3, [r7, #68]	; 0x44
 800a33a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a33e:	1912      	adds	r2, r2, r4
 800a340:	eb45 0303 	adc.w	r3, r5, r3
 800a344:	f04f 0000 	mov.w	r0, #0
 800a348:	f04f 0100 	mov.w	r1, #0
 800a34c:	00d9      	lsls	r1, r3, #3
 800a34e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a352:	00d0      	lsls	r0, r2, #3
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	1911      	adds	r1, r2, r4
 800a35a:	6639      	str	r1, [r7, #96]	; 0x60
 800a35c:	416b      	adcs	r3, r5
 800a35e:	667b      	str	r3, [r7, #100]	; 0x64
 800a360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	461a      	mov	r2, r3
 800a366:	f04f 0300 	mov.w	r3, #0
 800a36a:	1891      	adds	r1, r2, r2
 800a36c:	63b9      	str	r1, [r7, #56]	; 0x38
 800a36e:	415b      	adcs	r3, r3
 800a370:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a372:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a376:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a37a:	f7f6 fb31 	bl	80009e0 <__aeabi_uldivmod>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4b48      	ldr	r3, [pc, #288]	; (800a4a4 <UART_SetConfig+0x28c>)
 800a384:	fba3 2302 	umull	r2, r3, r3, r2
 800a388:	095b      	lsrs	r3, r3, #5
 800a38a:	011e      	lsls	r6, r3, #4
 800a38c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a38e:	461c      	mov	r4, r3
 800a390:	f04f 0500 	mov.w	r5, #0
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	1891      	adds	r1, r2, r2
 800a39a:	6339      	str	r1, [r7, #48]	; 0x30
 800a39c:	415b      	adcs	r3, r3
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a3a4:	1912      	adds	r2, r2, r4
 800a3a6:	eb45 0303 	adc.w	r3, r5, r3
 800a3aa:	f04f 0000 	mov.w	r0, #0
 800a3ae:	f04f 0100 	mov.w	r1, #0
 800a3b2:	00d9      	lsls	r1, r3, #3
 800a3b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3b8:	00d0      	lsls	r0, r2, #3
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	1911      	adds	r1, r2, r4
 800a3c0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3c2:	416b      	adcs	r3, r5
 800a3c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f04f 0300 	mov.w	r3, #0
 800a3d0:	1891      	adds	r1, r2, r2
 800a3d2:	62b9      	str	r1, [r7, #40]	; 0x28
 800a3d4:	415b      	adcs	r3, r3
 800a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3dc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a3e0:	f7f6 fafe 	bl	80009e0 <__aeabi_uldivmod>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4b2e      	ldr	r3, [pc, #184]	; (800a4a4 <UART_SetConfig+0x28c>)
 800a3ea:	fba3 1302 	umull	r1, r3, r3, r2
 800a3ee:	095b      	lsrs	r3, r3, #5
 800a3f0:	2164      	movs	r1, #100	; 0x64
 800a3f2:	fb01 f303 	mul.w	r3, r1, r3
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	3332      	adds	r3, #50	; 0x32
 800a3fc:	4a29      	ldr	r2, [pc, #164]	; (800a4a4 <UART_SetConfig+0x28c>)
 800a3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a402:	095b      	lsrs	r3, r3, #5
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a40a:	441e      	add	r6, r3
 800a40c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a40e:	4618      	mov	r0, r3
 800a410:	f04f 0100 	mov.w	r1, #0
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	1894      	adds	r4, r2, r2
 800a41a:	623c      	str	r4, [r7, #32]
 800a41c:	415b      	adcs	r3, r3
 800a41e:	627b      	str	r3, [r7, #36]	; 0x24
 800a420:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a424:	1812      	adds	r2, r2, r0
 800a426:	eb41 0303 	adc.w	r3, r1, r3
 800a42a:	f04f 0400 	mov.w	r4, #0
 800a42e:	f04f 0500 	mov.w	r5, #0
 800a432:	00dd      	lsls	r5, r3, #3
 800a434:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a438:	00d4      	lsls	r4, r2, #3
 800a43a:	4622      	mov	r2, r4
 800a43c:	462b      	mov	r3, r5
 800a43e:	1814      	adds	r4, r2, r0
 800a440:	653c      	str	r4, [r7, #80]	; 0x50
 800a442:	414b      	adcs	r3, r1
 800a444:	657b      	str	r3, [r7, #84]	; 0x54
 800a446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	461a      	mov	r2, r3
 800a44c:	f04f 0300 	mov.w	r3, #0
 800a450:	1891      	adds	r1, r2, r2
 800a452:	61b9      	str	r1, [r7, #24]
 800a454:	415b      	adcs	r3, r3
 800a456:	61fb      	str	r3, [r7, #28]
 800a458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a45c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a460:	f7f6 fabe 	bl	80009e0 <__aeabi_uldivmod>
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4b0e      	ldr	r3, [pc, #56]	; (800a4a4 <UART_SetConfig+0x28c>)
 800a46a:	fba3 1302 	umull	r1, r3, r3, r2
 800a46e:	095b      	lsrs	r3, r3, #5
 800a470:	2164      	movs	r1, #100	; 0x64
 800a472:	fb01 f303 	mul.w	r3, r1, r3
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	3332      	adds	r3, #50	; 0x32
 800a47c:	4a09      	ldr	r2, [pc, #36]	; (800a4a4 <UART_SetConfig+0x28c>)
 800a47e:	fba2 2303 	umull	r2, r3, r2, r3
 800a482:	095b      	lsrs	r3, r3, #5
 800a484:	f003 0207 	and.w	r2, r3, #7
 800a488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4432      	add	r2, r6
 800a48e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a490:	e0c4      	b.n	800a61c <UART_SetConfig+0x404>
 800a492:	bf00      	nop
 800a494:	00a037a0 	.word	0x00a037a0
 800a498:	080101c8 	.word	0x080101c8
 800a49c:	40011000 	.word	0x40011000
 800a4a0:	40011400 	.word	0x40011400
 800a4a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4aa:	461c      	mov	r4, r3
 800a4ac:	f04f 0500 	mov.w	r5, #0
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	1891      	adds	r1, r2, r2
 800a4b6:	6139      	str	r1, [r7, #16]
 800a4b8:	415b      	adcs	r3, r3
 800a4ba:	617b      	str	r3, [r7, #20]
 800a4bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a4c0:	1912      	adds	r2, r2, r4
 800a4c2:	eb45 0303 	adc.w	r3, r5, r3
 800a4c6:	f04f 0000 	mov.w	r0, #0
 800a4ca:	f04f 0100 	mov.w	r1, #0
 800a4ce:	00d9      	lsls	r1, r3, #3
 800a4d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4d4:	00d0      	lsls	r0, r2, #3
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	eb12 0804 	adds.w	r8, r2, r4
 800a4de:	eb43 0905 	adc.w	r9, r3, r5
 800a4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f04f 0100 	mov.w	r1, #0
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	f04f 0300 	mov.w	r3, #0
 800a4f4:	008b      	lsls	r3, r1, #2
 800a4f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a4fa:	0082      	lsls	r2, r0, #2
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	4649      	mov	r1, r9
 800a500:	f7f6 fa6e 	bl	80009e0 <__aeabi_uldivmod>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4b47      	ldr	r3, [pc, #284]	; (800a628 <UART_SetConfig+0x410>)
 800a50a:	fba3 2302 	umull	r2, r3, r3, r2
 800a50e:	095b      	lsrs	r3, r3, #5
 800a510:	011e      	lsls	r6, r3, #4
 800a512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a514:	4618      	mov	r0, r3
 800a516:	f04f 0100 	mov.w	r1, #0
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	1894      	adds	r4, r2, r2
 800a520:	60bc      	str	r4, [r7, #8]
 800a522:	415b      	adcs	r3, r3
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a52a:	1812      	adds	r2, r2, r0
 800a52c:	eb41 0303 	adc.w	r3, r1, r3
 800a530:	f04f 0400 	mov.w	r4, #0
 800a534:	f04f 0500 	mov.w	r5, #0
 800a538:	00dd      	lsls	r5, r3, #3
 800a53a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a53e:	00d4      	lsls	r4, r2, #3
 800a540:	4622      	mov	r2, r4
 800a542:	462b      	mov	r3, r5
 800a544:	1814      	adds	r4, r2, r0
 800a546:	64bc      	str	r4, [r7, #72]	; 0x48
 800a548:	414b      	adcs	r3, r1
 800a54a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4618      	mov	r0, r3
 800a552:	f04f 0100 	mov.w	r1, #0
 800a556:	f04f 0200 	mov.w	r2, #0
 800a55a:	f04f 0300 	mov.w	r3, #0
 800a55e:	008b      	lsls	r3, r1, #2
 800a560:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a564:	0082      	lsls	r2, r0, #2
 800a566:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a56a:	f7f6 fa39 	bl	80009e0 <__aeabi_uldivmod>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4b2d      	ldr	r3, [pc, #180]	; (800a628 <UART_SetConfig+0x410>)
 800a574:	fba3 1302 	umull	r1, r3, r3, r2
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	2164      	movs	r1, #100	; 0x64
 800a57c:	fb01 f303 	mul.w	r3, r1, r3
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	3332      	adds	r3, #50	; 0x32
 800a586:	4a28      	ldr	r2, [pc, #160]	; (800a628 <UART_SetConfig+0x410>)
 800a588:	fba2 2303 	umull	r2, r3, r2, r3
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a592:	441e      	add	r6, r3
 800a594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a596:	4618      	mov	r0, r3
 800a598:	f04f 0100 	mov.w	r1, #0
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	1894      	adds	r4, r2, r2
 800a5a2:	603c      	str	r4, [r7, #0]
 800a5a4:	415b      	adcs	r3, r3
 800a5a6:	607b      	str	r3, [r7, #4]
 800a5a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ac:	1812      	adds	r2, r2, r0
 800a5ae:	eb41 0303 	adc.w	r3, r1, r3
 800a5b2:	f04f 0400 	mov.w	r4, #0
 800a5b6:	f04f 0500 	mov.w	r5, #0
 800a5ba:	00dd      	lsls	r5, r3, #3
 800a5bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5c0:	00d4      	lsls	r4, r2, #3
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	462b      	mov	r3, r5
 800a5c6:	eb12 0a00 	adds.w	sl, r2, r0
 800a5ca:	eb43 0b01 	adc.w	fp, r3, r1
 800a5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f04f 0100 	mov.w	r1, #0
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	008b      	lsls	r3, r1, #2
 800a5e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5e6:	0082      	lsls	r2, r0, #2
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	4659      	mov	r1, fp
 800a5ec:	f7f6 f9f8 	bl	80009e0 <__aeabi_uldivmod>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <UART_SetConfig+0x410>)
 800a5f6:	fba3 1302 	umull	r1, r3, r3, r2
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	2164      	movs	r1, #100	; 0x64
 800a5fe:	fb01 f303 	mul.w	r3, r1, r3
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	3332      	adds	r3, #50	; 0x32
 800a608:	4a07      	ldr	r2, [pc, #28]	; (800a628 <UART_SetConfig+0x410>)
 800a60a:	fba2 2303 	umull	r2, r3, r2, r3
 800a60e:	095b      	lsrs	r3, r3, #5
 800a610:	f003 020f 	and.w	r2, r3, #15
 800a614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4432      	add	r2, r6
 800a61a:	609a      	str	r2, [r3, #8]
}
 800a61c:	bf00      	nop
 800a61e:	377c      	adds	r7, #124	; 0x7c
 800a620:	46bd      	mov	sp, r7
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	bf00      	nop
 800a628:	51eb851f 	.word	0x51eb851f

0800a62c <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800a638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d105      	bne.n	800a64c <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800a640:	2101      	movs	r1, #1
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f001 f824 	bl	800b690 <VL53L1_data_init>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800a64c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d103      	bne.n	800a65c <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a65c:	2300      	movs	r3, #0
 800a65e:	73bb      	strb	r3, [r7, #14]
 800a660:	e012      	b.n	800a688 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800a662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d112      	bne.n	800a690 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	2201      	movs	r2, #1
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fbd3 	bl	800ae1e <VL53L1_SetLimitCheckEnable>
 800a678:	4603      	mov	r3, r0
 800a67a:	461a      	mov	r2, r3
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	4313      	orrs	r3, r2
 800a680:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	3301      	adds	r3, #1
 800a686:	73bb      	strb	r3, [r7, #14]
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d9e9      	bls.n	800a662 <VL53L1_DataInit+0x36>
 800a68e:	e000      	b.n	800a692 <VL53L1_DataInit+0x66>
		else
			break;
 800a690:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a692:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2203      	movs	r2, #3
 800a6ae:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a6b2:	2320      	movs	r3, #32
 800a6b4:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	7bba      	ldrb	r2, [r7, #14]
 800a6ba:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800a6bc:	2108      	movs	r1, #8
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f8f9 	bl	800a8b6 <VL53L1_SetPresetMode>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2208      	movs	r2, #8
 800a6cc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800a6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800a6e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f004 ffe0 	bl	800f6b2 <VL53L1_poll_for_boot_completion>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	603a      	str	r2, [r7, #0]
 800a70e:	71fb      	strb	r3, [r7, #7]
 800a710:	460b      	mov	r3, r1
 800a712:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a714:	2300      	movs	r3, #0
 800a716:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800a718:	4a2c      	ldr	r2, [pc, #176]	; (800a7cc <ComputeDevicePresetMode+0xc8>)
 800a71a:	f107 0310 	add.w	r3, r7, #16
 800a71e:	6812      	ldr	r2, [r2, #0]
 800a720:	4611      	mov	r1, r2
 800a722:	8019      	strh	r1, [r3, #0]
 800a724:	3302      	adds	r3, #2
 800a726:	0c12      	lsrs	r2, r2, #16
 800a728:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800a72a:	4a29      	ldr	r2, [pc, #164]	; (800a7d0 <ComputeDevicePresetMode+0xcc>)
 800a72c:	f107 030c 	add.w	r3, r7, #12
 800a730:	6812      	ldr	r2, [r2, #0]
 800a732:	4611      	mov	r1, r2
 800a734:	8019      	strh	r1, [r3, #0]
 800a736:	3302      	adds	r3, #2
 800a738:	0c12      	lsrs	r2, r2, #16
 800a73a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800a73c:	4a25      	ldr	r2, [pc, #148]	; (800a7d4 <ComputeDevicePresetMode+0xd0>)
 800a73e:	f107 0308 	add.w	r3, r7, #8
 800a742:	6812      	ldr	r2, [r2, #0]
 800a744:	4611      	mov	r1, r2
 800a746:	8019      	strh	r1, [r3, #0]
 800a748:	3302      	adds	r3, #2
 800a74a:	0c12      	lsrs	r2, r2, #16
 800a74c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2201      	movs	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800a754:	79bb      	ldrb	r3, [r7, #6]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d002      	beq.n	800a760 <ComputeDevicePresetMode+0x5c>
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d003      	beq.n	800a766 <ComputeDevicePresetMode+0x62>
 800a75e:	e005      	b.n	800a76c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	75bb      	strb	r3, [r7, #22]
		break;
 800a764:	e004      	b.n	800a770 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800a766:	2301      	movs	r3, #1
 800a768:	75bb      	strb	r3, [r7, #22]
		break;
 800a76a:	e001      	b.n	800a770 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800a76c:	2302      	movs	r3, #2
 800a76e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	2b08      	cmp	r3, #8
 800a774:	d017      	beq.n	800a7a6 <ComputeDevicePresetMode+0xa2>
 800a776:	2b08      	cmp	r3, #8
 800a778:	dc1e      	bgt.n	800a7b8 <ComputeDevicePresetMode+0xb4>
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d00a      	beq.n	800a794 <ComputeDevicePresetMode+0x90>
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d11a      	bne.n	800a7b8 <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800a782:	7dbb      	ldrb	r3, [r7, #22]
 800a784:	f107 0218 	add.w	r2, r7, #24
 800a788:	4413      	add	r3, r2
 800a78a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	701a      	strb	r2, [r3, #0]
		break;
 800a792:	e013      	b.n	800a7bc <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800a794:	7dbb      	ldrb	r3, [r7, #22]
 800a796:	f107 0218 	add.w	r2, r7, #24
 800a79a:	4413      	add	r3, r2
 800a79c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	701a      	strb	r2, [r3, #0]
		break;
 800a7a4:	e00a      	b.n	800a7bc <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800a7a6:	7dbb      	ldrb	r3, [r7, #22]
 800a7a8:	f107 0218 	add.w	r2, r7, #24
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	701a      	strb	r2, [r3, #0]
		break;
 800a7b6:	e001      	b.n	800a7bc <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a7b8:	23f8      	movs	r3, #248	; 0xf8
 800a7ba:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800a7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	08010230 	.word	0x08010230
 800a7d0:	08010234 	.word	0x08010234
 800a7d4:	08010238 	.word	0x08010238

0800a7d8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800a7d8:	b5b0      	push	{r4, r5, r7, lr}
 800a7da:	b08e      	sub	sp, #56	; 0x38
 800a7dc:	af04      	add	r7, sp, #16
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	72fb      	strb	r3, [r7, #11]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d002      	beq.n	800a80c <SetPresetMode+0x34>
 800a806:	7afb      	ldrb	r3, [r7, #11]
 800a808:	2b08      	cmp	r3, #8
 800a80a:	d103      	bne.n	800a814 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800a80c:	2340      	movs	r3, #64	; 0x40
 800a80e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a812:	e002      	b.n	800a81a <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800a814:	2320      	movs	r3, #32
 800a816:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800a81a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800a81e:	7ab9      	ldrb	r1, [r7, #10]
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff ff6e 	bl	800a704 <ComputeDevicePresetMode>
 800a828:	4603      	mov	r3, r0
 800a82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800a82e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a832:	2b00      	cmp	r3, #0
 800a834:	d112      	bne.n	800a85c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800a836:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800a83a:	f107 001c 	add.w	r0, r7, #28
 800a83e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800a842:	f107 0314 	add.w	r3, r7, #20
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	f107 0318 	add.w	r3, r7, #24
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	4603      	mov	r3, r0
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f001 f9dd 	bl	800bc10 <VL53L1_get_preset_mode_timing_cfg>
 800a856:	4603      	mov	r3, r0
 800a858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800a85c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a860:	2b00      	cmp	r3, #0
 800a862:	d112      	bne.n	800a88a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800a864:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800a868:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800a86a:	69fd      	ldr	r5, [r7, #28]
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	9102      	str	r1, [sp, #8]
 800a874:	9201      	str	r2, [sp, #4]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	462b      	mov	r3, r5
 800a87a:	4622      	mov	r2, r4
 800a87c:	4601      	mov	r1, r0
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f001 fa70 	bl	800bd64 <VL53L1_set_preset_mode>
 800a884:	4603      	mov	r3, r0
 800a886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800a88a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a898:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800a89a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d103      	bne.n	800a8aa <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	7afa      	ldrb	r2, [r7, #11]
 800a8a6:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800a8aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3728      	adds	r7, #40	; 0x28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bdb0      	pop	{r4, r5, r7, pc}

0800a8b6 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f003 fd2c 	bl	800e328 <VL53L1_low_power_auto_data_init>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800a8d4:	7bba      	ldrb	r2, [r7, #14]
 800a8d6:	78f9      	ldrb	r1, [r7, #3]
 800a8d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ff7b 	bl	800a7d8 <SetPresetMode>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800a8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d117      	bne.n	800a91e <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800a8ee:	78fb      	ldrb	r3, [r7, #3]
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d005      	beq.n	800a900 <VL53L1_SetPresetMode+0x4a>
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d002      	beq.n	800a900 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800a8fa:	78fb      	ldrb	r3, [r7, #3]
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d107      	bne.n	800a910 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800a900:	f24a 0128 	movw	r1, #41000	; 0xa028
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f891 	bl	800aa2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
 800a90e:	e006      	b.n	800a91e <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800a910:	f248 2135 	movw	r1, #33333	; 0x8235
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f889 	bl	800aa2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a91a:	4603      	mov	r3, r0
 800a91c:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d106      	bne.n	800a934 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800a926:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa0a 	bl	800ad44 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b088      	sub	sp, #32
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a962:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d008      	beq.n	800a97c <VL53L1_SetDistanceMode+0x3c>
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d005      	beq.n	800a97c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	2b03      	cmp	r3, #3
 800a974:	d002      	beq.n	800a97c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800a976:	f06f 0303 	mvn.w	r3, #3
 800a97a:	e052      	b.n	800aa22 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800a97c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d107      	bne.n	800a994 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800a984:	f107 0308 	add.w	r3, r7, #8
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 f8e9 	bl	800bb62 <VL53L1_get_user_zone>
 800a990:	4603      	mov	r3, r0
 800a992:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800a99a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800a9a2:	f107 0314 	add.w	r3, r7, #20
 800a9a6:	f107 0210 	add.w	r2, r7, #16
 800a9aa:	f107 010c 	add.w	r1, r7, #12
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 f812 	bl	800b9d8 <VL53L1_get_timeouts_us>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800a9b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d107      	bne.n	800a9d0 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	7fb9      	ldrb	r1, [r7, #30]
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff ff06 	bl	800a7d8 <SetPresetMode>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800a9d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	78fa      	ldrb	r2, [r7, #3]
 800a9dc:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a9e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10e      	bne.n	800aa06 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800a9e8:	68f9      	ldr	r1, [r7, #12]
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 ffba 	bl	800b968 <VL53L1_set_timeouts_us>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800a9f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800aa06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d107      	bne.n	800aa1e <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800aa0e:	f107 0308 	add.w	r3, r7, #8
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 f881 	bl	800bb1c <VL53L1_set_user_zone>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3720      	adds	r7, #32
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08c      	sub	sp, #48	; 0x30
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa36:	2300      	movs	r3, #0
 800aa38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800aa50:	4b64      	ldr	r3, [pc, #400]	; (800abe4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800aa52:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	4a64      	ldr	r2, [pc, #400]	; (800abe8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d902      	bls.n	800aa62 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800aa5c:	23fc      	movs	r3, #252	; 0xfc
 800aa5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800aa62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d109      	bne.n	800aa7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800aa6a:	f107 031a 	add.w	r3, r7, #26
 800aa6e:	461a      	mov	r2, r3
 800aa70:	2105      	movs	r1, #5
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa8d 	bl	800af92 <VL53L1_GetSequenceStepEnable>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800aa7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d109      	bne.n	800aa9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800aa86:	f107 0319 	add.w	r3, r7, #25
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2106      	movs	r1, #6
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa7f 	bl	800af92 <VL53L1_GetSequenceStepEnable>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800aa9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10b      	bne.n	800aaba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800aaa2:	f107 0314 	add.w	r3, r7, #20
 800aaa6:	f107 0210 	add.w	r2, r7, #16
 800aaaa:	f107 010c 	add.w	r1, r7, #12
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 ff92 	bl	800b9d8 <VL53L1_get_timeouts_us>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800aaba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f040 8081 	bne.w	800abc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800aaca:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800aad0:	2301      	movs	r3, #1
 800aad2:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800aad4:	7efb      	ldrb	r3, [r7, #27]
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d026      	beq.n	800ab28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800aada:	2b08      	cmp	r3, #8
 800aadc:	dc43      	bgt.n	800ab66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d00f      	beq.n	800ab02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d13f      	bne.n	800ab66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800aae6:	7ebb      	ldrb	r3, [r7, #26]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d002      	beq.n	800aaf2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800aaec:	7e7b      	ldrb	r3, [r7, #25]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d103      	bne.n	800aafa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800aaf2:	f241 3388 	movw	r3, #5000	; 0x1388
 800aaf6:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800aaf8:	e038      	b.n	800ab6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800aafa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aafe:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800ab00:	e034      	b.n	800ab6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ab08:	7ebb      	ldrb	r3, [r7, #26]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d002      	beq.n	800ab14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800ab0e:	7e7b      	ldrb	r3, [r7, #25]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d103      	bne.n	800ab1c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800ab14:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab1a:	e002      	b.n	800ab22 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800ab1c:	f245 4360 	movw	r3, #21600	; 0x5460
 800ab20:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800ab22:	2302      	movs	r3, #2
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800ab26:	e021      	b.n	800ab6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800ab2e:	23f5      	movs	r3, #245	; 0xf5
 800ab30:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800ab32:	f107 0308 	add.w	r3, r7, #8
 800ab36:	461a      	mov	r2, r3
 800ab38:	f248 0136 	movw	r1, #32822	; 0x8036
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f001 ff75 	bl	800ca2c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dd07      	ble.n	800ab58 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	22f5      	movs	r2, #245	; 0xf5
 800ab4c:	fb02 f303 	mul.w	r3, r2, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	4413      	add	r3, r2
 800ab56:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800ab5e:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800ab60:	2302      	movs	r3, #2
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800ab64:	e002      	b.n	800ab6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ab66:	23f8      	movs	r3, #248	; 0xf8
 800ab68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d803      	bhi.n	800ab7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800ab74:	23fc      	movs	r3, #252	; 0xfc
 800ab76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab7a:	e003      	b.n	800ab84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800ab82:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800ab84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d11c      	bne.n	800abc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d203      	bcs.n	800ab9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800ab94:	23fc      	movs	r3, #252	; 0xfc
 800ab96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab9a:	e00d      	b.n	800abb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba4:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fedb 	bl	800b968 <VL53L1_set_timeouts_us>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800abb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800abc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d103      	bne.n	800abd6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3730      	adds	r7, #48	; 0x30
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	00086470 	.word	0x00086470
 800abe8:	00989680 	.word	0x00989680

0800abec <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08c      	sub	sp, #48	; 0x30
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800ac1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d109      	bne.n	800ac36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ac22:	f107 031b 	add.w	r3, r7, #27
 800ac26:	461a      	mov	r2, r3
 800ac28:	2105      	movs	r1, #5
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f9b1 	bl	800af92 <VL53L1_GetSequenceStepEnable>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800ac36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d109      	bne.n	800ac52 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800ac3e:	f107 031a 	add.w	r3, r7, #26
 800ac42:	461a      	mov	r2, r3
 800ac44:	2106      	movs	r1, #6
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f9a3 	bl	800af92 <VL53L1_GetSequenceStepEnable>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800ac52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10b      	bne.n	800ac72 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800ac5a:	f107 0310 	add.w	r3, r7, #16
 800ac5e:	f107 0214 	add.w	r2, r7, #20
 800ac62:	f107 010c 	add.w	r1, r7, #12
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 feb6 	bl	800b9d8 <VL53L1_get_timeouts_us>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800ac72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d156      	bne.n	800ad28 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800ac80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 800ac84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d02a      	beq.n	800ace2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	dc47      	bgt.n	800ad20 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800ac90:	2b03      	cmp	r3, #3
 800ac92:	d012      	beq.n	800acba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d143      	bne.n	800ad20 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800ac98:	7efb      	ldrb	r3, [r7, #27]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d002      	beq.n	800aca4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800ac9e:	7ebb      	ldrb	r3, [r7, #26]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d105      	bne.n	800acb0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800acaa:	3308      	adds	r3, #8
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800acae:	e03c      	b.n	800ad2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800acb8:	e037      	b.n	800ad2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800acba:	7efb      	ldrb	r3, [r7, #27]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d002      	beq.n	800acc6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800acc0:	7ebb      	ldrb	r3, [r7, #26]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d106      	bne.n	800acd4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800accc:	3334      	adds	r3, #52	; 0x34
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800acd2:	e02a      	b.n	800ad2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800acda:	3330      	adds	r3, #48	; 0x30
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800ace0:	e023      	b.n	800ad2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800ace2:	23f5      	movs	r3, #245	; 0xf5
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	461a      	mov	r2, r3
 800acec:	f248 0136 	movw	r1, #32822	; 0x8036
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f001 fe9b 	bl	800ca2c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dd07      	ble.n	800ad0c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	22f5      	movs	r2, #245	; 0xf5
 800ad00:	fb02 f303 	mul.w	r3, r2, r3
 800ad04:	461a      	mov	r2, r3
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	4413      	add	r3, r2
 800ad0a:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800ad12:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800ad1e:	e004      	b.n	800ad2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ad20:	23f8      	movs	r3, #248	; 0xf8
 800ad22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad26:	e000      	b.n	800ad2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 800ad28:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800ad2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad36:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ad38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3730      	adds	r7, #48	; 0x30
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	019b      	lsls	r3, r3, #6
 800ad5a:	4a09      	ldr	r2, [pc, #36]	; (800ad80 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800ad5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad60:	099b      	lsrs	r3, r3, #6
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	4413      	add	r3, r2
 800ad66:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800ad68:	68b9      	ldr	r1, [r7, #8]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fdad 	bl	800b8ca <VL53L1_set_inter_measurement_period_ms>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800ad74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	10624dd3 	.word	0x10624dd3

0800ad84 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800ad92:	f107 0308 	add.w	r3, r7, #8
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fdbf 	bl	800b91c <VL53L1_get_inter_measurement_period_ms>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	019b      	lsls	r3, r3, #6
 800ada8:	4907      	ldr	r1, [pc, #28]	; (800adc8 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800adaa:	fba1 1303 	umull	r1, r3, r1, r3
 800adae:	099b      	lsrs	r3, r3, #6
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800adba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	10624dd3 	.word	0x10624dd3

0800adcc <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	460b      	mov	r3, r1
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800adda:	2300      	movs	r3, #0
 800addc:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800adde:	897b      	ldrh	r3, [r7, #10]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SetLimitValue+0x1e>
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d009      	beq.n	800adfc <SetLimitValue+0x30>
 800ade8:	e011      	b.n	800ae0e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	0b9b      	lsrs	r3, r3, #14
 800adee:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800adf0:	8abb      	ldrh	r3, [r7, #20]
 800adf2:	4619      	mov	r1, r3
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f001 f941 	bl	800c07c <VL53L1_set_lite_sigma_threshold>
		break;
 800adfa:	e00a      	b.n	800ae12 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	0a5b      	lsrs	r3, r3, #9
 800ae00:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800ae02:	8abb      	ldrh	r3, [r7, #20]
 800ae04:	4619      	mov	r1, r3
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f001 f964 	bl	800c0d4 <VL53L1_set_lite_min_count_rate>
		break;
 800ae0c:	e001      	b.n	800ae12 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ae0e:	23fc      	movs	r3, #252	; 0xfc
 800ae10:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	807b      	strh	r3, [r7, #2]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ae36:	887b      	ldrh	r3, [r7, #2]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d902      	bls.n	800ae42 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ae3c:	23fc      	movs	r3, #252	; 0xfc
 800ae3e:	73fb      	strb	r3, [r7, #15]
 800ae40:	e014      	b.n	800ae6c <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800ae42:	787b      	ldrb	r3, [r7, #1]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60bb      	str	r3, [r7, #8]
 800ae4c:	e006      	b.n	800ae5c <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae4e:	887b      	ldrh	r3, [r7, #2]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	33e0      	adds	r3, #224	; 0xe0
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800ae5c:	887b      	ldrh	r3, [r7, #2]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff ffb2 	bl	800adcc <SetLimitValue>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800ae6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10c      	bne.n	800ae8e <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ae74:	787b      	ldrb	r3, [r7, #1]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf14      	ite	ne
 800ae7a:	2301      	movne	r3, #1
 800ae7c:	2300      	moveq	r3, #0
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	887b      	ldrh	r3, [r7, #2]
 800ae82:	4611      	mov	r1, r2
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	4413      	add	r3, r2
 800ae88:	460a      	mov	r2, r1
 800ae8a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800ae8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b087      	sub	sp, #28
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	460b      	mov	r3, r1
 800aea4:	607a      	str	r2, [r7, #4]
 800aea6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800aeac:	897b      	ldrh	r3, [r7, #10]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d905      	bls.n	800aebe <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800aeb2:	23fc      	movs	r3, #252	; 0xfc
 800aeb4:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	701a      	strb	r2, [r3, #0]
 800aebc:	e008      	b.n	800aed0 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800aebe:	897b      	ldrh	r3, [r7, #10]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800aec8:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	7dba      	ldrb	r2, [r7, #22]
 800aece:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800aed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	371c      	adds	r7, #28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	460b      	mov	r3, r1
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800aef6:	897b      	ldrh	r3, [r7, #10]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <VL53L1_GetLimitCheckValue+0x22>
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d00c      	beq.n	800af1a <VL53L1_GetLimitCheckValue+0x3a>
 800af00:	e017      	b.n	800af32 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800af02:	f107 0314 	add.w	r3, r7, #20
 800af06:	4619      	mov	r1, r3
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f001 f8a1 	bl	800c050 <VL53L1_get_lite_sigma_threshold>
 800af0e:	4603      	mov	r3, r0
 800af10:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800af12:	8abb      	ldrh	r3, [r7, #20]
 800af14:	039b      	lsls	r3, r3, #14
 800af16:	61bb      	str	r3, [r7, #24]
		break;
 800af18:	e00d      	b.n	800af36 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800af1a:	f107 0316 	add.w	r3, r7, #22
 800af1e:	4619      	mov	r1, r3
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f001 f8c1 	bl	800c0a8 <VL53L1_get_lite_min_count_rate>
 800af26:	4603      	mov	r3, r0
 800af28:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800af2a:	8afb      	ldrh	r3, [r7, #22]
 800af2c:	025b      	lsls	r3, r3, #9
 800af2e:	61bb      	str	r3, [r7, #24]
		break;
 800af30:	e001      	b.n	800af36 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800af32:	23fc      	movs	r3, #252	; 0xfc
 800af34:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800af36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d123      	bne.n	800af86 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d110      	bne.n	800af66 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800af44:	897b      	ldrh	r3, [r7, #10]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	33e0      	adds	r3, #224	; 0xe0
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800af58:	897b      	ldrh	r3, [r7, #10]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	4413      	add	r3, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800af64:	e00f      	b.n	800af86 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800af6c:	897b      	ldrh	r3, [r7, #10]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	33e0      	adds	r3, #224	; 0xe0
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800af7a:	897b      	ldrh	r3, [r7, #10]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4413      	add	r3, r2
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800af86:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3720      	adds	r7, #32
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b086      	sub	sp, #24
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	460b      	mov	r3, r1
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800afa0:	2300      	movs	r3, #0
 800afa2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800afa4:	7afb      	ldrb	r3, [r7, #11]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	4619      	mov	r1, r3
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f000 fd7f 	bl	800baae <VL53L1_get_sequence_config_bit>
 800afb0:	4603      	mov	r3, r0
 800afb2:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800afb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800afc8:	2300      	movs	r3, #0
 800afca:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	789b      	ldrb	r3, [r3, #2]
 800afd0:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800afd2:	7dbb      	ldrb	r3, [r7, #22]
 800afd4:	2b40      	cmp	r3, #64	; 0x40
 800afd6:	d002      	beq.n	800afde <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fa6b 	bl	800b4b4 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800afe4:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800afe6:	7d7b      	ldrb	r3, [r7, #21]
 800afe8:	2b63      	cmp	r3, #99	; 0x63
 800afea:	dc12      	bgt.n	800b012 <VL53L1_StartMeasurement+0x52>
 800afec:	2b62      	cmp	r3, #98	; 0x62
 800afee:	da0d      	bge.n	800b00c <VL53L1_StartMeasurement+0x4c>
 800aff0:	2b05      	cmp	r3, #5
 800aff2:	dc0e      	bgt.n	800b012 <VL53L1_StartMeasurement+0x52>
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	da09      	bge.n	800b00c <VL53L1_StartMeasurement+0x4c>
 800aff8:	2b02      	cmp	r3, #2
 800affa:	dc02      	bgt.n	800b002 <VL53L1_StartMeasurement+0x42>
 800affc:	2b00      	cmp	r3, #0
 800affe:	da05      	bge.n	800b00c <VL53L1_StartMeasurement+0x4c>
 800b000:	e007      	b.n	800b012 <VL53L1_StartMeasurement+0x52>
 800b002:	2b03      	cmp	r3, #3
 800b004:	d105      	bne.n	800b012 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800b006:	2300      	movs	r3, #0
 800b008:	75fb      	strb	r3, [r7, #23]
		break;
 800b00a:	e004      	b.n	800b016 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800b00c:	23f2      	movs	r3, #242	; 0xf2
 800b00e:	75fb      	strb	r3, [r7, #23]
		break;
 800b010:	e001      	b.n	800b016 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800b012:	23fd      	movs	r3, #253	; 0xfd
 800b014:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800b016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d11f      	bne.n	800b05e <VL53L1_StartMeasurement+0x9e>
 800b01e:	7dbb      	ldrb	r3, [r7, #22]
 800b020:	2b40      	cmp	r3, #64	; 0x40
 800b022:	d11c      	bne.n	800b05e <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b024:	f107 0310 	add.w	r3, r7, #16
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff fdde 	bl	800abec <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800b030:	4603      	mov	r3, r0
 800b032:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	4a17      	ldr	r2, [pc, #92]	; (800b094 <VL53L1_StartMeasurement+0xd4>)
 800b038:	fba2 2303 	umull	r2, r3, r2, r3
 800b03c:	099b      	lsrs	r3, r3, #6
 800b03e:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b040:	f107 030c 	add.w	r3, r7, #12
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff fe9c 	bl	800ad84 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800b04c:	4603      	mov	r3, r0
 800b04e:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1d1a      	adds	r2, r3, #4
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	429a      	cmp	r2, r3
 800b058:	d901      	bls.n	800b05e <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b05a:	23fc      	movs	r3, #252	; 0xfc
 800b05c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d107      	bne.n	800b076 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800b066:	7dbb      	ldrb	r3, [r7, #22]
 800b068:	2206      	movs	r2, #6
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f867 	bl	800c140 <VL53L1_init_and_start_range>
 800b072:	4603      	mov	r3, r0
 800b074:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800b076:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d103      	bne.n	800b086 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2204      	movs	r2, #4
 800b082:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800b086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3718      	adds	r7, #24
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	10624dd3 	.word	0x10624dd3

0800b098 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	789b      	ldrb	r3, [r3, #2]
 800b0a8:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 fb87 	bl	800c7c2 <VL53L1_clear_interrupt_and_enable_next_range>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800b0d0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f004 fb18 	bl	800f70a <VL53L1_poll_for_range_completion>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b08d      	sub	sp, #52	; 0x34
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	603a      	str	r2, [r7, #0]
 800b0f6:	71fb      	strb	r3, [r7, #7]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800b0fc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b100:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800b102:	231e      	movs	r3, #30
 800b104:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800b106:	4b33      	ldr	r3, [pc, #204]	; (800b1d4 <ComputeRQL+0xe8>)
 800b108:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800b10a:	4b33      	ldr	r3, [pc, #204]	; (800b1d8 <ComputeRQL+0xec>)
 800b10c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800b10e:	f641 139a 	movw	r3, #6554	; 0x199a
 800b112:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d103      	bne.n	800b122 <ComputeRQL+0x36>
		returnvalue = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b120:	e04f      	b.n	800b1c2 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800b122:	79bb      	ldrb	r3, [r7, #6]
 800b124:	2b07      	cmp	r3, #7
 800b126:	d103      	bne.n	800b130 <ComputeRQL+0x44>
		returnvalue = 50;
 800b128:	2332      	movs	r3, #50	; 0x32
 800b12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b12e:	e048      	b.n	800b1c2 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b136:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b13a:	429a      	cmp	r2, r3
 800b13c:	dd03      	ble.n	800b146 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800b13e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b140:	041b      	lsls	r3, r3, #16
 800b142:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b144:	e007      	b.n	800b156 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b14c:	461a      	mov	r2, r3
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	fb02 f303 	mul.w	r3, r2, r3
 800b154:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d020      	beq.n	800b19e <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b160:	461a      	mov	r2, r3
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	fb02 f303 	mul.w	r3, r2, r3
 800b168:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16c:	085b      	lsrs	r3, r3, #1
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	4413      	add	r3, r2
 800b172:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b178:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	041b      	lsls	r3, r3, #16
 800b182:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d804      	bhi.n	800b196 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	62bb      	str	r3, [r7, #40]	; 0x28
 800b194:	e006      	b.n	800b1a4 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800b196:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b19a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b19c:	e002      	b.n	800b1a4 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800b19e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800b1a2:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	0c1b      	lsrs	r3, r3, #16
 800b1a8:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	2b32      	cmp	r3, #50	; 0x32
 800b1ae:	d905      	bls.n	800b1bc <ComputeRQL+0xd0>
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	2b64      	cmp	r3, #100	; 0x64
 800b1b4:	bf28      	it	cs
 800b1b6:	2364      	movcs	r3, #100	; 0x64
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	e000      	b.n	800b1be <ComputeRQL+0xd2>
 800b1bc:	2332      	movs	r3, #50	; 0x32
 800b1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800b1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3734      	adds	r7, #52	; 0x34
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	0075b333 	.word	0x0075b333
 800b1d8:	0030cccd 	.word	0x0030cccd

0800b1dc <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800b1e6:	79fb      	ldrb	r3, [r7, #7]
 800b1e8:	3b04      	subs	r3, #4
 800b1ea:	2b0f      	cmp	r3, #15
 800b1ec:	d83d      	bhi.n	800b26a <ConvertStatusLite+0x8e>
 800b1ee:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <ConvertStatusLite+0x18>)
 800b1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f4:	0800b247 	.word	0x0800b247
 800b1f8:	0800b241 	.word	0x0800b241
 800b1fc:	0800b24d 	.word	0x0800b24d
 800b200:	0800b253 	.word	0x0800b253
 800b204:	0800b25f 	.word	0x0800b25f
 800b208:	0800b265 	.word	0x0800b265
 800b20c:	0800b26b 	.word	0x0800b26b
 800b210:	0800b26b 	.word	0x0800b26b
 800b214:	0800b259 	.word	0x0800b259
 800b218:	0800b26b 	.word	0x0800b26b
 800b21c:	0800b26b 	.word	0x0800b26b
 800b220:	0800b26b 	.word	0x0800b26b
 800b224:	0800b26b 	.word	0x0800b26b
 800b228:	0800b26b 	.word	0x0800b26b
 800b22c:	0800b235 	.word	0x0800b235
 800b230:	0800b23b 	.word	0x0800b23b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800b234:	230a      	movs	r3, #10
 800b236:	73fb      	strb	r3, [r7, #15]
		break;
 800b238:	e019      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800b23a:	2306      	movs	r3, #6
 800b23c:	73fb      	strb	r3, [r7, #15]
		break;
 800b23e:	e016      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800b240:	2304      	movs	r3, #4
 800b242:	73fb      	strb	r3, [r7, #15]
		break;
 800b244:	e013      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800b246:	2302      	movs	r3, #2
 800b248:	73fb      	strb	r3, [r7, #15]
		break;
 800b24a:	e010      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800b24c:	2301      	movs	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]
		break;
 800b250:	e00d      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800b252:	2307      	movs	r3, #7
 800b254:	73fb      	strb	r3, [r7, #15]
		break;
 800b256:	e00a      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800b258:	2309      	movs	r3, #9
 800b25a:	73fb      	strb	r3, [r7, #15]
		break;
 800b25c:	e007      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800b25e:	2303      	movs	r3, #3
 800b260:	73fb      	strb	r3, [r7, #15]
		break;
 800b262:	e004      	b.n	800b26e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b264:	2300      	movs	r3, #0
 800b266:	73fb      	strb	r3, [r7, #15]
		break;
 800b268:	e001      	b.n	800b26e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800b26a:	23ff      	movs	r3, #255	; 0xff
 800b26c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08c      	sub	sp, #48	; 0x30
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	607b      	str	r3, [r7, #4]
 800b286:	460b      	mov	r3, r1
 800b288:	72fb      	strb	r3, [r7, #11]
 800b28a:	4613      	mov	r3, r2
 800b28c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b28e:	2300      	movs	r3, #0
 800b290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2a2:	f003 031f 	and.w	r3, r3, #31
 800b2a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800b2aa:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff ff1a 	bl	800b0ec <ComputeRQL>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2c4:	025b      	lsls	r3, r3, #9
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2cc:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b2d2:	025b      	lsls	r3, r3, #9
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2da:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b2e8:	025b      	lsls	r3, r3, #9
 800b2ea:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	6a3a      	ldr	r2, [r7, #32]
 800b2f0:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	2200      	movs	r2, #0
 800b300:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800b302:	7abb      	ldrb	r3, [r7, #10]
 800b304:	2b11      	cmp	r3, #17
 800b306:	d009      	beq.n	800b31c <SetSimpleData+0xa0>
 800b308:	2b11      	cmp	r3, #17
 800b30a:	dc0f      	bgt.n	800b32c <SetSimpleData+0xb0>
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	dc02      	bgt.n	800b316 <SetSimpleData+0x9a>
 800b310:	2b00      	cmp	r3, #0
 800b312:	dc03      	bgt.n	800b31c <SetSimpleData+0xa0>
 800b314:	e00a      	b.n	800b32c <SetSimpleData+0xb0>
 800b316:	2b0d      	cmp	r3, #13
 800b318:	d004      	beq.n	800b324 <SetSimpleData+0xa8>
 800b31a:	e007      	b.n	800b32c <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	2205      	movs	r2, #5
 800b320:	76da      	strb	r2, [r3, #27]
		break;
 800b322:	e006      	b.n	800b332 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	220d      	movs	r2, #13
 800b328:	76da      	strb	r2, [r3, #27]
		break;
 800b32a:	e002      	b.n	800b332 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	2200      	movs	r2, #0
 800b330:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	7edb      	ldrb	r3, [r3, #27]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d108      	bne.n	800b34c <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800b33a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff ff4c 	bl	800b1dc <ConvertStatusLite>
 800b344:	4603      	mov	r3, r0
 800b346:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b350:	025b      	lsls	r3, r3, #9
 800b352:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a3a      	ldr	r2, [r7, #32]
 800b358:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b360:	025b      	lsls	r3, r3, #9
 800b362:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6a3a      	ldr	r2, [r7, #32]
 800b368:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800b36c:	f107 0314 	add.w	r3, r7, #20
 800b370:	461a      	mov	r2, r3
 800b372:	2100      	movs	r1, #0
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f7ff fdb3 	bl	800aee0 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800b37a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b37e:	2b06      	cmp	r3, #6
 800b380:	bf0c      	ite	eq
 800b382:	2301      	moveq	r3, #1
 800b384:	2300      	movne	r3, #0
 800b386:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800b388:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800b38a:	f107 0319 	add.w	r3, r7, #25
 800b38e:	461a      	mov	r2, r3
 800b390:	2100      	movs	r1, #0
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff fd81 	bl	800ae9a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800b398:	7e7b      	ldrb	r3, [r7, #25]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d104      	bne.n	800b3a8 <SetSimpleData+0x12c>
 800b39e:	7ffb      	ldrb	r3, [r7, #31]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d101      	bne.n	800b3a8 <SetSimpleData+0x12c>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e000      	b.n	800b3aa <SetSimpleData+0x12e>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	7fba      	ldrb	r2, [r7, #30]
 800b3b0:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800b3b4:	f107 0314 	add.w	r3, r7, #20
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	2101      	movs	r1, #1
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7ff fd8f 	bl	800aee0 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800b3c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	bf0c      	ite	eq
 800b3ca:	2301      	moveq	r3, #1
 800b3cc:	2300      	movne	r3, #0
 800b3ce:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800b3d0:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800b3d2:	f107 0319 	add.w	r3, r7, #25
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	2101      	movs	r1, #1
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7ff fd5d 	bl	800ae9a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800b3e0:	7e7b      	ldrb	r3, [r7, #25]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d104      	bne.n	800b3f0 <SetSimpleData+0x174>
 800b3e6:	7f7b      	ldrb	r3, [r7, #29]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d101      	bne.n	800b3f0 <SetSimpleData+0x174>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e000      	b.n	800b3f2 <SetSimpleData+0x176>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	7fba      	ldrb	r2, [r7, #30]
 800b3f8:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	8b1b      	ldrh	r3, [r3, #24]
 800b400:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	7edb      	ldrb	r3, [r3, #27]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d110      	bne.n	800b42c <SetSimpleData+0x1b0>
 800b40a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	da0c      	bge.n	800b42c <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800b412:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b416:	4b08      	ldr	r3, [pc, #32]	; (800b438 <SetSimpleData+0x1bc>)
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	da03      	bge.n	800b426 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	220e      	movs	r2, #14
 800b422:	76da      	strb	r2, [r3, #27]
 800b424:	e002      	b.n	800b42c <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	2200      	movs	r2, #0
 800b42a:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800b42c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b430:	4618      	mov	r0, r3
 800b432:	3730      	adds	r7, #48	; 0x30
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200000b0 	.word	0x200000b0

0800b43c <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b0a8      	sub	sp, #160	; 0xa0
 800b440:	af02      	add	r7, sp, #8
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b446:	2300      	movs	r3, #0
 800b448:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800b44c:	f107 0308 	add.w	r3, r7, #8
 800b450:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800b454:	221c      	movs	r2, #28
 800b456:	21ff      	movs	r1, #255	; 0xff
 800b458:	6838      	ldr	r0, [r7, #0]
 800b45a:	f004 fd89 	bl	800ff70 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800b45e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b462:	2102      	movs	r1, #2
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 f93c 	bl	800c6e2 <VL53L1_get_device_results>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800b470:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800b474:	2b00      	cmp	r3, #0
 800b476:	d117      	bne.n	800b4a8 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800b478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b47c:	789a      	ldrb	r2, [r3, #2]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800b482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b486:	3304      	adds	r3, #4
 800b488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800b48c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b490:	78da      	ldrb	r2, [r3, #3]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b49a:	2101      	movs	r1, #1
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff feed 	bl	800b27c <SetSimpleData>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b4a8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3798      	adds	r7, #152	; 0x98
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b0c6      	sub	sp, #280	; 0x118
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	1d3b      	adds	r3, r7, #4
 800b4bc:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b4ca:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d108      	bne.n	800b4e4 <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2185      	movs	r1, #133	; 0x85
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f004 f9f1 	bl	800f8c0 <VL53L1_WrByte>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800b4e4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d103      	bne.n	800b4f4 <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 800b4ec:	1d3b      	adds	r3, r7, #4
 800b4ee:	6818      	ldr	r0, [r3, #0]
 800b4f0:	f002 fce1 	bl	800deb6 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800b4f4:	4b65      	ldr	r3, [pc, #404]	; (800b68c <VL53L1_LoadPatch+0x1d8>)
 800b4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b500:	2b03      	cmp	r3, #3
 800b502:	d81b      	bhi.n	800b53c <VL53L1_LoadPatch+0x88>
 800b504:	a201      	add	r2, pc, #4	; (adr r2, 800b50c <VL53L1_LoadPatch+0x58>)
 800b506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50a:	bf00      	nop
 800b50c:	0800b51d 	.word	0x0800b51d
 800b510:	0800b525 	.word	0x0800b525
 800b514:	0800b52d 	.word	0x0800b52d
 800b518:	0800b535 	.word	0x0800b535

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 800b51c:	2300      	movs	r3, #0
 800b51e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b522:	e00e      	b.n	800b542 <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800b524:	2310      	movs	r3, #16
 800b526:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b52a:	e00a      	b.n	800b542 <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 800b52c:	2320      	movs	r3, #32
 800b52e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b532:	e006      	b.n	800b542 <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800b534:	2340      	movs	r3, #64	; 0x40
 800b536:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800b53a:	e002      	b.n	800b542 <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 800b53c:	2300      	movs	r3, #0
 800b53e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800b542:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b546:	2b00      	cmp	r3, #0
 800b548:	d125      	bne.n	800b596 <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 800b54a:	f107 030c 	add.w	r3, r7, #12
 800b54e:	2229      	movs	r2, #41	; 0x29
 800b550:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	22c9      	movs	r2, #201	; 0xc9
 800b558:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800b55a:	f107 030c 	add.w	r3, r7, #12
 800b55e:	220e      	movs	r2, #14
 800b560:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800b562:	f107 030c 	add.w	r3, r7, #12
 800b566:	2240      	movs	r2, #64	; 0x40
 800b568:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800b56a:	f107 030c 	add.w	r3, r7, #12
 800b56e:	2228      	movs	r2, #40	; 0x28
 800b570:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800b572:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b576:	b2da      	uxtb	r2, r3
 800b578:	f107 030c 	add.w	r3, r7, #12
 800b57c:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800b57e:	f107 020c 	add.w	r2, r7, #12
 800b582:	1d38      	adds	r0, r7, #4
 800b584:	2306      	movs	r3, #6
 800b586:	f240 4176 	movw	r1, #1142	; 0x476
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	f004 f92c 	bl	800f7e8 <VL53L1_WriteMulti>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800b596:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d123      	bne.n	800b5e6 <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 800b59e:	f107 030c 	add.w	r3, r7, #12
 800b5a2:	2203      	movs	r2, #3
 800b5a4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800b5a6:	f107 030c 	add.w	r3, r7, #12
 800b5aa:	226d      	movs	r2, #109	; 0x6d
 800b5ac:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800b5ae:	f107 030c 	add.w	r3, r7, #12
 800b5b2:	2203      	movs	r2, #3
 800b5b4:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800b5b6:	f107 030c 	add.w	r3, r7, #12
 800b5ba:	226f      	movs	r2, #111	; 0x6f
 800b5bc:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	2207      	movs	r2, #7
 800b5c4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800b5c6:	f107 030c 	add.w	r3, r7, #12
 800b5ca:	2229      	movs	r2, #41	; 0x29
 800b5cc:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800b5ce:	f107 020c 	add.w	r2, r7, #12
 800b5d2:	1d38      	adds	r0, r7, #4
 800b5d4:	2306      	movs	r3, #6
 800b5d6:	f240 4196 	movw	r1, #1174	; 0x496
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	f004 f904 	bl	800f7e8 <VL53L1_WriteMulti>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800b5e6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d113      	bne.n	800b616 <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 800b5ee:	f107 030c 	add.w	r3, r7, #12
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b5f6:	f107 030c 	add.w	r3, r7, #12
 800b5fa:	2207      	movs	r2, #7
 800b5fc:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b5fe:	f107 020c 	add.w	r2, r7, #12
 800b602:	1d38      	adds	r0, r7, #4
 800b604:	2302      	movs	r3, #2
 800b606:	f240 4172 	movw	r1, #1138	; 0x472
 800b60a:	6800      	ldr	r0, [r0, #0]
 800b60c:	f004 f8ec 	bl	800f7e8 <VL53L1_WriteMulti>
 800b610:	4603      	mov	r3, r0
 800b612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800b616:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d113      	bne.n	800b646 <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 800b61e:	f107 030c 	add.w	r3, r7, #12
 800b622:	2200      	movs	r2, #0
 800b624:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800b626:	f107 030c 	add.w	r3, r7, #12
 800b62a:	2207      	movs	r2, #7
 800b62c:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800b62e:	f107 020c 	add.w	r2, r7, #12
 800b632:	1d38      	adds	r0, r7, #4
 800b634:	2302      	movs	r3, #2
 800b636:	f240 4174 	movw	r1, #1140	; 0x474
 800b63a:	6800      	ldr	r0, [r0, #0]
 800b63c:	f004 f8d4 	bl	800f7e8 <VL53L1_WriteMulti>
 800b640:	4603      	mov	r3, r0
 800b642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800b646:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d109      	bne.n	800b662 <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 800b64e:	1d3b      	adds	r3, r7, #4
 800b650:	2201      	movs	r2, #1
 800b652:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	f004 f932 	bl	800f8c0 <VL53L1_WrByte>
 800b65c:	4603      	mov	r3, r0
 800b65e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800b662:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800b666:	2b00      	cmp	r3, #0
 800b668:	d108      	bne.n	800b67c <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 800b66a:	1d3b      	adds	r3, r7, #4
 800b66c:	2201      	movs	r2, #1
 800b66e:	2185      	movs	r1, #133	; 0x85
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	f004 f925 	bl	800f8c0 <VL53L1_WrByte>
 800b676:	4603      	mov	r3, r0
 800b678:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800b67c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800b680:	4618      	mov	r0, r3
 800b682:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	200000b0 	.word	0x200000b0

0800b690 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800b690:	b5b0      	push	{r4, r5, r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af04      	add	r7, sp, #16
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800b6a4:	2162      	movs	r1, #98	; 0x62
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f002 f8bf 	bl	800d82a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b6d0:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b6d8:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b6e0:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	2264      	movs	r2, #100	; 0x64
 800b6e6:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b6ee:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f240 72db 	movw	r2, #2011	; 0x7db
 800b6fe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f002 f875 	bl	800d7f2 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d008      	beq.n	800b720 <VL53L1_data_init+0x90>
 800b70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d104      	bne.n	800b720 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f857 	bl	800b7ca <VL53L1_read_p2p_data>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fba4 	bl	800ce74 <VL53L1_init_refspadchar_config_struct>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b736:	4618      	mov	r0, r3
 800b738:	f001 fbc0 	bl	800cebc <VL53L1_init_ssc_config_struct>
 800b73c:	4603      	mov	r3, r0
 800b73e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800b74c:	4619      	mov	r1, r3
 800b74e:	4610      	mov	r0, r2
 800b750:	f001 fbd5 	bl	800cefe <VL53L1_init_xtalk_config_struct>
 800b754:	4603      	mov	r3, r0
 800b756:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b75e:	4618      	mov	r0, r3
 800b760:	f001 fc2f 	bl	800cfc2 <VL53L1_init_offset_cal_config_struct>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	33a4      	adds	r3, #164	; 0xa4
 800b76c:	4618      	mov	r0, r3
 800b76e:	f001 fc4f 	bl	800d010 <VL53L1_init_tuning_parm_storage_struct>
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800b776:	2120      	movs	r1, #32
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fcc1 	bl	800c100 <VL53L1_set_vhv_loopbound>
 800b77e:	4603      	mov	r3, r0
 800b780:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800b782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d116      	bne.n	800b7b8 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	7858      	ldrb	r0, [r3, #1]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	8b1c      	ldrh	r4, [r3, #24]
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	689d      	ldr	r5, [r3, #8]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	6912      	ldr	r2, [r2, #16]
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	6949      	ldr	r1, [r1, #20]
 800b7a2:	9102      	str	r1, [sp, #8]
 800b7a4:	9201      	str	r2, [sp, #4]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	4622      	mov	r2, r4
 800b7ac:	4601      	mov	r1, r0
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fad8 	bl	800bd64 <VL53L1_set_preset_mode>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f002 fdb5 	bl	800e328 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800b7be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bdb0      	pop	{r4, r5, r7, pc}

0800b7ca <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b084      	sub	sp, #16
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800b7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d108      	bne.n	800b7f4 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f002 ff39 	bl	800e662 <VL53L1_get_static_nvm_managed>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800b7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d107      	bne.n	800b80c <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	3342      	adds	r3, #66	; 0x42
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f003 f86b 	bl	800e8de <VL53L1_get_customer_nvm_managed>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800b80c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d115      	bne.n	800b840 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f003 ff1d 	bl	800f65c <VL53L1_get_nvm_copy_data>
 800b822:	4603      	mov	r3, r0
 800b824:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800b826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d108      	bne.n	800b840 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	33f0      	adds	r3, #240	; 0xf0
 800b838:	4619      	mov	r1, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	f002 f957 	bl	800daee <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800b840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d109      	bne.n	800b85c <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800b84e:	461a      	mov	r2, r3
 800b850:	21de      	movs	r1, #222	; 0xde
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f004 f892 	bl	800f97c <VL53L1_RdWord>
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b866:	d204      	bcs.n	800b872 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800b86e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800b872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d107      	bne.n	800b88a <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	339e      	adds	r3, #158	; 0x9e
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f990 	bl	800bba6 <VL53L1_get_mode_mitigation_roi>
 800b886:	4603      	mov	r3, r0
 800b888:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d114      	bne.n	800b8be <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10f      	bne.n	800b8be <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b8b4:	011b      	lsls	r3, r3, #4
 800b8b6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800b8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b085      	sub	sp, #20
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b8e6:	23f1      	movs	r3, #241	; 0xf1
 800b8e8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800b8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10c      	bne.n	800b90c <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b8fe:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800b90c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b926:	2300      	movs	r3, #0
 800b928:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b938:	23f1      	movs	r3, #241	; 0xf1
 800b93a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800b93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d109      	bne.n	800b958 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800b950:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800b958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af02      	add	r7, sp, #8
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b976:	2300      	movs	r3, #0
 800b978:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b988:	23f1      	movs	r3, #241	; 0xf1
 800b98a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800b98c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d11b      	bne.n	800b9cc <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800b9b8:	9201      	str	r2, [sp, #4]
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	6879      	ldr	r1, [r7, #4]
 800b9c2:	68b8      	ldr	r0, [r7, #8]
 800b9c4:	f002 fbe2 	bl	800e18c <VL53L1_calc_timeout_register_values>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800b9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ba00:	23f1      	movs	r3, #241	; 0xf1
 800ba02:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800ba04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d14a      	bne.n	800baa2 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f002 fa5d 	bl	800deda <VL53L1_calc_macro_period_us>
 800ba20:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800ba28:	6979      	ldr	r1, [r7, #20]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f002 fb15 	bl	800e05a <VL53L1_calc_timeout_us>
 800ba30:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800ba3c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800ba3e:	8a7b      	ldrh	r3, [r7, #18]
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800ba4a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800ba4c:	4413      	add	r3, r2
 800ba4e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800ba50:	8a7b      	ldrh	r3, [r7, #18]
 800ba52:	6979      	ldr	r1, [r7, #20]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f002 fb3e 	bl	800e0d6 <VL53L1_calc_decoded_timeout_us>
 800ba5a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800ba66:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800ba68:	8a7b      	ldrh	r3, [r7, #18]
 800ba6a:	021b      	lsls	r3, r3, #8
 800ba6c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800ba74:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800ba76:	4413      	add	r3, r2
 800ba78:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800ba7a:	8a7b      	ldrh	r3, [r7, #18]
 800ba7c:	6979      	ldr	r1, [r7, #20]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f002 fb29 	bl	800e0d6 <VL53L1_calc_decoded_timeout_us>
 800ba84:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800baa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3720      	adds	r7, #32
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800baae:	b480      	push	{r7}
 800bab0:	b087      	sub	sp, #28
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	460b      	mov	r3, r1
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800babc:	2300      	movs	r3, #0
 800babe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800bac4:	2301      	movs	r3, #1
 800bac6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800bac8:	7afb      	ldrb	r3, [r7, #11]
 800baca:	2b07      	cmp	r3, #7
 800bacc:	d81c      	bhi.n	800bb08 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800bace:	7afb      	ldrb	r3, [r7, #11]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800bad4:	7afb      	ldrb	r3, [r7, #11]
 800bad6:	2201      	movs	r2, #1
 800bad8:	fa02 f303 	lsl.w	r3, r2, r3
 800badc:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800bae4:	7dbb      	ldrb	r3, [r7, #22]
 800bae6:	4013      	ands	r3, r2
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800baee:	7afb      	ldrb	r3, [r7, #11]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	461a      	mov	r2, r3
 800bafa:	7afb      	ldrb	r3, [r7, #11]
 800bafc:	fa42 f303 	asr.w	r3, r2, r3
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	701a      	strb	r2, [r3, #0]
 800bb06:	e001      	b.n	800bb0c <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800bb08:	23fc      	movs	r3, #252	; 0xfc
 800bb0a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800bb0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	371c      	adds	r7, #28
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	7858      	ldrb	r0, [r3, #1]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	7819      	ldrb	r1, [r3, #0]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f002 fb9e 	bl	800e27e <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	7898      	ldrb	r0, [r3, #2]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	78d9      	ldrb	r1, [r3, #3]
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800bb50:	461a      	mov	r2, r3
 800bb52:	f002 fbd3 	bl	800e2fc <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800bb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	4619      	mov	r1, r3
 800bb82:	f002 fc8a 	bl	800e49a <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	1c99      	adds	r1, r3, #2
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	3303      	adds	r3, #3
 800bb94:	461a      	mov	r2, r3
 800bb96:	f002 fb99 	bl	800e2cc <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800bb9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b086      	sub	sp, #24
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800bbca:	f107 020e 	add.w	r2, r7, #14
 800bbce:	f107 010d 	add.w	r1, r7, #13
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f002 fc61 	bl	800e49a <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800bbd8:	7bba      	ldrb	r2, [r7, #14]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800bbde:	7b7a      	ldrb	r2, [r7, #13]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800bbea:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	091b      	lsrs	r3, r3, #4
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
 800bbf8:	f003 030f 	and.w	r3, r3, #15
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800bc02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	607a      	str	r2, [r7, #4]
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc20:	2300      	movs	r3, #0
 800bc22:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800bc28:	7afb      	ldrb	r3, [r7, #11]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	2b25      	cmp	r3, #37	; 0x25
 800bc2e:	f200 808e 	bhi.w	800bd4e <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800bc32:	a201      	add	r2, pc, #4	; (adr r2, 800bc38 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800bc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc38:	0800bcd1 	.word	0x0800bcd1
 800bc3c:	0800bcd1 	.word	0x0800bcd1
 800bc40:	0800bcd1 	.word	0x0800bcd1
 800bc44:	0800bcd1 	.word	0x0800bcd1
 800bc48:	0800bcd1 	.word	0x0800bcd1
 800bc4c:	0800bcfb 	.word	0x0800bcfb
 800bc50:	0800bcfb 	.word	0x0800bcfb
 800bc54:	0800bcfb 	.word	0x0800bcfb
 800bc58:	0800bd4f 	.word	0x0800bd4f
 800bc5c:	0800bd4f 	.word	0x0800bd4f
 800bc60:	0800bd4f 	.word	0x0800bd4f
 800bc64:	0800bd4f 	.word	0x0800bd4f
 800bc68:	0800bd4f 	.word	0x0800bd4f
 800bc6c:	0800bd4f 	.word	0x0800bd4f
 800bc70:	0800bd4f 	.word	0x0800bd4f
 800bc74:	0800bd4f 	.word	0x0800bd4f
 800bc78:	0800bcd1 	.word	0x0800bcd1
 800bc7c:	0800bcfb 	.word	0x0800bcfb
 800bc80:	0800bd4f 	.word	0x0800bd4f
 800bc84:	0800bd4f 	.word	0x0800bd4f
 800bc88:	0800bd4f 	.word	0x0800bd4f
 800bc8c:	0800bd4f 	.word	0x0800bd4f
 800bc90:	0800bd4f 	.word	0x0800bd4f
 800bc94:	0800bd4f 	.word	0x0800bd4f
 800bc98:	0800bd4f 	.word	0x0800bd4f
 800bc9c:	0800bd4f 	.word	0x0800bd4f
 800bca0:	0800bd4f 	.word	0x0800bd4f
 800bca4:	0800bd4f 	.word	0x0800bd4f
 800bca8:	0800bd4f 	.word	0x0800bd4f
 800bcac:	0800bd4f 	.word	0x0800bd4f
 800bcb0:	0800bd4f 	.word	0x0800bd4f
 800bcb4:	0800bd4f 	.word	0x0800bd4f
 800bcb8:	0800bd4f 	.word	0x0800bd4f
 800bcbc:	0800bd4f 	.word	0x0800bd4f
 800bcc0:	0800bd4f 	.word	0x0800bd4f
 800bcc4:	0800bd25 	.word	0x0800bd25
 800bcc8:	0800bd25 	.word	0x0800bd25
 800bccc:	0800bd25 	.word	0x0800bd25
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	601a      	str	r2, [r3, #0]
	break;
 800bcf8:	e02c      	b.n	800bd54 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	601a      	str	r2, [r3, #0]
	break;
 800bd22:	e017      	b.n	800bd54 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800bd3e:	6a3b      	ldr	r3, [r7, #32]
 800bd40:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	601a      	str	r2, [r3, #0]
	break;
 800bd4c:	e002      	b.n	800bd54 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800bd4e:	23fc      	movs	r3, #252	; 0xfc
 800bd50:	75fb      	strb	r3, [r7, #23]
		break;
 800bd52:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800bd54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b092      	sub	sp, #72	; 0x48
 800bd68:	af04      	add	r7, sp, #16
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	72fb      	strb	r3, [r7, #11]
 800bd72:	4613      	mov	r3, r2
 800bd74:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd86:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800bd96:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800bd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800bd9e:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bda6:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	33a4      	adds	r3, #164	; 0xa4
 800bdac:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800bdb4:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	7afa      	ldrb	r2, [r7, #11]
 800bdba:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdc0:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdc6:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdcc:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800bdce:	2103      	movs	r1, #3
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f001 fd2a 	bl	800d82a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800bdd6:	7afb      	ldrb	r3, [r7, #11]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	2b25      	cmp	r3, #37	; 0x25
 800bddc:	f200 810c 	bhi.w	800bff8 <VL53L1_set_preset_mode+0x294>
 800bde0:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <VL53L1_set_preset_mode+0x84>)
 800bde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde6:	bf00      	nop
 800bde8:	0800be81 	.word	0x0800be81
 800bdec:	0800be9d 	.word	0x0800be9d
 800bdf0:	0800beb9 	.word	0x0800beb9
 800bdf4:	0800bed5 	.word	0x0800bed5
 800bdf8:	0800bef1 	.word	0x0800bef1
 800bdfc:	0800bf0d 	.word	0x0800bf0d
 800be00:	0800bf29 	.word	0x0800bf29
 800be04:	0800bf45 	.word	0x0800bf45
 800be08:	0800bff9 	.word	0x0800bff9
 800be0c:	0800bff9 	.word	0x0800bff9
 800be10:	0800bff9 	.word	0x0800bff9
 800be14:	0800bff9 	.word	0x0800bff9
 800be18:	0800bff9 	.word	0x0800bff9
 800be1c:	0800bff9 	.word	0x0800bff9
 800be20:	0800bff9 	.word	0x0800bff9
 800be24:	0800bff9 	.word	0x0800bff9
 800be28:	0800bf61 	.word	0x0800bf61
 800be2c:	0800bf7d 	.word	0x0800bf7d
 800be30:	0800bff9 	.word	0x0800bff9
 800be34:	0800bff9 	.word	0x0800bff9
 800be38:	0800bff9 	.word	0x0800bff9
 800be3c:	0800bff9 	.word	0x0800bff9
 800be40:	0800bff9 	.word	0x0800bff9
 800be44:	0800bff9 	.word	0x0800bff9
 800be48:	0800bff9 	.word	0x0800bff9
 800be4c:	0800bff9 	.word	0x0800bff9
 800be50:	0800bff9 	.word	0x0800bff9
 800be54:	0800bff9 	.word	0x0800bff9
 800be58:	0800bff9 	.word	0x0800bff9
 800be5c:	0800bff9 	.word	0x0800bff9
 800be60:	0800bff9 	.word	0x0800bff9
 800be64:	0800bff9 	.word	0x0800bff9
 800be68:	0800bff9 	.word	0x0800bff9
 800be6c:	0800bff9 	.word	0x0800bff9
 800be70:	0800bff9 	.word	0x0800bff9
 800be74:	0800bf99 	.word	0x0800bf99
 800be78:	0800bfb9 	.word	0x0800bfb9
 800be7c:	0800bfd9 	.word	0x0800bfd9

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	6a3b      	ldr	r3, [r7, #32]
 800be8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be90:	f001 f94d 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800be94:	4603      	mov	r3, r0
 800be96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800be9a:	e0b1      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beac:	f001 fa5d 	bl	800d36a <VL53L1_preset_mode_standard_ranging_short_range>
 800beb0:	4603      	mov	r3, r0
 800beb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800beb6:	e0a3      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bec8:	f001 fa90 	bl	800d3ec <VL53L1_preset_mode_standard_ranging_long_range>
 800becc:	4603      	mov	r3, r0
 800bece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bed2:	e095      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	6a3b      	ldr	r3, [r7, #32]
 800bede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bee4:	f001 fac3 	bl	800d46e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800beee:	e087      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	9301      	str	r3, [sp, #4]
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	6a3b      	ldr	r3, [r7, #32]
 800befa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800befc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800befe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf00:	f001 fada 	bl	800d4b8 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf0a:	e079      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	6a3b      	ldr	r3, [r7, #32]
 800bf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf1c:	f001 faf1 	bl	800d502 <VL53L1_preset_mode_timed_ranging>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf26:	e06b      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	9301      	str	r3, [sp, #4]
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf38:	f001 fb1d 	bl	800d576 <VL53L1_preset_mode_timed_ranging_short_range>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf42:	e05d      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	6a3b      	ldr	r3, [r7, #32]
 800bf4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf54:	f001 fb49 	bl	800d5ea <VL53L1_preset_mode_timed_ranging_long_range>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf5e:	e04f      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf70:	f001 fc1d 	bl	800d7ae <VL53L1_preset_mode_olt>
 800bf74:	4603      	mov	r3, r0
 800bf76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf7a:	e041      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf8c:	f001 fbd9 	bl	800d742 <VL53L1_preset_mode_singleshot_ranging>
 800bf90:	4603      	mov	r3, r0
 800bf92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800bf96:	e033      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	9302      	str	r3, [sp, #8]
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfac:	f001 fb7d 	bl	800d6aa <VL53L1_preset_mode_low_power_auto_short_ranging>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800bfb6:	e023      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	9302      	str	r3, [sp, #8]
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfcc:	f001 fb47 	bl	800d65e <VL53L1_preset_mode_low_power_auto_ranging>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800bfd6:	e013      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	9302      	str	r3, [sp, #8]
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfec:	f001 fb83 	bl	800d6f6 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800bff6:	e003      	b.n	800c000 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800bff8:	23fc      	movs	r3, #252	; 0xfc
 800bffa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800bffe:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800c000:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c004:	2b00      	cmp	r3, #0
 800c006:	d105      	bne.n	800c014 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	893a      	ldrh	r2, [r7, #8]
 800c00c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	893a      	ldrh	r2, [r7, #8]
 800c012:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800c014:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d108      	bne.n	800c02e <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800c01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c01e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff fca0 	bl	800b968 <VL53L1_set_timeouts_us>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800c02e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800c036:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7ff fc46 	bl	800b8ca <VL53L1_set_inter_measurement_period_ms>
 800c03e:	4603      	mov	r3, r0
 800c040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800c044:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3738      	adds	r7, #56	; 0x38
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c06c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	887a      	ldrh	r2, [r7, #2]
 800c094:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800c098:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	887a      	ldrh	r2, [r7, #2]
 800c0ec:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800c0f0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c10c:	2300      	movs	r3, #0
 800c10e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c11a:	f003 0303 	and.w	r3, r3, #3
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	b2db      	uxtb	r3, r3
 800c126:	4413      	add	r3, r2
 800c128:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800c130:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c134:	4618      	mov	r0, r3
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b0d0      	sub	sp, #320	; 0x140
 800c144:	af00      	add	r7, sp, #0
 800c146:	1d3b      	adds	r3, r7, #4
 800c148:	6018      	str	r0, [r3, #0]
 800c14a:	4608      	mov	r0, r1
 800c14c:	4611      	mov	r1, r2
 800c14e:	1cfb      	adds	r3, r7, #3
 800c150:	4602      	mov	r2, r0
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	1cbb      	adds	r3, r7, #2
 800c156:	460a      	mov	r2, r1
 800c158:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c160:	1d3b      	adds	r3, r7, #4
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800c168:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c16c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c170:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800c174:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c178:	3342      	adds	r3, #66	; 0x42
 800c17a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c17e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c182:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c186:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c18a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c18e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c192:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c196:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c19a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c19e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c1a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1a6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c1aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c1ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1b2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c1b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800c1ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1be:	332c      	adds	r3, #44	; 0x2c
 800c1c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800c1c4:	f107 030c 	add.w	r3, r7, #12
 800c1c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800c1e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1e8:	1cfa      	adds	r2, r7, #3
 800c1ea:	7812      	ldrb	r2, [r2, #0]
 800c1ec:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800c1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f2:	791b      	ldrb	r3, [r3, #4]
 800c1f4:	b25b      	sxtb	r3, r3
 800c1f6:	f003 030f 	and.w	r3, r3, #15
 800c1fa:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800c1fc:	1cfb      	adds	r3, r7, #3
 800c1fe:	f993 3000 	ldrsb.w	r3, [r3]
 800c202:	4313      	orrs	r3, r2
 800c204:	b25b      	sxtb	r3, r3
 800c206:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800c208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20c:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800c20e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c212:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800c216:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c21a:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800c21e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c222:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800c226:	2bff      	cmp	r3, #255	; 0xff
 800c228:	d104      	bne.n	800c234 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800c22a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c22e:	2200      	movs	r2, #0
 800c230:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c238:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d133      	bne.n	800c2a8 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c240:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c244:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d12d      	bne.n	800c2a8 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800c24c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c250:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800c254:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c258:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800c25c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c260:	2220      	movs	r2, #32
 800c262:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800c266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c26a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800c26e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10c      	bne.n	800c290 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800c276:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c27a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800c27e:	b29b      	uxth	r3, r3
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	b29b      	uxth	r3, r3
 800c284:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800c286:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c28a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800c28e:	e004      	b.n	800c29a <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800c290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c294:	2200      	movs	r2, #0
 800c296:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800c29a:	1cbb      	adds	r3, r7, #2
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b04      	cmp	r3, #4
 800c2a0:	d802      	bhi.n	800c2a8 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800c2a2:	1cbb      	adds	r3, r7, #2
 800c2a4:	2205      	movs	r2, #5
 800c2a6:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c2a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2ac:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d110      	bne.n	800c2d6 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c2b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2b8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d10a      	bne.n	800c2d6 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800c2c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2c4:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800c2c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c2cc:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800c2d0:	1cbb      	adds	r3, r7, #2
 800c2d2:	2206      	movs	r2, #6
 800c2d4:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800c2d6:	1cbb      	adds	r3, r7, #2
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b05      	cmp	r3, #5
 800c2de:	d827      	bhi.n	800c330 <VL53L1_init_and_start_range+0x1f0>
 800c2e0:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <VL53L1_init_and_start_range+0x1a8>)
 800c2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e6:	bf00      	nop
 800c2e8:	0800c329 	.word	0x0800c329
 800c2ec:	0800c321 	.word	0x0800c321
 800c2f0:	0800c319 	.word	0x0800c319
 800c2f4:	0800c311 	.word	0x0800c311
 800c2f8:	0800c309 	.word	0x0800c309
 800c2fc:	0800c301 	.word	0x0800c301
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800c300:	2301      	movs	r3, #1
 800c302:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c306:	e017      	b.n	800c338 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800c308:	230d      	movs	r3, #13
 800c30a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c30e:	e013      	b.n	800c338 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800c310:	2324      	movs	r3, #36	; 0x24
 800c312:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c316:	e00f      	b.n	800c338 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800c318:	2344      	movs	r3, #68	; 0x44
 800c31a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c31e:	e00b      	b.n	800c338 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800c320:	235a      	movs	r3, #90	; 0x5a
 800c322:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c326:	e007      	b.n	800c338 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800c328:	2371      	movs	r3, #113	; 0x71
 800c32a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c32e:	e003      	b.n	800c338 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800c330:	2383      	movs	r3, #131	; 0x83
 800c332:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c336:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800c338:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c33c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800c340:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800c344:	f107 030c 	add.w	r3, r7, #12
 800c348:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c34c:	2300      	movs	r3, #0
 800c34e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c352:	e00b      	b.n	800c36c <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800c354:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c358:	1c5a      	adds	r2, r3, #1
 800c35a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c35e:	2200      	movs	r2, #0
 800c360:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c362:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800c366:	3301      	adds	r3, #1
 800c368:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c36c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800c370:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c374:	429a      	cmp	r2, r3
 800c376:	d3ed      	bcc.n	800c354 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800c378:	1cbb      	adds	r3, r7, #2
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2b05      	cmp	r3, #5
 800c37e:	d917      	bls.n	800c3b0 <VL53L1_init_and_start_range+0x270>
 800c380:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c384:	2b00      	cmp	r3, #0
 800c386:	d113      	bne.n	800c3b0 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c388:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c38c:	f1c3 0301 	rsb	r3, r3, #1
 800c390:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c394:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800c398:	f107 020c 	add.w	r2, r7, #12
 800c39c:	4413      	add	r3, r2
 800c39e:	461a      	mov	r2, r3
 800c3a0:	210b      	movs	r1, #11
 800c3a2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c3a6:	f002 f8a7 	bl	800e4f8 <VL53L1_i2c_encode_static_nvm_managed>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800c3b0:	1cbb      	adds	r3, r7, #2
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d917      	bls.n	800c3e8 <VL53L1_init_and_start_range+0x2a8>
 800c3b8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d113      	bne.n	800c3e8 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c3c0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c3c4:	f1c3 030d 	rsb	r3, r3, #13
 800c3c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c3cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800c3d0:	f107 020c 	add.w	r2, r7, #12
 800c3d4:	4413      	add	r3, r2
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	2117      	movs	r1, #23
 800c3da:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c3de:	f002 f967 	bl	800e6b0 <VL53L1_i2c_encode_customer_nvm_managed>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800c3e8:	1cbb      	adds	r3, r7, #2
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d917      	bls.n	800c420 <VL53L1_init_and_start_range+0x2e0>
 800c3f0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d113      	bne.n	800c420 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c3f8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c3fc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c400:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c404:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800c408:	f107 020c 	add.w	r2, r7, #12
 800c40c:	4413      	add	r3, r2
 800c40e:	461a      	mov	r2, r3
 800c410:	2120      	movs	r1, #32
 800c412:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c416:	f002 fa89 	bl	800e92c <VL53L1_i2c_encode_static_config>
 800c41a:	4603      	mov	r3, r0
 800c41c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c420:	1cbb      	adds	r3, r7, #2
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	2b02      	cmp	r3, #2
 800c426:	d917      	bls.n	800c458 <VL53L1_init_and_start_range+0x318>
 800c428:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d113      	bne.n	800c458 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c430:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c434:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c438:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c43c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c440:	f107 020c 	add.w	r2, r7, #12
 800c444:	4413      	add	r3, r2
 800c446:	461a      	mov	r2, r3
 800c448:	2116      	movs	r1, #22
 800c44a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c44e:	f002 fb50 	bl	800eaf2 <VL53L1_i2c_encode_general_config>
 800c452:	4603      	mov	r3, r0
 800c454:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c458:	1cbb      	adds	r3, r7, #2
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d917      	bls.n	800c490 <VL53L1_init_and_start_range+0x350>
 800c460:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c464:	2b00      	cmp	r3, #0
 800c466:	d113      	bne.n	800c490 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c468:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c46c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c470:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c474:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c478:	f107 020c 	add.w	r2, r7, #12
 800c47c:	4413      	add	r3, r2
 800c47e:	461a      	mov	r2, r3
 800c480:	2117      	movs	r1, #23
 800c482:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c486:	f002 fbb8 	bl	800ebfa <VL53L1_i2c_encode_timing_config>
 800c48a:	4603      	mov	r3, r0
 800c48c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c490:	1cbb      	adds	r3, r7, #2
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d036      	beq.n	800c506 <VL53L1_init_and_start_range+0x3c6>
 800c498:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d132      	bne.n	800c506 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c4a0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c4a4:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800c4a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800c4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4b0:	791b      	ldrb	r3, [r3, #4]
 800c4b2:	f003 0320 	and.w	r3, r3, #32
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d017      	beq.n	800c4ea <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800c4ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c4be:	789b      	ldrb	r3, [r3, #2]
 800c4c0:	f043 0301 	orr.w	r3, r3, #1
 800c4c4:	b2da      	uxtb	r2, r3
 800c4c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c4ca:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800c4cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c4d0:	789b      	ldrb	r3, [r3, #2]
 800c4d2:	f043 0301 	orr.w	r3, r3, #1
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c4dc:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800c4de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c4e2:	789a      	ldrb	r2, [r3, #2]
 800c4e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c4e8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c4ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800c4ee:	f107 020c 	add.w	r2, r7, #12
 800c4f2:	4413      	add	r3, r2
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	2112      	movs	r1, #18
 800c4f8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800c4fc:	f002 fbff 	bl	800ecfe <VL53L1_i2c_encode_dynamic_config>
 800c500:	4603      	mov	r3, r0
 800c502:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800c506:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d113      	bne.n	800c536 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800c50e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c512:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800c516:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c51a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800c51e:	f107 020c 	add.w	r2, r7, #12
 800c522:	4413      	add	r3, r2
 800c524:	461a      	mov	r2, r3
 800c526:	2105      	movs	r1, #5
 800c528:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800c52c:	f002 fc6c 	bl	800ee08 <VL53L1_i2c_encode_system_control>
 800c530:	4603      	mov	r3, r0
 800c532:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800c536:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10c      	bne.n	800c558 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800c53e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c542:	f107 020c 	add.w	r2, r7, #12
 800c546:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800c54a:	1d38      	adds	r0, r7, #4
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	f003 f94b 	bl	800f7e8 <VL53L1_WriteMulti>
 800c552:	4603      	mov	r3, r0
 800c554:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800c558:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d106      	bne.n	800c56e <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800c560:	1d3b      	adds	r3, r7, #4
 800c562:	6818      	ldr	r0, [r3, #0]
 800c564:	f001 f98a 	bl	800d87c <VL53L1_update_ll_driver_rd_state>
 800c568:	4603      	mov	r3, r0
 800c56a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800c56e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800c576:	1d3b      	adds	r3, r7, #4
 800c578:	6818      	ldr	r0, [r3, #0]
 800c57a:	f001 fa52 	bl	800da22 <VL53L1_update_ll_driver_cfg_state>
 800c57e:	4603      	mov	r3, r0
 800c580:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800c584:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800c588:	4618      	mov	r0, r3
 800c58a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop

0800c594 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b0c8      	sub	sp, #288	; 0x120
 800c598:	af00      	add	r7, sp, #0
 800c59a:	1d3b      	adds	r3, r7, #4
 800c59c:	6018      	str	r0, [r3, #0]
 800c59e:	460a      	mov	r2, r1
 800c5a0:	1cfb      	adds	r3, r7, #3
 800c5a2:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c5aa:	1d3b      	adds	r3, r7, #4
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800c5b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c5b6:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800c5ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800c5be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c5c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c5c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800c5ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c5ce:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800c5d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800c5d6:	2388      	movs	r3, #136	; 0x88
 800c5d8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800c5e8:	1cfb      	adds	r3, r7, #3
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d008      	beq.n	800c602 <VL53L1_get_measurement_results+0x6e>
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d10d      	bne.n	800c610 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800c5f4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c5f8:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800c5fc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c600:	e00a      	b.n	800c618 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800c602:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c606:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800c60a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800c60e:	e003      	b.n	800c618 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800c610:	232c      	movs	r3, #44	; 0x2c
 800c612:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800c616:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c618:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10c      	bne.n	800c63a <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800c620:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800c624:	f107 0208 	add.w	r2, r7, #8
 800c628:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800c62c:	1d38      	adds	r0, r7, #4
 800c62e:	6800      	ldr	r0, [r0, #0]
 800c630:	f003 f910 	bl	800f854 <VL53L1_ReadMulti>
 800c634:	4603      	mov	r3, r0
 800c636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800c63a:	1cfb      	adds	r3, r7, #3
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d917      	bls.n	800c672 <VL53L1_get_measurement_results+0xde>
 800c642:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c646:	2b00      	cmp	r3, #0
 800c648:	d113      	bne.n	800c672 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c64a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c64e:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800c652:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c656:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800c65a:	f107 0208 	add.w	r2, r7, #8
 800c65e:	4413      	add	r3, r2
 800c660:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800c664:	4619      	mov	r1, r3
 800c666:	2038      	movs	r0, #56	; 0x38
 800c668:	f002 fd60 	bl	800f12c <VL53L1_i2c_decode_debug_results>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800c672:	1cfb      	adds	r3, r7, #3
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d017      	beq.n	800c6aa <VL53L1_get_measurement_results+0x116>
 800c67a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d113      	bne.n	800c6aa <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c682:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800c686:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800c68a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c68e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800c692:	f107 0208 	add.w	r2, r7, #8
 800c696:	4413      	add	r3, r2
 800c698:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800c69c:	4619      	mov	r1, r3
 800c69e:	2021      	movs	r0, #33	; 0x21
 800c6a0:	f002 fce3 	bl	800f06a <VL53L1_i2c_decode_core_results>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800c6aa:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d110      	bne.n	800c6d4 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800c6b8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800c6bc:	f107 0208 	add.w	r2, r7, #8
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	202c      	movs	r0, #44	; 0x2c
 800c6ca:	f002 fbd8 	bl	800ee7e <VL53L1_i2c_decode_system_results>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c6d4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b088      	sub	sp, #32
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	60f8      	str	r0, [r7, #12]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800c6fe:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c704:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d106      	bne.n	800c71a <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800c70c:	7afb      	ldrb	r3, [r7, #11]
 800c70e:	4619      	mov	r1, r3
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f7ff ff3f 	bl	800c594 <VL53L1_get_measurement_results>
 800c716:	4603      	mov	r3, r0
 800c718:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800c71a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10c      	bne.n	800c73c <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800c728:	4618      	mov	r0, r3
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f000 f85e 	bl	800c7f8 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c742:	2b01      	cmp	r3, #1
 800c744:	d11f      	bne.n	800c786 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800c746:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10e      	bne.n	800c76c <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800c754:	2b00      	cmp	r3, #0
 800c756:	d109      	bne.n	800c76c <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f001 fe32 	bl	800e3c2 <VL53L1_low_power_auto_setup_manual_calibration>
 800c75e:	4603      	mov	r3, r0
 800c760:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2201      	movs	r2, #1
 800c766:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800c76a:	e00c      	b.n	800c786 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800c76c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d108      	bne.n	800c786 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d103      	bne.n	800c786 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	2202      	movs	r2, #2
 800c782:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800c79a:	2284      	movs	r2, #132	; 0x84
 800c79c:	6939      	ldr	r1, [r7, #16]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f003 fbd8 	bl	800ff54 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800c7a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d104      	bne.n	800c7b6 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f001 f8ed 	bl	800d98c <VL53L1_check_ll_driver_rd_state>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c7b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3720      	adds	r7, #32
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d107      	bne.n	800c7ea <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800c7da:	78fb      	ldrb	r3, [r7, #3]
 800c7dc:	2203      	movs	r2, #3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff fcad 	bl	800c140 <VL53L1_init_and_start_range>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800c7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b089      	sub	sp, #36	; 0x24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	78da      	ldrb	r2, [r3, #3]
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	3304      	adds	r3, #4
 800c81e:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800c820:	2300      	movs	r3, #0
 800c822:	77fb      	strb	r3, [r7, #31]
 800c824:	e0d0      	b.n	800c9c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	7ffa      	ldrb	r2, [r7, #31]
 800c82a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	2200      	movs	r2, #0
 800c830:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	78db      	ldrb	r3, [r3, #3]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10a      	bne.n	800c850 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	785b      	ldrb	r3, [r3, #1]
 800c83e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800c842:	2b09      	cmp	r3, #9
 800c844:	d104      	bne.n	800c850 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	2213      	movs	r2, #19
 800c84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c84e:	e007      	b.n	800c860 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	f003 031f 	and.w	r3, r3, #31
 800c858:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800c860:	7ffb      	ldrb	r3, [r7, #31]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800c866:	2b01      	cmp	r3, #1
 800c868:	d05d      	beq.n	800c926 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800c86a:	e0a7      	b.n	800c9bc <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	789b      	ldrb	r3, [r3, #2]
 800c870:	2b07      	cmp	r3, #7
 800c872:	d104      	bne.n	800c87e <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	821a      	strh	r2, [r3, #16]
 800c87c:	e00c      	b.n	800c898 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	789b      	ldrb	r3, [r3, #2]
 800c882:	2b08      	cmp	r3, #8
 800c884:	d104      	bne.n	800c890 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	821a      	strh	r2, [r3, #16]
 800c88e:	e003      	b.n	800c898 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	895b      	ldrh	r3, [r3, #10]
 800c8b4:	015b      	lsls	r3, r3, #5
 800c8b6:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8be:	d302      	bcc.n	800c8c6 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800c8c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8c4:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800c8da:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	fb02 f303 	mul.w	r3, r2, r3
 800c8e4:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8ec:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	da01      	bge.n	800c8f8 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800c8f4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c8f8:	12db      	asrs	r3, r3, #11
 800c8fa:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	b21a      	sxth	r2, r3
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	621a      	str	r2, [r3, #32]

			break;
 800c924:	e04a      	b.n	800c9bc <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c93c:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	8bdb      	ldrh	r3, [r3, #30]
 800c94a:	015b      	lsls	r3, r3, #5
 800c94c:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c954:	d302      	bcc.n	800c95c <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800c956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c95a:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	b29a      	uxth	r2, r3
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800c970:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	fb02 f303 	mul.w	r3, r2, r3
 800c97a:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c982:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	2b00      	cmp	r3, #0
 800c988:	da01      	bge.n	800c98e <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800c98a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c98e:	12db      	asrs	r3, r3, #11
 800c990:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	b21a      	sxth	r2, r3
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	621a      	str	r2, [r3, #32]

			break;
 800c9ba:	bf00      	nop
		}

		pdata++;
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	3340      	adds	r3, #64	; 0x40
 800c9c0:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800c9c2:	7ffb      	ldrb	r3, [r7, #31]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	77fb      	strb	r3, [r7, #31]
 800c9c8:	7ffb      	ldrb	r3, [r7, #31]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	f67f af2b 	bls.w	800c826 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	785b      	ldrb	r3, [r3, #1]
 800c9da:	f003 031f 	and.w	r3, r3, #31
 800c9de:	2b11      	cmp	r3, #17
 800c9e0:	bf8c      	ite	hi
 800c9e2:	2201      	movhi	r2, #1
 800c9e4:	2200      	movls	r2, #0
 800c9e6:	b2d2      	uxtb	r2, r2
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	d116      	bne.n	800ca1a <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	409a      	lsls	r2, r3
 800c9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ca28 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	bf14      	ite	ne
 800c9f8:	2301      	movne	r3, #1
 800c9fa:	2300      	moveq	r3, #0
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	785b      	ldrb	r3, [r3, #1]
 800ca06:	f003 031f 	and.w	r3, r3, #31
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800ca18:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800ca1a:	bf00      	nop
 800ca1c:	3724      	adds	r7, #36	; 0x24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	0002200e 	.word	0x0002200e

0800ca2c <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	460b      	mov	r3, r1
 800ca36:	607a      	str	r2, [r7, #4]
 800ca38:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800ca42:	897b      	ldrh	r3, [r7, #10]
 800ca44:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ca48:	2b38      	cmp	r3, #56	; 0x38
 800ca4a:	f200 8204 	bhi.w	800ce56 <VL53L1_get_tuning_parm+0x42a>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <VL53L1_get_tuning_parm+0x28>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800cb39 	.word	0x0800cb39
 800ca58:	0800cb47 	.word	0x0800cb47
 800ca5c:	0800cb55 	.word	0x0800cb55
 800ca60:	0800cb63 	.word	0x0800cb63
 800ca64:	0800cb71 	.word	0x0800cb71
 800ca68:	0800cb7f 	.word	0x0800cb7f
 800ca6c:	0800cb8d 	.word	0x0800cb8d
 800ca70:	0800cb9b 	.word	0x0800cb9b
 800ca74:	0800cba9 	.word	0x0800cba9
 800ca78:	0800cbb7 	.word	0x0800cbb7
 800ca7c:	0800cbc5 	.word	0x0800cbc5
 800ca80:	0800cbd3 	.word	0x0800cbd3
 800ca84:	0800cbe1 	.word	0x0800cbe1
 800ca88:	0800cbef 	.word	0x0800cbef
 800ca8c:	0800cbfd 	.word	0x0800cbfd
 800ca90:	0800cc0b 	.word	0x0800cc0b
 800ca94:	0800cc19 	.word	0x0800cc19
 800ca98:	0800cc27 	.word	0x0800cc27
 800ca9c:	0800cc35 	.word	0x0800cc35
 800caa0:	0800cc43 	.word	0x0800cc43
 800caa4:	0800cc51 	.word	0x0800cc51
 800caa8:	0800cc5f 	.word	0x0800cc5f
 800caac:	0800cc6d 	.word	0x0800cc6d
 800cab0:	0800cc7b 	.word	0x0800cc7b
 800cab4:	0800cc89 	.word	0x0800cc89
 800cab8:	0800cc97 	.word	0x0800cc97
 800cabc:	0800cca5 	.word	0x0800cca5
 800cac0:	0800ccb3 	.word	0x0800ccb3
 800cac4:	0800ccc1 	.word	0x0800ccc1
 800cac8:	0800cccf 	.word	0x0800cccf
 800cacc:	0800ccdd 	.word	0x0800ccdd
 800cad0:	0800cceb 	.word	0x0800cceb
 800cad4:	0800ccf9 	.word	0x0800ccf9
 800cad8:	0800cd07 	.word	0x0800cd07
 800cadc:	0800cd15 	.word	0x0800cd15
 800cae0:	0800cd23 	.word	0x0800cd23
 800cae4:	0800cd31 	.word	0x0800cd31
 800cae8:	0800cd3f 	.word	0x0800cd3f
 800caec:	0800cd4d 	.word	0x0800cd4d
 800caf0:	0800cd5b 	.word	0x0800cd5b
 800caf4:	0800cd69 	.word	0x0800cd69
 800caf8:	0800cd77 	.word	0x0800cd77
 800cafc:	0800cd85 	.word	0x0800cd85
 800cb00:	0800cd93 	.word	0x0800cd93
 800cb04:	0800cda1 	.word	0x0800cda1
 800cb08:	0800cdaf 	.word	0x0800cdaf
 800cb0c:	0800cdbd 	.word	0x0800cdbd
 800cb10:	0800cdcb 	.word	0x0800cdcb
 800cb14:	0800cdd9 	.word	0x0800cdd9
 800cb18:	0800cde7 	.word	0x0800cde7
 800cb1c:	0800cdf5 	.word	0x0800cdf5
 800cb20:	0800ce03 	.word	0x0800ce03
 800cb24:	0800ce11 	.word	0x0800ce11
 800cb28:	0800ce1f 	.word	0x0800ce1f
 800cb2c:	0800ce2d 	.word	0x0800ce2d
 800cb30:	0800ce3b 	.word	0x0800ce3b
 800cb34:	0800ce49 	.word	0x0800ce49

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800cb3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	601a      	str	r2, [r3, #0]
	break;
 800cb44:	e18e      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800cb4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	601a      	str	r2, [r3, #0]
	break;
 800cb52:	e187      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cb5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	601a      	str	r2, [r3, #0]
	break;
 800cb60:	e180      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cb68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	601a      	str	r2, [r3, #0]
	break;
 800cb6e:	e179      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cb76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	601a      	str	r2, [r3, #0]
	break;
 800cb7c:	e172      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800cb84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	601a      	str	r2, [r3, #0]
	break;
 800cb8a:	e16b      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cb92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	601a      	str	r2, [r3, #0]
	break;
 800cb98:	e164      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800cba0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	601a      	str	r2, [r3, #0]
	break;
 800cba6:	e15d      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800cbae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	601a      	str	r2, [r3, #0]
	break;
 800cbb4:	e156      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800cbbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
	break;
 800cbc2:	e14f      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800cbca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	601a      	str	r2, [r3, #0]
	break;
 800cbd0:	e148      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800cbd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
	break;
 800cbde:	e141      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800cbe6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	601a      	str	r2, [r3, #0]
	break;
 800cbec:	e13a      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800cbf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	601a      	str	r2, [r3, #0]
	break;
 800cbfa:	e133      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800cc02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]
	break;
 800cc08:	e12c      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800cc10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	601a      	str	r2, [r3, #0]
	break;
 800cc16:	e125      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800cc1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	601a      	str	r2, [r3, #0]
	break;
 800cc24:	e11e      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cc2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	601a      	str	r2, [r3, #0]
	break;
 800cc32:	e117      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800cc3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	601a      	str	r2, [r3, #0]
	break;
 800cc40:	e110      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800cc48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	601a      	str	r2, [r3, #0]
	break;
 800cc4e:	e109      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cc56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	601a      	str	r2, [r3, #0]
	break;
 800cc5c:	e102      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800cc64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	601a      	str	r2, [r3, #0]
	break;
 800cc6a:	e0fb      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800cc72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	601a      	str	r2, [r3, #0]
	break;
 800cc78:	e0f4      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800cc80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	601a      	str	r2, [r3, #0]
	break;
 800cc86:	e0ed      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800cc8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	601a      	str	r2, [r3, #0]
	break;
 800cc94:	e0e6      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cc9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	601a      	str	r2, [r3, #0]
	break;
 800cca2:	e0df      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800ccaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	601a      	str	r2, [r3, #0]
	break;
 800ccb0:	e0d8      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800ccb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	601a      	str	r2, [r3, #0]
	break;
 800ccbe:	e0d1      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800ccc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	601a      	str	r2, [r3, #0]
	break;
 800cccc:	e0ca      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ccd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	601a      	str	r2, [r3, #0]
	break;
 800ccda:	e0c3      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800cce2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	601a      	str	r2, [r3, #0]
	break;
 800cce8:	e0bc      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800ccf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
	break;
 800ccf6:	e0b5      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ccfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	601a      	str	r2, [r3, #0]
	break;
 800cd04:	e0ae      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800cd0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	601a      	str	r2, [r3, #0]
	break;
 800cd12:	e0a7      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800cd1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	601a      	str	r2, [r3, #0]
	break;
 800cd20:	e0a0      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800cd28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
	break;
 800cd2e:	e099      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800cd36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	601a      	str	r2, [r3, #0]
	break;
 800cd3c:	e092      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cd44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	601a      	str	r2, [r3, #0]
	break;
 800cd4a:	e08b      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cd52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	601a      	str	r2, [r3, #0]
	break;
 800cd58:	e084      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800cd60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	601a      	str	r2, [r3, #0]
	break;
 800cd66:	e07d      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800cd6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	601a      	str	r2, [r3, #0]
	break;
 800cd74:	e076      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800cd7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	601a      	str	r2, [r3, #0]
	break;
 800cd82:	e06f      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800cd8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	601a      	str	r2, [r3, #0]
	break;
 800cd90:	e068      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800cd98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	601a      	str	r2, [r3, #0]
	break;
 800cd9e:	e061      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800cda6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	601a      	str	r2, [r3, #0]
	break;
 800cdac:	e05a      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800cdb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	601a      	str	r2, [r3, #0]
	break;
 800cdba:	e053      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800cdc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	601a      	str	r2, [r3, #0]
	break;
 800cdc8:	e04c      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800cdd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	601a      	str	r2, [r3, #0]
	break;
 800cdd6:	e045      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800cdde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	601a      	str	r2, [r3, #0]
	break;
 800cde4:	e03e      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cdec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	601a      	str	r2, [r3, #0]
	break;
 800cdf2:	e037      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cdfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
	break;
 800ce00:	e030      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ce08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	601a      	str	r2, [r3, #0]
	break;
 800ce0e:	e029      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ce16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	601a      	str	r2, [r3, #0]
	break;
 800ce1c:	e022      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	601a      	str	r2, [r3, #0]
	break;
 800ce2a:	e01b      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800ce32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	601a      	str	r2, [r3, #0]
	break;
 800ce38:	e014      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	601a      	str	r2, [r3, #0]
	break;
 800ce46:	e00d      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ce4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
	break;
 800ce54:	e006      	b.n	800ce64 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ce5c:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800ce5e:	23fc      	movs	r3, #252	; 0xfc
 800ce60:	75fb      	strb	r3, [r7, #23]
	break;
 800ce62:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800ce64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	371c      	adds	r7, #28
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2208      	movs	r2, #8
 800ce84:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	220b      	movs	r2, #11
 800ce8a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce92:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ce9a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800cea2:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ceaa:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ceac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2212      	movs	r2, #18
 800ced2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	220f      	movs	r2, #15
 800ced8:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2202      	movs	r2, #2
 800cede:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800cee6:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	220c      	movs	r2, #12
 800ceec:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ceee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3714      	adds	r7, #20
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr

0800cefe <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	895b      	ldrh	r3, [r3, #10]
 800cf10:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	895b      	ldrh	r3, [r3, #10]
 800cf2e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2240      	movs	r2, #64	; 0x40
 800cf52:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10d      	bne.n	800cf78 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d108      	bne.n	800cf78 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d103      	bne.n	800cf78 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	741a      	strb	r2, [r3, #16]
 800cf76:	e002      	b.n	800cf7e <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800cf7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d114      	bne.n	800cfb0 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d110      	bne.n	800cfb0 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	6818      	ldr	r0, [r3, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	7d1b      	ldrb	r3, [r3, #20]
 800cfa2:	f000 ffc9 	bl	800df38 <VL53L1_calc_range_ignore_threshold>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	82da      	strh	r2, [r3, #22]
 800cfae:	e002      	b.n	800cfb6 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cfb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b085      	sub	sp, #20
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800cfd4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cfdc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800cfe4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800cfec:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2208      	movs	r2, #8
 800cff2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2228      	movs	r2, #40	; 0x28
 800cff8:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2209      	movs	r2, #9
 800cffe:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d018:	2300      	movs	r3, #0
 800d01a:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f248 0203 	movw	r2, #32771	; 0x8003
 800d022:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f248 0201 	movw	r2, #32769	; 0x8001
 800d02a:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f248 0241 	movw	r2, #32833	; 0x8041
 800d032:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	220e      	movs	r2, #14
 800d038:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	220a      	movs	r2, #10
 800d03e:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2206      	movs	r2, #6
 800d044:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	220e      	movs	r2, #14
 800d04a:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	220a      	movs	r2, #10
 800d050:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2206      	movs	r2, #6
 800d056:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2202      	movs	r2, #2
 800d05c:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2221      	movs	r2, #33	; 0x21
 800d062:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d076:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d07e:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d086:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	22c0      	movs	r2, #192	; 0xc0
 800d08c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	22c0      	movs	r2, #192	; 0xc0
 800d092:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	22c0      	movs	r2, #192	; 0xc0
 800d098:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2208      	movs	r2, #8
 800d09e:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2210      	movs	r2, #16
 800d0a4:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d0d4:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d0dc:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f248 0230 	movw	r2, #32816	; 0x8030
 800d0e4:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0ec:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d0f4:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d0fc:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d104:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d10c:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800d114:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d11c:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800d11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d12e:	b480      	push	{r7}
 800d130:	b087      	sub	sp, #28
 800d132:	af00      	add	r7, sp, #0
 800d134:	60f8      	str	r0, [r7, #12]
 800d136:	60b9      	str	r1, [r7, #8]
 800d138:	607a      	str	r2, [r7, #4]
 800d13a:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d13c:	2300      	movs	r3, #0
 800d13e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d146:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2211      	movs	r2, #17
 800d188:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2202      	movs	r2, #2
 800d18e:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2202      	movs	r2, #2
 800d19a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2208      	movs	r2, #8
 800d1a0:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	22ff      	movs	r2, #255	; 0xff
 800d1de:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2200      	movs	r2, #0
 800d206:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2200      	movs	r2, #0
 800d20c:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2220      	movs	r2, #32
 800d212:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	220b      	movs	r2, #11
 800d218:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2202      	movs	r2, #2
 800d226:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	220d      	movs	r2, #13
 800d22c:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	2200      	movs	r2, #0
 800d23a:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	2201      	movs	r2, #1
 800d240:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2200      	movs	r2, #0
 800d246:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2200      	movs	r2, #0
 800d24c:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800d254:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2200      	movs	r2, #0
 800d25a:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2238      	movs	r2, #56	; 0x38
 800d260:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	22ff      	movs	r2, #255	; 0xff
 800d266:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	2201      	movs	r2, #1
 800d26c:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	221a      	movs	r2, #26
 800d278:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2220      	movs	r2, #32
 800d284:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2201      	movs	r2, #1
 800d28a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	22cc      	movs	r2, #204	; 0xcc
 800d290:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	220b      	movs	r2, #11
 800d296:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	22f5      	movs	r2, #245	; 0xf5
 800d2a2:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2209      	movs	r2, #9
 800d2a8:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ac:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b4:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2208      	movs	r2, #8
 800d2be:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2278      	movs	r2, #120	; 0x78
 800d2c4:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	220b      	movs	r2, #11
 800d2f8:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2209      	movs	r2, #9
 800d2fe:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2201      	movs	r2, #1
 800d314:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	22c7      	movs	r2, #199	; 0xc7
 800d32e:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	22ff      	movs	r2, #255	; 0xff
 800d334:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	22db      	movs	r2, #219	; 0xdb
 800d33a:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2202      	movs	r2, #2
 800d340:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	2200      	movs	r2, #0
 800d346:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800d348:	6a3b      	ldr	r3, [r7, #32]
 800d34a:	2201      	movs	r2, #1
 800d34c:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800d34e:	6a3b      	ldr	r3, [r7, #32]
 800d350:	2201      	movs	r2, #1
 800d352:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	2221      	movs	r2, #33	; 0x21
 800d358:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800d35a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	371c      	adds	r7, #28
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b088      	sub	sp, #32
 800d36e:	af02      	add	r7, sp, #8
 800d370:	60f8      	str	r0, [r7, #12]
 800d372:	60b9      	str	r1, [r7, #8]
 800d374:	607a      	str	r2, [r7, #4]
 800d376:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d378:	2300      	movs	r3, #0
 800d37a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	6a3b      	ldr	r3, [r7, #32]
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f7ff fecf 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800d390:	4603      	mov	r3, r0
 800d392:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d121      	bne.n	800d3e0 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2207      	movs	r2, #7
 800d3a0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2205      	movs	r2, #5
 800d3a6:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2208      	movs	r2, #8
 800d3bc:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2238      	movs	r2, #56	; 0x38
 800d3c2:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	2207      	movs	r2, #7
 800d3c8:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2205      	movs	r2, #5
 800d3ce:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d3e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b088      	sub	sp, #32
 800d3f0:	af02      	add	r7, sp, #8
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	6a3b      	ldr	r3, [r7, #32]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	68b9      	ldr	r1, [r7, #8]
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f7ff fe8e 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800d412:	4603      	mov	r3, r0
 800d414:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d121      	bne.n	800d462 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	220f      	movs	r2, #15
 800d422:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	220d      	movs	r2, #13
 800d428:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800d432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d434:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2208      	movs	r2, #8
 800d43e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	22b8      	movs	r2, #184	; 0xb8
 800d444:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	220f      	movs	r2, #15
 800d44a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	220d      	movs	r2, #13
 800d450:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800d45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45c:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3718      	adds	r7, #24
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b088      	sub	sp, #32
 800d472:	af02      	add	r7, sp, #8
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	60b9      	str	r1, [r7, #8]
 800d478:	607a      	str	r2, [r7, #4]
 800d47a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d47c:	2300      	movs	r3, #0
 800d47e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	68b9      	ldr	r1, [r7, #8]
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f7ff fe4d 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800d494:	4603      	mov	r3, r0
 800d496:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d105      	bne.n	800d4ac <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	223b      	movs	r2, #59	; 0x3b
 800d4aa:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d4ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3718      	adds	r7, #24
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af02      	add	r7, sp, #8
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
 800d4c4:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f7ff fe28 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d105      	bne.n	800d4f6 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2202      	movs	r2, #2
 800d4ee:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	225b      	movs	r2, #91	; 0x5b
 800d4f4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d4f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3718      	adds	r7, #24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b088      	sub	sp, #32
 800d506:	af02      	add	r7, sp, #8
 800d508:	60f8      	str	r0, [r7, #12]
 800d50a:	60b9      	str	r1, [r7, #8]
 800d50c:	607a      	str	r2, [r7, #4]
 800d50e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d510:	2300      	movs	r3, #0
 800d512:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	9301      	str	r3, [sp, #4]
 800d518:	6a3b      	ldr	r3, [r7, #32]
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f7ff fe03 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800d528:	4603      	mov	r3, r0
 800d52a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d52c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d11a      	bne.n	800d56a <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2200      	movs	r2, #0
 800d538:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	22b1      	movs	r2, #177	; 0xb1
 800d544:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	22d4      	movs	r2, #212	; 0xd4
 800d550:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d558:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	2240      	movs	r2, #64	; 0x40
 800d568:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d56a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b088      	sub	sp, #32
 800d57a:	af02      	add	r7, sp, #8
 800d57c:	60f8      	str	r0, [r7, #12]
 800d57e:	60b9      	str	r1, [r7, #8]
 800d580:	607a      	str	r2, [r7, #4]
 800d582:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d584:	2300      	movs	r3, #0
 800d586:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800d588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58a:	9301      	str	r3, [sp, #4]
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	68b9      	ldr	r1, [r7, #8]
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f7ff fee7 	bl	800d36a <VL53L1_preset_mode_standard_ranging_short_range>
 800d59c:	4603      	mov	r3, r0
 800d59e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d5a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d11a      	bne.n	800d5de <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2284      	movs	r2, #132	; 0x84
 800d5b8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	22b1      	movs	r2, #177	; 0xb1
 800d5c4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d5cc:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	2240      	movs	r2, #64	; 0x40
 800d5dc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b088      	sub	sp, #32
 800d5ee:	af02      	add	r7, sp, #8
 800d5f0:	60f8      	str	r0, [r7, #12]
 800d5f2:	60b9      	str	r1, [r7, #8]
 800d5f4:	607a      	str	r2, [r7, #4]
 800d5f6:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	68b9      	ldr	r1, [r7, #8]
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f7ff feee 	bl	800d3ec <VL53L1_preset_mode_standard_ranging_long_range>
 800d610:	4603      	mov	r3, r0
 800d612:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d11a      	bne.n	800d652 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	2200      	movs	r2, #0
 800d620:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2297      	movs	r2, #151	; 0x97
 800d62c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	22b1      	movs	r2, #177	; 0xb1
 800d638:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d640:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	2240      	movs	r2, #64	; 0x40
 800d650:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d652:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b088      	sub	sp, #32
 800d662:	af02      	add	r7, sp, #8
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	60b9      	str	r1, [r7, #8]
 800d668:	607a      	str	r2, [r7, #4]
 800d66a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d66c:	2300      	movs	r3, #0
 800d66e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f7ff ff3f 	bl	800d502 <VL53L1_preset_mode_timed_ranging>
 800d684:	4603      	mov	r3, r0
 800d686:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d106      	bne.n	800d69e <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	68b8      	ldr	r0, [r7, #8]
 800d696:	f000 fe7b 	bl	800e390 <VL53L1_config_low_power_auto_mode>
 800d69a:	4603      	mov	r3, r0
 800d69c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b088      	sub	sp, #32
 800d6ae:	af02      	add	r7, sp, #8
 800d6b0:	60f8      	str	r0, [r7, #12]
 800d6b2:	60b9      	str	r1, [r7, #8]
 800d6b4:	607a      	str	r2, [r7, #4]
 800d6b6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6be:	9301      	str	r3, [sp, #4]
 800d6c0:	6a3b      	ldr	r3, [r7, #32]
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	68b9      	ldr	r1, [r7, #8]
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7ff ff53 	bl	800d576 <VL53L1_preset_mode_timed_ranging_short_range>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d6d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d106      	bne.n	800d6ea <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d6dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	68b8      	ldr	r0, [r7, #8]
 800d6e2:	f000 fe55 	bl	800e390 <VL53L1_config_low_power_auto_mode>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3718      	adds	r7, #24
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af02      	add	r7, sp, #8
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	607a      	str	r2, [r7, #4]
 800d702:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d704:	2300      	movs	r3, #0
 800d706:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	9301      	str	r3, [sp, #4]
 800d70c:	6a3b      	ldr	r3, [r7, #32]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	68b9      	ldr	r1, [r7, #8]
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f7ff ff67 	bl	800d5ea <VL53L1_preset_mode_timed_ranging_long_range>
 800d71c:	4603      	mov	r3, r0
 800d71e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800d720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d106      	bne.n	800d736 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800d728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	68b8      	ldr	r0, [r7, #8]
 800d72e:	f000 fe2f 	bl	800e390 <VL53L1_config_low_power_auto_mode>
 800d732:	4603      	mov	r3, r0
 800d734:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3718      	adds	r7, #24
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b088      	sub	sp, #32
 800d746:	af02      	add	r7, sp, #8
 800d748:	60f8      	str	r0, [r7, #12]
 800d74a:	60b9      	str	r1, [r7, #8]
 800d74c:	607a      	str	r2, [r7, #4]
 800d74e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d750:	2300      	movs	r3, #0
 800d752:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	6a3b      	ldr	r3, [r7, #32]
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	68b9      	ldr	r1, [r7, #8]
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f7ff fce3 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800d768:	4603      	mov	r3, r0
 800d76a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d76c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d116      	bne.n	800d7a2 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2200      	movs	r2, #0
 800d778:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	22b1      	movs	r2, #177	; 0xb1
 800d784:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	22d4      	movs	r2, #212	; 0xd4
 800d790:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	2210      	movs	r2, #16
 800d7a0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800d7a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3718      	adds	r7, #24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b088      	sub	sp, #32
 800d7b2:	af02      	add	r7, sp, #8
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	607a      	str	r2, [r7, #4]
 800d7ba:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	68b9      	ldr	r1, [r7, #8]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff fcad 	bl	800d12e <VL53L1_preset_mode_standard_ranging>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d7d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d7e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b085      	sub	sp, #20
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2202      	movs	r2, #2
 800d80a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	220d      	movs	r2, #13
 800d812:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f640 028e 	movw	r2, #2190	; 0x88e
 800d81c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d81e:	bf00      	nop
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b085      	sub	sp, #20
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	460b      	mov	r3, r1
 800d834:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	332c      	adds	r3, #44	; 0x2c
 800d83e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	78fa      	ldrb	r2, [r7, #3]
 800d844:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2200      	movs	r2, #0
 800d84a:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2202      	movs	r2, #2
 800d850:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2200      	movs	r2, #0
 800d856:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	78fa      	ldrb	r2, [r7, #3]
 800d85c:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2200      	movs	r2, #0
 800d862:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2202      	movs	r2, #2
 800d868:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2200      	movs	r2, #0
 800d86e:	71da      	strb	r2, [r3, #7]

}
 800d870:	bf00      	nop
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b087      	sub	sp, #28
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800d884:	2300      	movs	r3, #0
 800d886:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	332c      	adds	r3, #44	; 0x2c
 800d890:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10c      	bne.n	800d8ba <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2203      	movs	r2, #3
 800d8a4:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	71da      	strb	r2, [r3, #7]
 800d8b8:	e060      	b.n	800d97c <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	795b      	ldrb	r3, [r3, #5]
 800d8be:	2bff      	cmp	r3, #255	; 0xff
 800d8c0:	d103      	bne.n	800d8ca <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2280      	movs	r2, #128	; 0x80
 800d8c6:	715a      	strb	r2, [r3, #5]
 800d8c8:	e005      	b.n	800d8d6 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	795b      	ldrb	r3, [r3, #5]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	799b      	ldrb	r3, [r3, #6]
 800d8da:	f083 0302 	eor.w	r3, r3, #2
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	791b      	ldrb	r3, [r3, #4]
 800d8e8:	3b03      	subs	r3, #3
 800d8ea:	2b05      	cmp	r3, #5
 800d8ec:	d839      	bhi.n	800d962 <VL53L1_update_ll_driver_rd_state+0xe6>
 800d8ee:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <VL53L1_update_ll_driver_rd_state+0x78>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d90d 	.word	0x0800d90d
 800d8f8:	0800d963 	.word	0x0800d963
 800d8fc:	0800d963 	.word	0x0800d963
 800d900:	0800d937 	.word	0x0800d937
 800d904:	0800d945 	.word	0x0800d945
 800d908:	0800d94d 	.word	0x0800d94d

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800d912:	f003 0302 	and.w	r3, r3, #2
 800d916:	2b00      	cmp	r3, #0
 800d918:	dd03      	ble.n	800d922 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2206      	movs	r2, #6
 800d91e:	711a      	strb	r2, [r3, #4]
 800d920:	e002      	b.n	800d928 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2208      	movs	r2, #8
 800d926:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	71da      	strb	r2, [r3, #7]

		break;
 800d934:	e022      	b.n	800d97c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2208      	movs	r2, #8
 800d940:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d942:	e01b      	b.n	800d97c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2208      	movs	r2, #8
 800d948:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d94a:	e017      	b.n	800d97c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	79db      	ldrb	r3, [r3, #7]
 800d950:	f083 0301 	eor.w	r3, r3, #1
 800d954:	b2da      	uxtb	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2208      	movs	r2, #8
 800d95e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d960:	e00c      	b.n	800d97c <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2203      	movs	r2, #3
 800d966:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2202      	movs	r2, #2
 800d972:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	71da      	strb	r2, [r3, #7]

		break;
 800d97a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d980:	4618      	mov	r0, r3
 800d982:	371c      	adds	r7, #28
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b089      	sub	sp, #36	; 0x24
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d994:	2300      	movs	r3, #0
 800d996:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	332c      	adds	r3, #44	; 0x2c
 800d9a0:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800d9a8:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800d9ba:	f003 031f 	and.w	r3, r3, #31
 800d9be:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	78db      	ldrb	r3, [r3, #3]
 800d9c4:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d9ca:	111b      	asrs	r3, r3, #4
 800d9cc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d017      	beq.n	800da12 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	791b      	ldrb	r3, [r3, #4]
 800d9e6:	2b06      	cmp	r3, #6
 800d9e8:	d105      	bne.n	800d9f6 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800d9ea:	7bfb      	ldrb	r3, [r7, #15]
 800d9ec:	2b12      	cmp	r3, #18
 800d9ee:	d010      	beq.n	800da12 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800d9f0:	23ef      	movs	r3, #239	; 0xef
 800d9f2:	77fb      	strb	r3, [r7, #31]
 800d9f4:	e00d      	b.n	800da12 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	795b      	ldrb	r3, [r3, #5]
 800d9fa:	7bba      	ldrb	r2, [r7, #14]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d001      	beq.n	800da04 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800da00:	23ee      	movs	r3, #238	; 0xee
 800da02:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	799b      	ldrb	r3, [r3, #6]
 800da08:	7b7a      	ldrb	r2, [r7, #13]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d001      	beq.n	800da12 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800da0e:	23ed      	movs	r3, #237	; 0xed
 800da10:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800da12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3724      	adds	r7, #36	; 0x24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800da22:	b480      	push	{r7}
 800da24:	b087      	sub	sp, #28
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800da2a:	2300      	movs	r3, #0
 800da2c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	332c      	adds	r3, #44	; 0x2c
 800da36:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800da3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10c      	bne.n	800da60 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2203      	movs	r2, #3
 800da4a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2202      	movs	r2, #2
 800da56:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2200      	movs	r2, #0
 800da5c:	70da      	strb	r2, [r3, #3]
 800da5e:	e03e      	b.n	800dade <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	785b      	ldrb	r3, [r3, #1]
 800da64:	2bff      	cmp	r3, #255	; 0xff
 800da66:	d103      	bne.n	800da70 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2280      	movs	r2, #128	; 0x80
 800da6c:	705a      	strb	r2, [r3, #1]
 800da6e:	e005      	b.n	800da7c <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	785b      	ldrb	r3, [r3, #1]
 800da74:	3301      	adds	r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	789b      	ldrb	r3, [r3, #2]
 800da80:	f083 0302 	eor.w	r3, r3, #2
 800da84:	b2da      	uxtb	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b03      	cmp	r3, #3
 800da90:	d002      	beq.n	800da98 <VL53L1_update_ll_driver_cfg_state+0x76>
 800da92:	2b04      	cmp	r3, #4
 800da94:	d00e      	beq.n	800dab4 <VL53L1_update_ll_driver_cfg_state+0x92>
 800da96:	e015      	b.n	800dac4 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	78db      	ldrb	r3, [r3, #3]
 800da9c:	f083 0301 	eor.w	r3, r3, #1
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2201      	movs	r2, #1
 800daaa:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2204      	movs	r2, #4
 800dab0:	701a      	strb	r2, [r3, #0]
		break;
 800dab2:	e014      	b.n	800dade <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	78db      	ldrb	r3, [r3, #3]
 800dab8:	f083 0301 	eor.w	r3, r3, #1
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	70da      	strb	r2, [r3, #3]

		break;
 800dac2:	e00c      	b.n	800dade <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2203      	movs	r2, #3
 800dac8:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2202      	movs	r2, #2
 800dad4:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2200      	movs	r2, #0
 800dada:	70da      	strb	r2, [r3, #3]

		break;
 800dadc:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800dade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	371c      	adds	r7, #28
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7c1a      	ldrb	r2, [r3, #16]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	3301      	adds	r3, #1
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	7c52      	ldrb	r2, [r2, #17]
 800db08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	3302      	adds	r3, #2
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	7c92      	ldrb	r2, [r2, #18]
 800db12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	3303      	adds	r3, #3
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	7cd2      	ldrb	r2, [r2, #19]
 800db1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	3304      	adds	r3, #4
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	7d12      	ldrb	r2, [r2, #20]
 800db26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	3305      	adds	r3, #5
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	7d52      	ldrb	r2, [r2, #21]
 800db30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	3306      	adds	r3, #6
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	7d92      	ldrb	r2, [r2, #22]
 800db3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	3307      	adds	r3, #7
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	7dd2      	ldrb	r2, [r2, #23]
 800db44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	3308      	adds	r3, #8
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	7e12      	ldrb	r2, [r2, #24]
 800db4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	3309      	adds	r3, #9
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	7e52      	ldrb	r2, [r2, #25]
 800db58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	330a      	adds	r3, #10
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	7e92      	ldrb	r2, [r2, #26]
 800db62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	330b      	adds	r3, #11
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	7ed2      	ldrb	r2, [r2, #27]
 800db6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	330c      	adds	r3, #12
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	7f12      	ldrb	r2, [r2, #28]
 800db76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	330d      	adds	r3, #13
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	7f52      	ldrb	r2, [r2, #29]
 800db80:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	330e      	adds	r3, #14
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	7f92      	ldrb	r2, [r2, #30]
 800db8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	330f      	adds	r3, #15
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	7fd2      	ldrb	r2, [r2, #31]
 800db94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	3310      	adds	r3, #16
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800dba0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	3311      	adds	r3, #17
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800dbac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	3312      	adds	r3, #18
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800dbb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	3313      	adds	r3, #19
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800dbc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	3314      	adds	r3, #20
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800dbd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	3315      	adds	r3, #21
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800dbdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	3316      	adds	r3, #22
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800dbe8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	3317      	adds	r3, #23
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800dbf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	3318      	adds	r3, #24
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800dc00:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	3319      	adds	r3, #25
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800dc0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	331a      	adds	r3, #26
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800dc18:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	331b      	adds	r3, #27
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800dc24:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	331c      	adds	r3, #28
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800dc30:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	331d      	adds	r3, #29
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800dc3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	331e      	adds	r3, #30
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800dc48:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	331f      	adds	r3, #31
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800dc54:	701a      	strb	r2, [r3, #0]
}
 800dc56:	bf00      	nop
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b085      	sub	sp, #20
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	4603      	mov	r3, r0
 800dc6a:	603a      	str	r2, [r7, #0]
 800dc6c:	80fb      	strh	r3, [r7, #6]
 800dc6e:	460b      	mov	r3, r1
 800dc70:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800dc7a:	88fb      	ldrh	r3, [r7, #6]
 800dc7c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800dc7e:	2300      	movs	r3, #0
 800dc80:	81fb      	strh	r3, [r7, #14]
 800dc82:	e00e      	b.n	800dca2 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800dc84:	88ba      	ldrh	r2, [r7, #4]
 800dc86:	89fb      	ldrh	r3, [r7, #14]
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	683a      	ldr	r2, [r7, #0]
 800dc8e:	4413      	add	r3, r2
 800dc90:	89ba      	ldrh	r2, [r7, #12]
 800dc92:	b2d2      	uxtb	r2, r2
 800dc94:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800dc96:	89bb      	ldrh	r3, [r7, #12]
 800dc98:	0a1b      	lsrs	r3, r3, #8
 800dc9a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800dc9c:	89fb      	ldrh	r3, [r7, #14]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	81fb      	strh	r3, [r7, #14]
 800dca2:	89fa      	ldrh	r2, [r7, #14]
 800dca4:	88bb      	ldrh	r3, [r7, #4]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d3ec      	bcc.n	800dc84 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800dcaa:	bf00      	nop
 800dcac:	bf00      	nop
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	6039      	str	r1, [r7, #0]
 800dcc2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800dcc8:	e00a      	b.n	800dce0 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800dcca:	89fb      	ldrh	r3, [r7, #14]
 800dccc:	021b      	lsls	r3, r3, #8
 800dcce:	b21a      	sxth	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	1c59      	adds	r1, r3, #1
 800dcd4:	6039      	str	r1, [r7, #0]
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	b21b      	sxth	r3, r3
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	b21b      	sxth	r3, r3
 800dcde:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	1e5a      	subs	r2, r3, #1
 800dce4:	80fa      	strh	r2, [r7, #6]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1ef      	bne.n	800dcca <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800dcea:	89fb      	ldrh	r3, [r7, #14]
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3714      	adds	r7, #20
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	603a      	str	r2, [r7, #0]
 800dd02:	80fb      	strh	r3, [r7, #6]
 800dd04:	460b      	mov	r3, r1
 800dd06:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800dd10:	88fb      	ldrh	r3, [r7, #6]
 800dd12:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800dd14:	2300      	movs	r3, #0
 800dd16:	81fb      	strh	r3, [r7, #14]
 800dd18:	e00f      	b.n	800dd3a <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800dd1a:	88ba      	ldrh	r2, [r7, #4]
 800dd1c:	89fb      	ldrh	r3, [r7, #14]
 800dd1e:	1ad3      	subs	r3, r2, r3
 800dd20:	3b01      	subs	r3, #1
 800dd22:	683a      	ldr	r2, [r7, #0]
 800dd24:	4413      	add	r3, r2
 800dd26:	89ba      	ldrh	r2, [r7, #12]
 800dd28:	b2d2      	uxtb	r2, r2
 800dd2a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800dd2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dd30:	121b      	asrs	r3, r3, #8
 800dd32:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800dd34:	89fb      	ldrh	r3, [r7, #14]
 800dd36:	3301      	adds	r3, #1
 800dd38:	81fb      	strh	r3, [r7, #14]
 800dd3a:	89fa      	ldrh	r2, [r7, #14]
 800dd3c:	88bb      	ldrh	r3, [r7, #4]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d3eb      	bcc.n	800dd1a <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800dd42:	bf00      	nop
 800dd44:	bf00      	nop
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	6039      	str	r1, [r7, #0]
 800dd5a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	b25b      	sxtb	r3, r3
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	da0e      	bge.n	800dd88 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800dd6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd6e:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800dd70:	e00a      	b.n	800dd88 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800dd72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd76:	021b      	lsls	r3, r3, #8
 800dd78:	b21a      	sxth	r2, r3
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	1c59      	adds	r1, r3, #1
 800dd7e:	6039      	str	r1, [r7, #0]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	b21b      	sxth	r3, r3
 800dd84:	4313      	orrs	r3, r2
 800dd86:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800dd88:	88fb      	ldrh	r3, [r7, #6]
 800dd8a:	1e5a      	subs	r2, r3, #1
 800dd8c:	80fa      	strh	r2, [r7, #6]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1ef      	bne.n	800dd72 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800dd92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dda2:	b480      	push	{r7}
 800dda4:	b087      	sub	sp, #28
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	60f8      	str	r0, [r7, #12]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	607a      	str	r2, [r7, #4]
 800ddae:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	82fb      	strh	r3, [r7, #22]
 800ddc0:	e00e      	b.n	800dde0 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800ddc2:	897a      	ldrh	r2, [r7, #10]
 800ddc4:	8afb      	ldrh	r3, [r7, #22]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	4413      	add	r3, r2
 800ddce:	693a      	ldr	r2, [r7, #16]
 800ddd0:	b2d2      	uxtb	r2, r2
 800ddd2:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	0a1b      	lsrs	r3, r3, #8
 800ddd8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800ddda:	8afb      	ldrh	r3, [r7, #22]
 800dddc:	3301      	adds	r3, #1
 800ddde:	82fb      	strh	r3, [r7, #22]
 800dde0:	8afa      	ldrh	r2, [r7, #22]
 800dde2:	897b      	ldrh	r3, [r7, #10]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d3ec      	bcc.n	800ddc2 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800dde8:	bf00      	nop
 800ddea:	bf00      	nop
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b085      	sub	sp, #20
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	6039      	str	r1, [r7, #0]
 800de00:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800de02:	2300      	movs	r3, #0
 800de04:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800de06:	e007      	b.n	800de18 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	021a      	lsls	r2, r3, #8
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	1c59      	adds	r1, r3, #1
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	4313      	orrs	r3, r2
 800de16:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800de18:	88fb      	ldrh	r3, [r7, #6]
 800de1a:	1e5a      	subs	r2, r3, #1
 800de1c:	80fa      	strh	r2, [r7, #6]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1f2      	bne.n	800de08 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800de22:	68fb      	ldr	r3, [r7, #12]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	6039      	str	r1, [r7, #0]
 800de3a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800de3c:	2300      	movs	r3, #0
 800de3e:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	b25b      	sxtb	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	da0b      	bge.n	800de62 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800de4a:	f04f 33ff 	mov.w	r3, #4294967295
 800de4e:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800de50:	e007      	b.n	800de62 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	021a      	lsls	r2, r3, #8
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	1c59      	adds	r1, r3, #1
 800de5a:	6039      	str	r1, [r7, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	4313      	orrs	r3, r2
 800de60:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800de62:	88fb      	ldrh	r3, [r7, #6]
 800de64:	1e5a      	subs	r2, r3, #1
 800de66:	80fa      	strh	r2, [r7, #6]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1f2      	bne.n	800de52 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800de6c:	68fb      	ldr	r3, [r7, #12]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr

0800de7a <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	460b      	mov	r3, r1
 800de84:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	78fa      	ldrb	r2, [r7, #3]
 800de92:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800de9c:	461a      	mov	r2, r3
 800de9e:	2183      	movs	r1, #131	; 0x83
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f001 fd0d 	bl	800f8c0 <VL53L1_WrByte>
 800dea6:	4603      	mov	r3, r0
 800dea8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800deaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}

0800deb6 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b084      	sub	sp, #16
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800debe:	2300      	movs	r3, #0
 800dec0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800dec2:	2101      	movs	r1, #1
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7ff ffd8 	bl	800de7a <VL53L1_set_powerforce_register>
 800deca:	4603      	mov	r3, r0
 800decc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b086      	sub	sp, #24
 800dede:	af00      	add	r7, sp, #0
 800dee0:	4603      	mov	r3, r0
 800dee2:	460a      	mov	r2, r1
 800dee4:	80fb      	strh	r3, [r7, #6]
 800dee6:	4613      	mov	r3, r2
 800dee8:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800def2:	2300      	movs	r3, #0
 800def4:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800def6:	88fb      	ldrh	r3, [r7, #6]
 800def8:	4618      	mov	r0, r3
 800defa:	f000 faa7 	bl	800e44c <VL53L1_calc_pll_period_us>
 800defe:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800df00:	797b      	ldrb	r3, [r7, #5]
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fab6 	bl	800e474 <VL53L1_decode_vcsel_period>
 800df08:	4603      	mov	r3, r0
 800df0a:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800df0c:	697a      	ldr	r2, [r7, #20]
 800df0e:	4613      	mov	r3, r2
 800df10:	00db      	lsls	r3, r3, #3
 800df12:	4413      	add	r3, r2
 800df14:	021b      	lsls	r3, r3, #8
 800df16:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	099b      	lsrs	r3, r3, #6
 800df1c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800df1e:	7cfa      	ldrb	r2, [r7, #19]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	fb02 f303 	mul.w	r3, r2, r3
 800df26:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	099b      	lsrs	r3, r3, #6
 800df2c:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800df2e:	68fb      	ldr	r3, [r7, #12]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800df38:	b480      	push	{r7}
 800df3a:	b089      	sub	sp, #36	; 0x24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	4608      	mov	r0, r1
 800df42:	4611      	mov	r1, r2
 800df44:	461a      	mov	r2, r3
 800df46:	4603      	mov	r3, r0
 800df48:	817b      	strh	r3, [r7, #10]
 800df4a:	460b      	mov	r3, r1
 800df4c:	813b      	strh	r3, [r7, #8]
 800df4e:	4613      	mov	r3, r2
 800df50:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	011b      	lsls	r3, r3, #4
 800df6a:	4a23      	ldr	r2, [pc, #140]	; (800dff8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800df6c:	fb82 1203 	smull	r1, r2, r2, r3
 800df70:	1192      	asrs	r2, r2, #6
 800df72:	17db      	asrs	r3, r3, #31
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800df78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	da03      	bge.n	800df88 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800df80:	897b      	ldrh	r3, [r7, #10]
 800df82:	425b      	negs	r3, r3
 800df84:	b29b      	uxth	r3, r3
 800df86:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800df88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	da03      	bge.n	800df98 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800df90:	893b      	ldrh	r3, [r7, #8]
 800df92:	425b      	negs	r3, r3
 800df94:	b29b      	uxth	r3, r3
 800df96:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800df98:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800df9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	015b      	lsls	r3, r3, #5
 800dfa4:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	4a13      	ldr	r2, [pc, #76]	; (800dff8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800dfaa:	fb82 1203 	smull	r1, r2, r2, r3
 800dfae:	1192      	asrs	r2, r2, #6
 800dfb0:	17db      	asrs	r3, r3, #31
 800dfb2:	1ad3      	subs	r3, r2, r3
 800dfb4:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	4413      	add	r3, r2
 800dfbc:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800dfbe:	79fa      	ldrb	r2, [r7, #7]
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	fb02 f303 	mul.w	r3, r2, r3
 800dfc6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	3310      	adds	r3, #16
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	da00      	bge.n	800dfd2 <VL53L1_calc_range_ignore_threshold+0x9a>
 800dfd0:	331f      	adds	r3, #31
 800dfd2:	115b      	asrs	r3, r3, #5
 800dfd4:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfdc:	db03      	blt.n	800dfe6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800dfde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfe2:	83fb      	strh	r3, [r7, #30]
 800dfe4:	e001      	b.n	800dfea <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800dfea:	8bfb      	ldrh	r3, [r7, #30]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3724      	adds	r7, #36	; 0x24
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr
 800dff8:	10624dd3 	.word	0x10624dd3

0800dffc <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	031a      	lsls	r2, r3, #12
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	085b      	lsrs	r3, r3, #1
 800e012:	441a      	add	r2, r3
	timeout_mclks   =
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	fbb2 f3f3 	udiv	r3, r2, r3
 800e01a:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e01c:	68fb      	ldr	r3, [r7, #12]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3714      	adds	r7, #20
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff ffdc 	bl	800dffc <VL53L1_calc_timeout_mclks>
 800e044:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f000 f85e 	bl	800e108 <VL53L1_encode_timeout>
 800e04c:	4603      	mov	r3, r0
 800e04e:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e050:	897b      	ldrh	r3, [r7, #10]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e05a:	b4f0      	push	{r4, r5, r6, r7}
 800e05c:	b086      	sub	sp, #24
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800e068:	f04f 0200 	mov.w	r2, #0
 800e06c:	f04f 0300 	mov.w	r3, #0
 800e070:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4618      	mov	r0, r3
 800e078:	f04f 0100 	mov.w	r1, #0
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	f04f 0300 	mov.w	r3, #0
 800e084:	fb02 fc01 	mul.w	ip, r2, r1
 800e088:	fb00 f603 	mul.w	r6, r0, r3
 800e08c:	4466      	add	r6, ip
 800e08e:	fba0 2302 	umull	r2, r3, r0, r2
 800e092:	18f1      	adds	r1, r6, r3
 800e094:	460b      	mov	r3, r1
 800e096:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e09a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800e09e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0a2:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800e0a6:	f143 0500 	adc.w	r5, r3, #0
 800e0aa:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800e0ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0b2:	f04f 0200 	mov.w	r2, #0
 800e0b6:	f04f 0300 	mov.w	r3, #0
 800e0ba:	0b02      	lsrs	r2, r0, #12
 800e0bc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e0c0:	0b0b      	lsrs	r3, r1, #12
 800e0c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e0ca:	697b      	ldr	r3, [r7, #20]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bcf0      	pop	{r4, r5, r6, r7}
 800e0d4:	4770      	bx	lr

0800e0d6 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	4603      	mov	r3, r0
 800e0de:	6039      	str	r1, [r7, #0]
 800e0e0:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e0ea:	88fb      	ldrh	r3, [r7, #6]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f000 f837 	bl	800e160 <VL53L1_decode_timeout>
 800e0f2:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7ff ffaf 	bl	800e05a <VL53L1_calc_timeout_us>
 800e0fc:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e0fe:	68bb      	ldr	r3, [r7, #8]
}
 800e100:	4618      	mov	r0, r3
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e110:	2300      	movs	r3, #0
 800e112:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e114:	2300      	movs	r3, #0
 800e116:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d017      	beq.n	800e152 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	3b01      	subs	r3, #1
 800e126:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e128:	e005      	b.n	800e136 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	085b      	lsrs	r3, r3, #1
 800e12e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e130:	89fb      	ldrh	r3, [r7, #14]
 800e132:	3301      	adds	r3, #1
 800e134:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1f4      	bne.n	800e12a <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e140:	89fb      	ldrh	r3, [r7, #14]
 800e142:	021b      	lsls	r3, r3, #8
 800e144:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e14e:	4413      	add	r3, r2
 800e150:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e152:	8afb      	ldrh	r3, [r7, #22]
}
 800e154:	4618      	mov	r0, r3
 800e156:	371c      	adds	r7, #28
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	4603      	mov	r3, r0
 800e168:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e172:	88fa      	ldrh	r2, [r7, #6]
 800e174:	0a12      	lsrs	r2, r2, #8
 800e176:	b292      	uxth	r2, r2
 800e178:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e17a:	3301      	adds	r3, #1
 800e17c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e17e:	68fb      	ldr	r3, [r7, #12]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e1aa:	887b      	ldrh	r3, [r7, #2]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d102      	bne.n	800e1b6 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e1b0:	23f1      	movs	r3, #241	; 0xf1
 800e1b2:	77fb      	strb	r3, [r7, #31]
 800e1b4:	e05d      	b.n	800e272 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b8:	799a      	ldrb	r2, [r3, #6]
 800e1ba:	887b      	ldrh	r3, [r7, #2]
 800e1bc:	4611      	mov	r1, r2
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff fe8b 	bl	800deda <VL53L1_calc_macro_period_us>
 800e1c4:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e1c6:	6979      	ldr	r1, [r7, #20]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7ff ff17 	bl	800dffc <VL53L1_calc_timeout_mclks>
 800e1ce:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	2bff      	cmp	r3, #255	; 0xff
 800e1d4:	d901      	bls.n	800e1da <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e1d6:	23ff      	movs	r3, #255	; 0xff
 800e1d8:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e0:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e1e2:	6979      	ldr	r1, [r7, #20]
 800e1e4:	68b8      	ldr	r0, [r7, #8]
 800e1e6:	f7ff ff20 	bl	800e02a <VL53L1_calc_encoded_timeout>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e1ee:	8a7b      	ldrh	r3, [r7, #18]
 800e1f0:	0a1b      	lsrs	r3, r3, #8
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e1fa:	8a7b      	ldrh	r3, [r7, #18]
 800e1fc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e202:	6979      	ldr	r1, [r7, #20]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f7ff ff10 	bl	800e02a <VL53L1_calc_encoded_timeout>
 800e20a:	4603      	mov	r3, r0
 800e20c:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e20e:	8a7b      	ldrh	r3, [r7, #18]
 800e210:	0a1b      	lsrs	r3, r3, #8
 800e212:	b29b      	uxth	r3, r3
 800e214:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e218:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e21a:	8a7b      	ldrh	r3, [r7, #18]
 800e21c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e220:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	7a5a      	ldrb	r2, [r3, #9]
 800e226:	887b      	ldrh	r3, [r7, #2]
 800e228:	4611      	mov	r1, r2
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff fe55 	bl	800deda <VL53L1_calc_macro_period_us>
 800e230:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e232:	6979      	ldr	r1, [r7, #20]
 800e234:	68b8      	ldr	r0, [r7, #8]
 800e236:	f7ff fef8 	bl	800e02a <VL53L1_calc_encoded_timeout>
 800e23a:	4603      	mov	r3, r0
 800e23c:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e23e:	8a7b      	ldrh	r3, [r7, #18]
 800e240:	0a1b      	lsrs	r3, r3, #8
 800e242:	b29b      	uxth	r3, r3
 800e244:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e24a:	8a7b      	ldrh	r3, [r7, #18]
 800e24c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e252:	6979      	ldr	r1, [r7, #20]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff fee8 	bl	800e02a <VL53L1_calc_encoded_timeout>
 800e25a:	4603      	mov	r3, r0
 800e25c:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e25e:	8a7b      	ldrh	r3, [r7, #18]
 800e260:	0a1b      	lsrs	r3, r3, #8
 800e262:	b29b      	uxth	r3, r3
 800e264:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e26a:	8a7b      	ldrh	r3, [r7, #18]
 800e26c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e270:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e272:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e276:	4618      	mov	r0, r3
 800e278:	3720      	adds	r7, #32
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800e27e:	b480      	push	{r7}
 800e280:	b083      	sub	sp, #12
 800e282:	af00      	add	r7, sp, #0
 800e284:	4603      	mov	r3, r0
 800e286:	603a      	str	r2, [r7, #0]
 800e288:	71fb      	strb	r3, [r7, #7]
 800e28a:	460b      	mov	r3, r1
 800e28c:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800e28e:	79fb      	ldrb	r3, [r7, #7]
 800e290:	2b07      	cmp	r3, #7
 800e292:	d90a      	bls.n	800e2aa <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800e294:	79bb      	ldrb	r3, [r7, #6]
 800e296:	00db      	lsls	r3, r3, #3
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	3b71      	subs	r3, #113	; 0x71
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800e2a8:	e00a      	b.n	800e2c0 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800e2aa:	79bb      	ldrb	r3, [r7, #6]
 800e2ac:	f1c3 030f 	rsb	r3, r3, #15
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	00db      	lsls	r3, r3, #3
 800e2b4:	b2da      	uxtb	r2, r3
 800e2b6:	79fb      	ldrb	r3, [r7, #7]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	701a      	strb	r2, [r3, #0]
}
 800e2c0:	bf00      	nop
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
 800e2d8:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	091b      	lsrs	r3, r3, #4
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	f003 030f 	and.w	r3, r3, #15
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	701a      	strb	r2, [r3, #0]

}
 800e2f0:	bf00      	nop
 800e2f2:	3714      	adds	r7, #20
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	4603      	mov	r3, r0
 800e304:	603a      	str	r2, [r7, #0]
 800e306:	71fb      	strb	r3, [r7, #7]
 800e308:	460b      	mov	r3, r1
 800e30a:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800e30c:	79bb      	ldrb	r3, [r7, #6]
 800e30e:	011b      	lsls	r3, r3, #4
 800e310:	b2da      	uxtb	r2, r3
 800e312:	79fb      	ldrb	r3, [r7, #7]
 800e314:	4413      	add	r3, r2
 800e316:	b2da      	uxtb	r2, r3
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	701a      	strb	r2, [r3, #0]

}
 800e31c:	bf00      	nop
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e330:	2300      	movs	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2203      	movs	r2, #3
 800e33c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	2200      	movs	r2, #0
 800e35c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	2200      	movs	r2, #0
 800e36c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2200      	movs	r2, #0
 800e374:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800e380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e390:	b480      	push	{r7}
 800e392:	b087      	sub	sp, #28
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e39c:	2300      	movs	r3, #0
 800e39e:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	229b      	movs	r2, #155	; 0x9b
 800e3b0:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e3b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	371c      	adds	r7, #28
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr

0800e3c2 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e3c2:	b480      	push	{r7}
 800e3c4:	b085      	sub	sp, #20
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800e3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e402:	f003 0303 	and.w	r3, r3, #3
 800e406:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e412:	4413      	add	r3, r2
 800e414:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800e43c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	4603      	mov	r3, r0
 800e454:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e45a:	88fb      	ldrh	r3, [r7, #6]
 800e45c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e460:	fb92 f3f3 	sdiv	r3, r2, r3
 800e464:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e466:	68fb      	ldr	r3, [r7, #12]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	4603      	mov	r3, r0
 800e47c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800e482:	79fb      	ldrb	r3, [r7, #7]
 800e484:	3301      	adds	r3, #1
 800e486:	b2db      	uxtb	r3, r3
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b085      	sub	sp, #20
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	60b9      	str	r1, [r7, #8]
 800e4a4:	607a      	str	r2, [r7, #4]
 800e4a6:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800e4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	da10      	bge.n	800e4d2 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800e4b0:	7bfb      	ldrb	r3, [r7, #15]
 800e4b2:	43db      	mvns	r3, r3
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	f003 0307 	and.w	r3, r3, #7
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	3308      	adds	r3, #8
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	3b80      	subs	r3, #128	; 0x80
 800e4c8:	10db      	asrs	r3, r3, #3
 800e4ca:	b2da      	uxtb	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800e4d0:	e00c      	b.n	800e4ec <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
 800e4d4:	f003 0307 	and.w	r3, r3, #7
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
 800e4e0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e4e4:	10db      	asrs	r3, r3, #3
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	701a      	strb	r2, [r3, #0]
}
 800e4ec:	bf00      	nop
 800e4ee:	3714      	adds	r7, #20
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b086      	sub	sp, #24
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	460b      	mov	r3, r1
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e506:	2300      	movs	r3, #0
 800e508:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e50a:	897b      	ldrh	r3, [r7, #10]
 800e50c:	2b0a      	cmp	r3, #10
 800e50e:	d802      	bhi.n	800e516 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e510:	f06f 0309 	mvn.w	r3, #9
 800e514:	e047      	b.n	800e5a6 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e51e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e52c:	f002 020f 	and.w	r2, r2, #15
 800e530:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e532:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e53c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e540:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e542:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e54c:	f002 0203 	and.w	r2, r2, #3
 800e550:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e552:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e55c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e560:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e562:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	88d8      	ldrh	r0, [r3, #6]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	3305      	adds	r3, #5
 800e56c:	461a      	mov	r2, r3
 800e56e:	2102      	movs	r1, #2
 800e570:	f7ff fb77 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e57c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e586:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e590:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e594:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e596:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e5a0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e5a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3718      	adds	r7, #24
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b086      	sub	sp, #24
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	607a      	str	r2, [r7, #4]
 800e5ba:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e5c0:	89fb      	ldrh	r3, [r7, #14]
 800e5c2:	2b0a      	cmp	r3, #10
 800e5c4:	d802      	bhi.n	800e5cc <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e5c6:	f06f 0309 	mvn.w	r3, #9
 800e5ca:	e046      	b.n	800e65a <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5d4:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	f003 030f 	and.w	r3, r3, #15
 800e5e4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	3302      	adds	r3, #2
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5f4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	3303      	adds	r3, #3
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	f003 0303 	and.w	r3, r3, #3
 800e604:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	3304      	adds	r3, #4
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e614:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	3305      	adds	r3, #5
 800e61e:	4619      	mov	r1, r3
 800e620:	2002      	movs	r0, #2
 800e622:	f7ff fb49 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800e626:	4603      	mov	r3, r0
 800e628:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	79da      	ldrb	r2, [r3, #7]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	7a1a      	ldrb	r2, [r3, #8]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	3309      	adds	r3, #9
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e648:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	7a9a      	ldrb	r2, [r3, #10]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3718      	adds	r7, #24
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b086      	sub	sp, #24
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e66c:	2300      	movs	r3, #0
 800e66e:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d108      	bne.n	800e68a <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e678:	f107 020c 	add.w	r2, r7, #12
 800e67c:	230b      	movs	r3, #11
 800e67e:	2101      	movs	r1, #1
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f001 f8e7 	bl	800f854 <VL53L1_ReadMulti>
 800e686:	4603      	mov	r3, r0
 800e688:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d108      	bne.n	800e6a4 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800e692:	f107 030c 	add.w	r3, r7, #12
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	4619      	mov	r1, r3
 800e69a:	200b      	movs	r0, #11
 800e69c:	f7ff ff87 	bl	800e5ae <VL53L1_i2c_decode_static_nvm_managed>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3718      	adds	r7, #24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b086      	sub	sp, #24
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e6c2:	897b      	ldrh	r3, [r7, #10]
 800e6c4:	2b16      	cmp	r3, #22
 800e6c6:	d802      	bhi.n	800e6ce <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e6c8:	f06f 0309 	mvn.w	r3, #9
 800e6cc:	e076      	b.n	800e7bc <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e6de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e6e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e6f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e6fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e706:	f002 020f 	and.w	r2, r2, #15
 800e70a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e70c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800e716:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e720:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e724:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e726:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800e730:	f002 0203 	and.w	r2, r2, #3
 800e734:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e736:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	8958      	ldrh	r0, [r3, #10]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	3309      	adds	r3, #9
 800e740:	461a      	mov	r2, r3
 800e742:	2102      	movs	r1, #2
 800e744:	f7ff fa8d 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	330b      	adds	r3, #11
 800e752:	461a      	mov	r2, r3
 800e754:	2102      	movs	r1, #2
 800e756:	f7ff facf 	bl	800dcf8 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	330d      	adds	r3, #13
 800e764:	461a      	mov	r2, r3
 800e766:	2102      	movs	r1, #2
 800e768:	f7ff fac6 	bl	800dcf8 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	8a18      	ldrh	r0, [r3, #16]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	330f      	adds	r3, #15
 800e774:	461a      	mov	r2, r3
 800e776:	2102      	movs	r1, #2
 800e778:	f7ff fa73 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800e782:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e786:	b218      	sxth	r0, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3311      	adds	r3, #17
 800e78c:	461a      	mov	r2, r3
 800e78e:	2102      	movs	r1, #2
 800e790:	f7ff fab2 	bl	800dcf8 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	3313      	adds	r3, #19
 800e79e:	461a      	mov	r2, r3
 800e7a0:	2102      	movs	r1, #2
 800e7a2:	f7ff faa9 	bl	800dcf8 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3315      	adds	r3, #21
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	2102      	movs	r1, #2
 800e7b4:	f7ff faa0 	bl	800dcf8 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800e7b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e7d6:	89fb      	ldrh	r3, [r7, #14]
 800e7d8:	2b16      	cmp	r3, #22
 800e7da:	d802      	bhi.n	800e7e2 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e7dc:	f06f 0309 	mvn.w	r3, #9
 800e7e0:	e079      	b.n	800e8d6 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	785a      	ldrb	r2, [r3, #1]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	789a      	ldrb	r2, [r3, #2]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	78da      	ldrb	r2, [r3, #3]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	791a      	ldrb	r2, [r3, #4]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	3305      	adds	r3, #5
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f003 030f 	and.w	r3, r3, #15
 800e814:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	799a      	ldrb	r2, [r3, #6]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	3307      	adds	r3, #7
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e82c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	3308      	adds	r3, #8
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f003 0303 	and.w	r3, r3, #3
 800e83c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	3309      	adds	r3, #9
 800e846:	4619      	mov	r1, r3
 800e848:	2002      	movs	r0, #2
 800e84a:	f7ff fa35 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800e84e:	4603      	mov	r3, r0
 800e850:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	330b      	adds	r3, #11
 800e85a:	4619      	mov	r1, r3
 800e85c:	2002      	movs	r0, #2
 800e85e:	f7ff fa77 	bl	800dd50 <VL53L1_i2c_decode_int16_t>
 800e862:	4603      	mov	r3, r0
 800e864:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	330d      	adds	r3, #13
 800e86e:	4619      	mov	r1, r3
 800e870:	2002      	movs	r0, #2
 800e872:	f7ff fa6d 	bl	800dd50 <VL53L1_i2c_decode_int16_t>
 800e876:	4603      	mov	r3, r0
 800e878:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	330f      	adds	r3, #15
 800e882:	4619      	mov	r1, r3
 800e884:	2002      	movs	r0, #2
 800e886:	f7ff fa17 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800e88a:	4603      	mov	r3, r0
 800e88c:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	3311      	adds	r3, #17
 800e896:	4619      	mov	r1, r3
 800e898:	2002      	movs	r0, #2
 800e89a:	f7ff fa59 	bl	800dd50 <VL53L1_i2c_decode_int16_t>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8a4:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	3313      	adds	r3, #19
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	2002      	movs	r0, #2
 800e8b2:	f7ff fa4d 	bl	800dd50 <VL53L1_i2c_decode_int16_t>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	3315      	adds	r3, #21
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	2002      	movs	r0, #2
 800e8c6:	f7ff fa43 	bl	800dd50 <VL53L1_i2c_decode_int16_t>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800e8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b088      	sub	sp, #32
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
 800e8e6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e8ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d108      	bne.n	800e906 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e8f4:	f107 0208 	add.w	r2, r7, #8
 800e8f8:	2317      	movs	r3, #23
 800e8fa:	210d      	movs	r1, #13
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 ffa9 	bl	800f854 <VL53L1_ReadMulti>
 800e902:	4603      	mov	r3, r0
 800e904:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e906:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d108      	bne.n	800e920 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800e90e:	f107 0308 	add.w	r3, r7, #8
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	4619      	mov	r1, r3
 800e916:	2017      	movs	r0, #23
 800e918:	f7ff ff54 	bl	800e7c4 <VL53L1_i2c_decode_customer_nvm_managed>
 800e91c:	4603      	mov	r3, r0
 800e91e:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e920:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3720      	adds	r7, #32
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	460b      	mov	r3, r1
 800e936:	607a      	str	r2, [r7, #4]
 800e938:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e93a:	2300      	movs	r3, #0
 800e93c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e93e:	897b      	ldrh	r3, [r7, #10]
 800e940:	2b1f      	cmp	r3, #31
 800e942:	d802      	bhi.n	800e94a <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e944:	f06f 0309 	mvn.w	r3, #9
 800e948:	e0cf      	b.n	800eaea <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	2102      	movs	r1, #2
 800e952:	4618      	mov	r0, r3
 800e954:	f7ff f985 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800e960:	f002 0201 	and.w	r2, r2, #1
 800e964:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e966:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800e970:	f002 020f 	and.w	r2, r2, #15
 800e974:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e976:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800e980:	f002 020f 	and.w	r2, r2, #15
 800e984:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e986:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800e990:	f002 021f 	and.w	r2, r2, #31
 800e994:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e996:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e9a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e9a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e9a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800e9b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e9b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e9b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800e9c0:	f002 0201 	and.w	r2, r2, #1
 800e9c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e9c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800e9d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e9da:	f002 0201 	and.w	r2, r2, #1
 800e9de:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800e9e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e9ea:	f002 0203 	and.w	r2, r2, #3
 800e9ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e9f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e9fa:	f002 021f 	and.w	r2, r2, #31
 800e9fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ea00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800ea0a:	f002 0203 	and.w	r2, r2, #3
 800ea0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ea10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800ea1a:	f002 0203 	and.w	r2, r2, #3
 800ea1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800ea20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800ea2a:	f002 0207 	and.w	r2, r2, #7
 800ea2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800ea30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800ea3a:	f002 021f 	and.w	r2, r2, #31
 800ea3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800ea40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800ea4a:	f002 0201 	and.w	r2, r2, #1
 800ea4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ea50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ea5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ea64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ea6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ea78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800ea82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800ea8c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	8b18      	ldrh	r0, [r3, #24]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	3318      	adds	r3, #24
 800ea96:	461a      	mov	r2, r3
 800ea98:	2102      	movs	r1, #2
 800ea9a:	f7ff f8e2 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800eaa2:	68fa      	ldr	r2, [r7, #12]
 800eaa4:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800eaa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800eab0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800eaba:	f002 020f 	and.w	r2, r2, #15
 800eabe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800eac0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800eaca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800ead4:	f002 020f 	and.w	r2, r2, #15
 800ead8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800eada:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800eae4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800eae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b086      	sub	sp, #24
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	60f8      	str	r0, [r7, #12]
 800eafa:	460b      	mov	r3, r1
 800eafc:	607a      	str	r2, [r7, #4]
 800eafe:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eb00:	2300      	movs	r3, #0
 800eb02:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800eb04:	897b      	ldrh	r3, [r7, #10]
 800eb06:	2b15      	cmp	r3, #21
 800eb08:	d802      	bhi.n	800eb10 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb0a:	f06f 0309 	mvn.w	r3, #9
 800eb0e:	e070      	b.n	800ebf2 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800eb1c:	68fa      	ldr	r2, [r7, #12]
 800eb1e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800eb20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800eb2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800eb34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eb38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800eb3a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800eb40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb44:	b298      	uxth	r0, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	3304      	adds	r3, #4
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	2102      	movs	r1, #2
 800eb4e:	f7ff f888 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800eb5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eb5e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800eb60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800eb6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800eb74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800eb7e:	f002 0201 	and.w	r2, r2, #1
 800eb82:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800eb84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800eb8e:	f002 0207 	and.w	r2, r2, #7
 800eb92:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800eb94:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	8998      	ldrh	r0, [r3, #12]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	330c      	adds	r3, #12
 800eb9e:	461a      	mov	r2, r3
 800eba0:	2102      	movs	r1, #2
 800eba2:	f7ff f85e 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	89d8      	ldrh	r0, [r3, #14]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	330e      	adds	r3, #14
 800ebae:	461a      	mov	r2, r3
 800ebb0:	2102      	movs	r1, #2
 800ebb2:	f7ff f856 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	8a18      	ldrh	r0, [r3, #16]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	3310      	adds	r3, #16
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	2102      	movs	r1, #2
 800ebc2:	f7ff f84e 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ebce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ebd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ebe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ebec:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ebee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b086      	sub	sp, #24
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	60f8      	str	r0, [r7, #12]
 800ec02:	460b      	mov	r3, r1
 800ec04:	607a      	str	r2, [r7, #4]
 800ec06:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ec0c:	897b      	ldrh	r3, [r7, #10]
 800ec0e:	2b16      	cmp	r3, #22
 800ec10:	d802      	bhi.n	800ec18 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ec12:	f06f 0309 	mvn.w	r3, #9
 800ec16:	e06e      	b.n	800ecf6 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f003 030f 	and.w	r3, r3, #15
 800ec20:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ec2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ec38:	f002 020f 	and.w	r2, r2, #15
 800ec3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ec3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ec48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ec52:	f002 020f 	and.w	r2, r2, #15
 800ec56:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ec58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800ec62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800ec6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ec70:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ec72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800ec7c:	f002 020f 	and.w	r2, r2, #15
 800ec80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ec82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ec8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800ec96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ec9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ec9c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	8958      	ldrh	r0, [r3, #10]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	330a      	adds	r3, #10
 800eca6:	461a      	mov	r2, r3
 800eca8:	2102      	movs	r1, #2
 800ecaa:	f7fe ffda 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	8998      	ldrh	r0, [r3, #12]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	330c      	adds	r3, #12
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	2102      	movs	r1, #2
 800ecba:	f7fe ffd2 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800ecc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800ecd0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6918      	ldr	r0, [r3, #16]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	3312      	adds	r3, #18
 800ecda:	461a      	mov	r2, r3
 800ecdc:	2104      	movs	r1, #4
 800ecde:	f7ff f860 	bl	800dda2 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800ecea:	f002 0201 	and.w	r2, r2, #1
 800ecee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800ecf0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ecf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3718      	adds	r7, #24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b086      	sub	sp, #24
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	60f8      	str	r0, [r7, #12]
 800ed06:	460b      	mov	r3, r1
 800ed08:	607a      	str	r2, [r7, #4]
 800ed0a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ed10:	897b      	ldrh	r3, [r7, #10]
 800ed12:	2b11      	cmp	r3, #17
 800ed14:	d802      	bhi.n	800ed1c <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed16:	f06f 0309 	mvn.w	r3, #9
 800ed1a:	e071      	b.n	800ee00 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	f003 0303 	and.w	r3, r3, #3
 800ed24:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	8858      	ldrh	r0, [r3, #2]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	3301      	adds	r3, #1
 800ed32:	461a      	mov	r2, r3
 800ed34:	2102      	movs	r1, #2
 800ed36:	f7fe ff94 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	8898      	ldrh	r0, [r3, #4]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3303      	adds	r3, #3
 800ed42:	461a      	mov	r2, r3
 800ed44:	2102      	movs	r1, #2
 800ed46:	f7fe ff8c 	bl	800dc62 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ed52:	f002 0201 	and.w	r2, r2, #1
 800ed56:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ed58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800ed62:	f002 0207 	and.w	r2, r2, #7
 800ed66:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ed68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ed72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800ed7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ed86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ed8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ed96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ed9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800eda6:	f002 0203 	and.w	r2, r2, #3
 800edaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800edac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800edb6:	f002 0203 	and.w	r2, r2, #3
 800edba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800edbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800edc6:	f002 020f 	and.w	r2, r2, #15
 800edca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800edcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800edd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800ede0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800edea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800edf4:	f002 0203 	and.w	r2, r2, #3
 800edf8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800edfa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800edfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3718      	adds	r7, #24
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b087      	sub	sp, #28
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	460b      	mov	r3, r1
 800ee12:	607a      	str	r2, [r7, #4]
 800ee14:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ee16:	2300      	movs	r3, #0
 800ee18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800ee1a:	897b      	ldrh	r3, [r7, #10]
 800ee1c:	2b04      	cmp	r3, #4
 800ee1e:	d802      	bhi.n	800ee26 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee20:	f06f 0309 	mvn.w	r3, #9
 800ee24:	e025      	b.n	800ee72 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	f003 0301 	and.w	r3, r3, #1
 800ee2e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800ee3c:	f002 0201 	and.w	r2, r2, #1
 800ee40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800ee42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800ee4c:	f002 0201 	and.w	r2, r2, #1
 800ee50:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ee52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800ee5c:	f002 0203 	and.w	r2, r2, #3
 800ee60:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ee62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ee6c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ee6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	371c      	adds	r7, #28
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr

0800ee7e <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b086      	sub	sp, #24
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	4603      	mov	r3, r0
 800ee86:	60b9      	str	r1, [r7, #8]
 800ee88:	607a      	str	r2, [r7, #4]
 800ee8a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ee90:	89fb      	ldrh	r3, [r7, #14]
 800ee92:	2b2b      	cmp	r3, #43	; 0x2b
 800ee94:	d802      	bhi.n	800ee9c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee96:	f06f 0309 	mvn.w	r3, #9
 800ee9a:	e0e2      	b.n	800f062 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eea4:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	785a      	ldrb	r2, [r3, #1]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	3302      	adds	r3, #2
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	f003 030f 	and.w	r3, r3, #15
 800eebc:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	78da      	ldrb	r2, [r3, #3]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	3304      	adds	r3, #4
 800eece:	4619      	mov	r1, r3
 800eed0:	2002      	movs	r0, #2
 800eed2:	f7fe fef1 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800eed6:	4603      	mov	r3, r0
 800eed8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	3306      	adds	r3, #6
 800eee2:	4619      	mov	r1, r3
 800eee4:	2002      	movs	r0, #2
 800eee6:	f7fe fee7 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800eeea:	4603      	mov	r3, r0
 800eeec:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	3308      	adds	r3, #8
 800eef6:	4619      	mov	r1, r3
 800eef8:	2002      	movs	r0, #2
 800eefa:	f7fe fedd 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800eefe:	4603      	mov	r3, r0
 800ef00:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	330a      	adds	r3, #10
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	2002      	movs	r0, #2
 800ef0e:	f7fe fed3 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef12:	4603      	mov	r3, r0
 800ef14:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	330c      	adds	r3, #12
 800ef1e:	4619      	mov	r1, r3
 800ef20:	2002      	movs	r0, #2
 800ef22:	f7fe fec9 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef26:	4603      	mov	r3, r0
 800ef28:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	330e      	adds	r3, #14
 800ef32:	4619      	mov	r1, r3
 800ef34:	2002      	movs	r0, #2
 800ef36:	f7fe febf 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	3310      	adds	r3, #16
 800ef46:	4619      	mov	r1, r3
 800ef48:	2002      	movs	r0, #2
 800ef4a:	f7fe feb5 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	3312      	adds	r3, #18
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	2002      	movs	r0, #2
 800ef5e:	f7fe feab 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef62:	4603      	mov	r3, r0
 800ef64:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	3314      	adds	r3, #20
 800ef6e:	4619      	mov	r1, r3
 800ef70:	2002      	movs	r0, #2
 800ef72:	f7fe fea1 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef76:	4603      	mov	r3, r0
 800ef78:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	3316      	adds	r3, #22
 800ef82:	4619      	mov	r1, r3
 800ef84:	2002      	movs	r0, #2
 800ef86:	f7fe fe97 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	3318      	adds	r3, #24
 800ef96:	4619      	mov	r1, r3
 800ef98:	2002      	movs	r0, #2
 800ef9a:	f7fe fe8d 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	331a      	adds	r3, #26
 800efaa:	4619      	mov	r1, r3
 800efac:	2002      	movs	r0, #2
 800efae:	f7fe fe83 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800efb2:	4603      	mov	r3, r0
 800efb4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	331c      	adds	r3, #28
 800efbe:	4619      	mov	r1, r3
 800efc0:	2002      	movs	r0, #2
 800efc2:	f7fe fe79 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800efc6:	4603      	mov	r3, r0
 800efc8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	331e      	adds	r3, #30
 800efd2:	4619      	mov	r1, r3
 800efd4:	2002      	movs	r0, #2
 800efd6:	f7fe fe6f 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800efda:	4603      	mov	r3, r0
 800efdc:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	3320      	adds	r3, #32
 800efe6:	4619      	mov	r1, r3
 800efe8:	2002      	movs	r0, #2
 800efea:	f7fe fe65 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800efee:	4603      	mov	r3, r0
 800eff0:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	3322      	adds	r3, #34	; 0x22
 800effa:	4619      	mov	r1, r3
 800effc:	2002      	movs	r0, #2
 800effe:	f7fe fe5b 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f002:	4603      	mov	r3, r0
 800f004:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	3324      	adds	r3, #36	; 0x24
 800f00e:	4619      	mov	r1, r3
 800f010:	2002      	movs	r0, #2
 800f012:	f7fe fe51 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f016:	4603      	mov	r3, r0
 800f018:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	3326      	adds	r3, #38	; 0x26
 800f022:	4619      	mov	r1, r3
 800f024:	2002      	movs	r0, #2
 800f026:	f7fe fe47 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f02a:	4603      	mov	r3, r0
 800f02c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	3328      	adds	r3, #40	; 0x28
 800f036:	4619      	mov	r1, r3
 800f038:	2002      	movs	r0, #2
 800f03a:	f7fe fe3d 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f03e:	4603      	mov	r3, r0
 800f040:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800f05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b086      	sub	sp, #24
 800f06e:	af00      	add	r7, sp, #0
 800f070:	4603      	mov	r3, r0
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	607a      	str	r2, [r7, #4]
 800f076:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f078:	2300      	movs	r3, #0
 800f07a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f07c:	89fb      	ldrh	r3, [r7, #14]
 800f07e:	2b20      	cmp	r3, #32
 800f080:	d802      	bhi.n	800f088 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f082:	f06f 0309 	mvn.w	r3, #9
 800f086:	e04d      	b.n	800f124 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800f088:	68b9      	ldr	r1, [r7, #8]
 800f08a:	2004      	movs	r0, #4
 800f08c:	f7fe feb3 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f090:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	3304      	adds	r3, #4
 800f09a:	4619      	mov	r1, r3
 800f09c:	2004      	movs	r0, #4
 800f09e:	f7fe feaa 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f0a2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	2004      	movs	r0, #4
 800f0b0:	f7fe febe 	bl	800de30 <VL53L1_i2c_decode_int32_t>
 800f0b4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	330c      	adds	r3, #12
 800f0be:	4619      	mov	r1, r3
 800f0c0:	2004      	movs	r0, #4
 800f0c2:	f7fe fe98 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f0c6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	3310      	adds	r3, #16
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	2004      	movs	r0, #4
 800f0d4:	f7fe fe8f 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f0d8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	3314      	adds	r3, #20
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	2004      	movs	r0, #4
 800f0e6:	f7fe fe86 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f0ea:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	3318      	adds	r3, #24
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	2004      	movs	r0, #4
 800f0f8:	f7fe fe9a 	bl	800de30 <VL53L1_i2c_decode_int32_t>
 800f0fc:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	331c      	adds	r3, #28
 800f106:	4619      	mov	r1, r3
 800f108:	2004      	movs	r0, #4
 800f10a:	f7fe fe74 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f10e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800f120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3718      	adds	r7, #24
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f13a:	2300      	movs	r3, #0
 800f13c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f13e:	89fb      	ldrh	r3, [r7, #14]
 800f140:	2b37      	cmp	r3, #55	; 0x37
 800f142:	d802      	bhi.n	800f14a <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f144:	f06f 0309 	mvn.w	r3, #9
 800f148:	e15e      	b.n	800f408 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800f14a:	68b9      	ldr	r1, [r7, #8]
 800f14c:	2002      	movs	r0, #2
 800f14e:	f7fe fdb3 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f152:	4603      	mov	r3, r0
 800f154:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	3302      	adds	r3, #2
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f164:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	3303      	adds	r3, #3
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f174:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	3304      	adds	r3, #4
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	f003 0303 	and.w	r3, r3, #3
 800f184:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	3305      	adds	r3, #5
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	f003 0301 	and.w	r3, r3, #1
 800f194:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	3306      	adds	r3, #6
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1a4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	3307      	adds	r3, #7
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1b4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	3308      	adds	r3, #8
 800f1be:	4619      	mov	r1, r3
 800f1c0:	2002      	movs	r0, #2
 800f1c2:	f7fe fd79 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f1cc:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	330a      	adds	r3, #10
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	f003 0303 	and.w	r3, r3, #3
 800f1dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	330b      	adds	r3, #11
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	f003 0303 	and.w	r3, r3, #3
 800f1ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	330c      	adds	r3, #12
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f003 030f 	and.w	r3, r3, #15
 800f1fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	330d      	adds	r3, #13
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	f003 0307 	and.w	r3, r3, #7
 800f20c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	330e      	adds	r3, #14
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 0301 	and.w	r3, r3, #1
 800f21c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	330f      	adds	r3, #15
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	f003 0303 	and.w	r3, r3, #3
 800f22c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	7c1a      	ldrb	r2, [r3, #16]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	7c5a      	ldrb	r2, [r3, #17]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	3312      	adds	r3, #18
 800f246:	4619      	mov	r1, r3
 800f248:	2002      	movs	r0, #2
 800f24a:	f7fe fd35 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f24e:	4603      	mov	r3, r0
 800f250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f254:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	3316      	adds	r3, #22
 800f25e:	4619      	mov	r1, r3
 800f260:	2002      	movs	r0, #2
 800f262:	f7fe fd29 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f266:	4603      	mov	r3, r0
 800f268:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	3318      	adds	r3, #24
 800f272:	4619      	mov	r1, r3
 800f274:	2002      	movs	r0, #2
 800f276:	f7fe fd1f 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f27a:	4603      	mov	r3, r0
 800f27c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	331a      	adds	r3, #26
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	f003 0301 	and.w	r3, r3, #1
 800f28c:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	331b      	adds	r3, #27
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	f003 0307 	and.w	r3, r3, #7
 800f29c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	7f1a      	ldrb	r2, [r3, #28]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	7f5a      	ldrb	r2, [r3, #29]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	331e      	adds	r3, #30
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2bc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	331f      	adds	r3, #31
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2cc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	3320      	adds	r3, #32
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	f003 0303 	and.w	r3, r3, #3
 800f2dc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	3321      	adds	r3, #33	; 0x21
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	f003 030f 	and.w	r3, r3, #15
 800f2ec:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	3325      	adds	r3, #37	; 0x25
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	f003 0301 	and.w	r3, r3, #1
 800f320:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	3326      	adds	r3, #38	; 0x26
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	f003 0303 	and.w	r3, r3, #3
 800f332:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	3327      	adds	r3, #39	; 0x27
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	f003 031f 	and.w	r3, r3, #31
 800f344:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	3328      	adds	r3, #40	; 0x28
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	f003 031f 	and.w	r3, r3, #31
 800f356:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	3329      	adds	r3, #41	; 0x29
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f003 031f 	and.w	r3, r3, #31
 800f368:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	332a      	adds	r3, #42	; 0x2a
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	f003 0301 	and.w	r3, r3, #1
 800f37a:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	332b      	adds	r3, #43	; 0x2b
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	f003 0301 	and.w	r3, r3, #1
 800f38c:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	332c      	adds	r3, #44	; 0x2c
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	f003 0303 	and.w	r3, r3, #3
 800f39e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	332d      	adds	r3, #45	; 0x2d
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3b0:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	332e      	adds	r3, #46	; 0x2e
 800f3bc:	4619      	mov	r1, r3
 800f3be:	2004      	movs	r0, #4
 800f3c0:	f7fe fd19 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	3332      	adds	r3, #50	; 0x32
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	2004      	movs	r0, #4
 800f3d6:	f7fe fd0e 	bl	800ddf6 <VL53L1_i2c_decode_uint32_t>
 800f3da:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	3336      	adds	r3, #54	; 0x36
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	f003 0301 	and.w	r3, r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	3337      	adds	r3, #55	; 0x37
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	f003 0301 	and.w	r3, r3, #1
 800f3fc:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3718      	adds	r7, #24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f41e:	2300      	movs	r3, #0
 800f420:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f422:	89fb      	ldrh	r3, [r7, #14]
 800f424:	2b30      	cmp	r3, #48	; 0x30
 800f426:	d802      	bhi.n	800f42e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f428:	f06f 0309 	mvn.w	r3, #9
 800f42c:	e112      	b.n	800f654 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	785a      	ldrb	r2, [r3, #1]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	789a      	ldrb	r2, [r3, #2]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	3303      	adds	r3, #3
 800f44a:	4619      	mov	r1, r3
 800f44c:	2002      	movs	r0, #2
 800f44e:	f7fe fc33 	bl	800dcb8 <VL53L1_i2c_decode_uint16_t>
 800f452:	4603      	mov	r3, r0
 800f454:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	3305      	adds	r3, #5
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f464:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	3306      	adds	r3, #6
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	f003 0307 	and.w	r3, r3, #7
 800f474:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	3307      	adds	r3, #7
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	f003 0307 	and.w	r3, r3, #7
 800f484:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	3308      	adds	r3, #8
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f494:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	3309      	adds	r3, #9
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	330a      	adds	r3, #10
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	f003 0301 	and.w	r3, r3, #1
 800f4b4:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	330b      	adds	r3, #11
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4c4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	330c      	adds	r3, #12
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	f003 0301 	and.w	r3, r3, #1
 800f4d4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	330d      	adds	r3, #13
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4e4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	330e      	adds	r3, #14
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4f4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	7bda      	ldrb	r2, [r3, #15]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	7c1a      	ldrb	r2, [r3, #16]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	7c5a      	ldrb	r2, [r3, #17]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	7c9a      	ldrb	r2, [r3, #18]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	7cda      	ldrb	r2, [r3, #19]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	7d1a      	ldrb	r2, [r3, #20]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	7d5a      	ldrb	r2, [r3, #21]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	7d9a      	ldrb	r2, [r3, #22]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	7dda      	ldrb	r2, [r3, #23]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	7e1a      	ldrb	r2, [r3, #24]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	7e5a      	ldrb	r2, [r3, #25]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	7e9a      	ldrb	r2, [r3, #26]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	7eda      	ldrb	r2, [r3, #27]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	7f1a      	ldrb	r2, [r3, #28]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	7f5a      	ldrb	r2, [r3, #29]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	7f9a      	ldrb	r2, [r3, #30]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	7fda      	ldrb	r2, [r3, #31]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f650:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3718      	adds	r7, #24
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b090      	sub	sp, #64	; 0x40
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f666:	2300      	movs	r3, #0
 800f668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f66c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10a      	bne.n	800f68a <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f674:	f107 020c 	add.w	r2, r7, #12
 800f678:	2331      	movs	r3, #49	; 0x31
 800f67a:	f240 110f 	movw	r1, #271	; 0x10f
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 f8e8 	bl	800f854 <VL53L1_ReadMulti>
 800f684:	4603      	mov	r3, r0
 800f686:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f68a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d109      	bne.n	800f6a6 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800f692:	f107 030c 	add.w	r3, r7, #12
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	4619      	mov	r1, r3
 800f69a:	2031      	movs	r0, #49	; 0x31
 800f69c:	f7ff feb8 	bl	800f410 <VL53L1_i2c_decode_nvm_copy_data>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f6a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3740      	adds	r7, #64	; 0x40
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b086      	sub	sp, #24
 800f6b6:	af02      	add	r7, sp, #8
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800f6c0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 f9b9 	bl	800fa3c <VL53L1_WaitUs>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800f6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d10b      	bne.n	800f6ee <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	9301      	str	r3, [sp, #4]
 800f6da:	2301      	movs	r3, #1
 800f6dc:	9300      	str	r3, [sp, #0]
 800f6de:	2301      	movs	r3, #1
 800f6e0:	22e5      	movs	r2, #229	; 0xe5
 800f6e2:	6839      	ldr	r1, [r7, #0]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f9bf 	bl	800fa68 <VL53L1_WaitValueMaskEx>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800f6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d103      	bne.n	800f6fe <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800f6f6:	2103      	movs	r1, #3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7fe f896 	bl	800d82a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800f6fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b088      	sub	sp, #32
 800f70e:	af02      	add	r7, sp, #8
 800f710:	6078      	str	r0, [r7, #4]
 800f712:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f714:	2300      	movs	r3, #0
 800f716:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800f72a:	f003 0310 	and.w	r3, r3, #16
 800f72e:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800f730:	7bfb      	ldrb	r3, [r7, #15]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d102      	bne.n	800f73c <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800f736:	2301      	movs	r3, #1
 800f738:	75fb      	strb	r3, [r7, #23]
 800f73a:	e001      	b.n	800f740 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800f73c:	2300      	movs	r3, #0
 800f73e:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800f740:	7dfb      	ldrb	r3, [r7, #23]
 800f742:	2201      	movs	r2, #1
 800f744:	9201      	str	r2, [sp, #4]
 800f746:	2201      	movs	r2, #1
 800f748:	9200      	str	r2, [sp, #0]
 800f74a:	2231      	movs	r2, #49	; 0x31
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f98a 	bl	800fa68 <VL53L1_WaitValueMaskEx>
 800f754:	4603      	mov	r3, r0
 800f756:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800f758:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3718      	adds	r7, #24
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f764:	b580      	push	{r7, lr}
 800f766:	b088      	sub	sp, #32
 800f768:	af02      	add	r7, sp, #8
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	330a      	adds	r3, #10
 800f774:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f782:	b299      	uxth	r1, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	b29a      	uxth	r2, r3
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	4613      	mov	r3, r2
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	f7f5 f8a0 	bl	80048d4 <HAL_I2C_Master_Transmit>
 800f794:	4603      	mov	r3, r0
 800f796:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f798:	693b      	ldr	r3, [r7, #16]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3718      	adds	r7, #24
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b088      	sub	sp, #32
 800f7a6:	af02      	add	r7, sp, #8
 800f7a8:	60f8      	str	r0, [r7, #12]
 800f7aa:	60b9      	str	r1, [r7, #8]
 800f7ac:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	330a      	adds	r3, #10
 800f7b2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f7c0:	f043 0301 	orr.w	r3, r3, #1
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	b299      	uxth	r1, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	9300      	str	r3, [sp, #0]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	f7f5 f97c 	bl	8004ad0 <HAL_I2C_Master_Receive>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f7dc:	693b      	ldr	r3, [r7, #16]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
	...

0800f7e8 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b086      	sub	sp, #24
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	607a      	str	r2, [r7, #4]
 800f7f2:	603b      	str	r3, [r7, #0]
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2bff      	cmp	r3, #255	; 0xff
 800f800:	d902      	bls.n	800f808 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800f802:	f06f 0303 	mvn.w	r3, #3
 800f806:	e01d      	b.n	800f844 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800f808:	897b      	ldrh	r3, [r7, #10]
 800f80a:	0a1b      	lsrs	r3, r3, #8
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	4b0e      	ldr	r3, [pc, #56]	; (800f84c <VL53L1_WriteMulti+0x64>)
 800f812:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f814:	897b      	ldrh	r3, [r7, #10]
 800f816:	b2da      	uxtb	r2, r3
 800f818:	4b0c      	ldr	r3, [pc, #48]	; (800f84c <VL53L1_WriteMulti+0x64>)
 800f81a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800f81c:	683a      	ldr	r2, [r7, #0]
 800f81e:	6879      	ldr	r1, [r7, #4]
 800f820:	480b      	ldr	r0, [pc, #44]	; (800f850 <VL53L1_WriteMulti+0x68>)
 800f822:	f000 fb97 	bl	800ff54 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	3302      	adds	r3, #2
 800f82a:	461a      	mov	r2, r3
 800f82c:	4907      	ldr	r1, [pc, #28]	; (800f84c <VL53L1_WriteMulti+0x64>)
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f7ff ff98 	bl	800f764 <_I2CWrite>
 800f834:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d001      	beq.n	800f840 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f83c:	23f3      	movs	r3, #243	; 0xf3
 800f83e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800f840:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	2000062c 	.word	0x2000062c
 800f850:	2000062e 	.word	0x2000062e

0800f854 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f854:	b580      	push	{r7, lr}
 800f856:	b086      	sub	sp, #24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	607a      	str	r2, [r7, #4]
 800f85e:	603b      	str	r3, [r7, #0]
 800f860:	460b      	mov	r3, r1
 800f862:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f864:	2300      	movs	r3, #0
 800f866:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f868:	897b      	ldrh	r3, [r7, #10]
 800f86a:	0a1b      	lsrs	r3, r3, #8
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <VL53L1_ReadMulti+0x68>)
 800f872:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f874:	897b      	ldrh	r3, [r7, #10]
 800f876:	b2da      	uxtb	r2, r3
 800f878:	4b10      	ldr	r3, [pc, #64]	; (800f8bc <VL53L1_ReadMulti+0x68>)
 800f87a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f87c:	2202      	movs	r2, #2
 800f87e:	490f      	ldr	r1, [pc, #60]	; (800f8bc <VL53L1_ReadMulti+0x68>)
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f7ff ff6f 	bl	800f764 <_I2CWrite>
 800f886:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f88e:	23f3      	movs	r3, #243	; 0xf3
 800f890:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f892:	e00c      	b.n	800f8ae <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f894:	683a      	ldr	r2, [r7, #0]
 800f896:	6879      	ldr	r1, [r7, #4]
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f7ff ff82 	bl	800f7a2 <_I2CRead>
 800f89e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d002      	beq.n	800f8ac <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f8a6:	23f3      	movs	r3, #243	; 0xf3
 800f8a8:	75fb      	strb	r3, [r7, #23]
 800f8aa:	e000      	b.n	800f8ae <VL53L1_ReadMulti+0x5a>
    }
done:
 800f8ac:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800f8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3718      	adds	r7, #24
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	2000062c 	.word	0x2000062c

0800f8c0 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	807b      	strh	r3, [r7, #2]
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f8d4:	887b      	ldrh	r3, [r7, #2]
 800f8d6:	0a1b      	lsrs	r3, r3, #8
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	b2da      	uxtb	r2, r3
 800f8dc:	4b0c      	ldr	r3, [pc, #48]	; (800f910 <VL53L1_WrByte+0x50>)
 800f8de:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f8e0:	887b      	ldrh	r3, [r7, #2]
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	4b0a      	ldr	r3, [pc, #40]	; (800f910 <VL53L1_WrByte+0x50>)
 800f8e6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800f8e8:	4a09      	ldr	r2, [pc, #36]	; (800f910 <VL53L1_WrByte+0x50>)
 800f8ea:	787b      	ldrb	r3, [r7, #1]
 800f8ec:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800f8ee:	2203      	movs	r2, #3
 800f8f0:	4907      	ldr	r1, [pc, #28]	; (800f910 <VL53L1_WrByte+0x50>)
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7ff ff36 	bl	800f764 <_I2CWrite>
 800f8f8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f900:	23f3      	movs	r3, #243	; 0xf3
 800f902:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800f904:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	2000062c 	.word	0x2000062c

0800f914 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800f914:	b580      	push	{r7, lr}
 800f916:	b086      	sub	sp, #24
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	460b      	mov	r3, r1
 800f91e:	607a      	str	r2, [r7, #4]
 800f920:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f922:	2300      	movs	r3, #0
 800f924:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800f926:	897b      	ldrh	r3, [r7, #10]
 800f928:	0a1b      	lsrs	r3, r3, #8
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	b2da      	uxtb	r2, r3
 800f92e:	4b12      	ldr	r3, [pc, #72]	; (800f978 <VL53L1_RdByte+0x64>)
 800f930:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800f932:	897b      	ldrh	r3, [r7, #10]
 800f934:	b2da      	uxtb	r2, r3
 800f936:	4b10      	ldr	r3, [pc, #64]	; (800f978 <VL53L1_RdByte+0x64>)
 800f938:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f93a:	2202      	movs	r2, #2
 800f93c:	490e      	ldr	r1, [pc, #56]	; (800f978 <VL53L1_RdByte+0x64>)
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f7ff ff10 	bl	800f764 <_I2CWrite>
 800f944:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d002      	beq.n	800f952 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f94c:	23f3      	movs	r3, #243	; 0xf3
 800f94e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f950:	e00c      	b.n	800f96c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800f952:	2201      	movs	r2, #1
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f7ff ff23 	bl	800f7a2 <_I2CRead>
 800f95c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d002      	beq.n	800f96a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f964:	23f3      	movs	r3, #243	; 0xf3
 800f966:	75fb      	strb	r3, [r7, #23]
 800f968:	e000      	b.n	800f96c <VL53L1_RdByte+0x58>
    }
done:
 800f96a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800f96c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3718      	adds	r7, #24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	2000062c 	.word	0x2000062c

0800f97c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b086      	sub	sp, #24
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	460b      	mov	r3, r1
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f98a:	2300      	movs	r3, #0
 800f98c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f98e:	897b      	ldrh	r3, [r7, #10]
 800f990:	0a1b      	lsrs	r3, r3, #8
 800f992:	b29b      	uxth	r3, r3
 800f994:	b2da      	uxtb	r2, r3
 800f996:	4b18      	ldr	r3, [pc, #96]	; (800f9f8 <VL53L1_RdWord+0x7c>)
 800f998:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800f99a:	897b      	ldrh	r3, [r7, #10]
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	4b16      	ldr	r3, [pc, #88]	; (800f9f8 <VL53L1_RdWord+0x7c>)
 800f9a0:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	4914      	ldr	r1, [pc, #80]	; (800f9f8 <VL53L1_RdWord+0x7c>)
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f7ff fedc 	bl	800f764 <_I2CWrite>
 800f9ac:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d002      	beq.n	800f9ba <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f9b4:	23f3      	movs	r3, #243	; 0xf3
 800f9b6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f9b8:	e017      	b.n	800f9ea <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	490e      	ldr	r1, [pc, #56]	; (800f9f8 <VL53L1_RdWord+0x7c>)
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f7ff feef 	bl	800f7a2 <_I2CRead>
 800f9c4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f9cc:	23f3      	movs	r3, #243	; 0xf3
 800f9ce:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f9d0:	e00b      	b.n	800f9ea <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800f9d2:	4b09      	ldr	r3, [pc, #36]	; (800f9f8 <VL53L1_RdWord+0x7c>)
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	021b      	lsls	r3, r3, #8
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	4b06      	ldr	r3, [pc, #24]	; (800f9f8 <VL53L1_RdWord+0x7c>)
 800f9de:	785b      	ldrb	r3, [r3, #1]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	4413      	add	r3, r2
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800f9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3718      	adds	r7, #24
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	2000062c 	.word	0x2000062c

0800f9fc <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800fa0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b082      	sub	sp, #8
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7f3 fbca 	bl	80031c4 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
	...

0800fa3c <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	4a06      	ldr	r2, [pc, #24]	; (800fa64 <VL53L1_WaitUs+0x28>)
 800fa4a:	fb82 1203 	smull	r1, r2, r2, r3
 800fa4e:	1192      	asrs	r2, r2, #6
 800fa50:	17db      	asrs	r3, r3, #31
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7f3 fbb5 	bl	80031c4 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3708      	adds	r7, #8
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	10624dd3 	.word	0x10624dd3

0800fa68 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800fa68:	b590      	push	{r4, r7, lr}
 800fa6a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	f107 040c 	add.w	r4, r7, #12
 800fa74:	6020      	str	r0, [r4, #0]
 800fa76:	f107 0008 	add.w	r0, r7, #8
 800fa7a:	6001      	str	r1, [r0, #0]
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	1dbb      	adds	r3, r7, #6
 800fa80:	801a      	strh	r2, [r3, #0]
 800fa82:	1d7b      	adds	r3, r7, #5
 800fa84:	460a      	mov	r2, r1
 800fa86:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800fa94:	2300      	movs	r3, #0
 800fa96:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800faa0:	2300      	movs	r3, #0
 800faa2:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800faac:	f107 0310 	add.w	r3, r7, #16
 800fab0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fab4:	4935      	ldr	r1, [pc, #212]	; (800fb8c <VL53L1_WaitValueMaskEx+0x124>)
 800fab6:	4618      	mov	r0, r3
 800fab8:	f000 fa62 	bl	800ff80 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800fabc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7ff ff9b 	bl	800f9fc <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800fac6:	e03f      	b.n	800fb48 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800fac8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800facc:	2b00      	cmp	r3, #0
 800face:	d10b      	bne.n	800fae8 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800fad0:	f207 2213 	addw	r2, r7, #531	; 0x213
 800fad4:	1dbb      	adds	r3, r7, #6
 800fad6:	8819      	ldrh	r1, [r3, #0]
 800fad8:	f107 030c 	add.w	r3, r7, #12
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	f7ff ff19 	bl	800f914 <VL53L1_RdByte>
 800fae2:	4603      	mov	r3, r0
 800fae4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800fae8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800faec:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800faf0:	4013      	ands	r3, r2
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	1d7a      	adds	r2, r7, #5
 800faf6:	7812      	ldrb	r2, [r2, #0]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d102      	bne.n	800fb02 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800fafc:	2301      	movs	r3, #1
 800fafe:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800fb02:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d112      	bne.n	800fb30 <VL53L1_WaitValueMaskEx+0xc8>
 800fb0a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d10e      	bne.n	800fb30 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800fb12:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00a      	beq.n	800fb30 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800fb1a:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800fb1e:	f107 030c 	add.w	r3, r7, #12
 800fb22:	4611      	mov	r1, r2
 800fb24:	6818      	ldr	r0, [r3, #0]
 800fb26:	f7ff ff7a 	bl	800fa1e <VL53L1_WaitMs>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800fb30:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7ff ff61 	bl	800f9fc <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800fb3a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800fb3e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800fb48:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10a      	bne.n	800fb66 <VL53L1_WaitValueMaskEx+0xfe>
 800fb50:	f107 0308 	add.w	r3, r7, #8
 800fb54:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d203      	bcs.n	800fb66 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800fb5e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d0b0      	beq.n	800fac8 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800fb66:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <VL53L1_WaitValueMaskEx+0x114>
 800fb6e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d102      	bne.n	800fb7c <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800fb76:	23f9      	movs	r3, #249	; 0xf9
 800fb78:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800fb7c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd90      	pop	{r4, r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	0801023c 	.word	0x0801023c

0800fb90 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b0a4      	sub	sp, #144	; 0x90
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4603      	mov	r3, r0
 800fb98:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fb9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fb9e:	2200      	movs	r2, #0
 800fba0:	601a      	str	r2, [r3, #0]
 800fba2:	605a      	str	r2, [r3, #4]
 800fba4:	609a      	str	r2, [r3, #8]
 800fba6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fbac:	2200      	movs	r2, #0
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800fbb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	601a      	str	r2, [r3, #0]
 800fbba:	605a      	str	r2, [r3, #4]
 800fbbc:	609a      	str	r2, [r3, #8]
 800fbbe:	60da      	str	r2, [r3, #12]
 800fbc0:	611a      	str	r2, [r3, #16]
 800fbc2:	615a      	str	r2, [r3, #20]
 800fbc4:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800fbde:	2300      	movs	r3, #0
 800fbe0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800fbe4:	e009      	b.n	800fbfa <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800fbe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800fbf0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800fbfa:	79fa      	ldrb	r2, [r7, #7]
 800fbfc:	494d      	ldr	r1, [pc, #308]	; (800fd34 <DC_MOTOR_Init+0x1a4>)
 800fbfe:	4613      	mov	r3, r2
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	4413      	add	r3, r2
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	440b      	add	r3, r1
 800fc08:	3310      	adds	r3, #16
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d3e8      	bcc.n	800fbe6 <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800fc14:	79fa      	ldrb	r2, [r7, #7]
 800fc16:	4947      	ldr	r1, [pc, #284]	; (800fd34 <DC_MOTOR_Init+0x1a4>)
 800fc18:	4613      	mov	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	440b      	add	r3, r1
 800fc22:	3308      	adds	r3, #8
 800fc24:	881b      	ldrh	r3, [r3, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	4b43      	ldr	r3, [pc, #268]	; (800fd38 <DC_MOTOR_Init+0x1a8>)
 800fc2a:	fb03 f302 	mul.w	r3, r3, r2
 800fc2e:	4618      	mov	r0, r3
 800fc30:	79fa      	ldrb	r2, [r7, #7]
 800fc32:	4940      	ldr	r1, [pc, #256]	; (800fd34 <DC_MOTOR_Init+0x1a4>)
 800fc34:	4613      	mov	r3, r2
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	4413      	add	r3, r2
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	440b      	add	r3, r1
 800fc3e:	330c      	adds	r3, #12
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fc46:	fb02 f303 	mul.w	r3, r2, r3
 800fc4a:	fbb0 f3f3 	udiv	r3, r0, r3
 800fc4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800fc52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc56:	3b01      	subs	r3, #1
 800fc58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800fc5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc60:	3b02      	subs	r3, #2
 800fc62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800fc66:	79fa      	ldrb	r2, [r7, #7]
 800fc68:	4932      	ldr	r1, [pc, #200]	; (800fd34 <DC_MOTOR_Init+0x1a4>)
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	4413      	add	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	440b      	add	r3, r1
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800fc78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc7c:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800fc7e:	2360      	movs	r3, #96	; 0x60
 800fc80:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800fc82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc86:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fc8c:	2380      	movs	r3, #128	; 0x80
 800fc8e:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 800fc90:	f107 0308 	add.w	r3, r7, #8
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7f7 fa79 	bl	800718c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fc9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc9e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800fca0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800fca4:	f107 0308 	add.w	r3, r7, #8
 800fca8:	4611      	mov	r1, r2
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7f8 fb24 	bl	80082f8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800fcb0:	f107 0308 	add.w	r3, r7, #8
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7f7 fc1f 	bl	80074f8 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800fcc2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800fcc6:	f107 0308 	add.w	r3, r7, #8
 800fcca:	4611      	mov	r1, r2
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7f9 fab3 	bl	8009238 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fcd2:	2360      	movs	r3, #96	; 0x60
 800fcd4:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fcde:	2300      	movs	r3, #0
 800fce0:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800fce2:	79fa      	ldrb	r2, [r7, #7]
 800fce4:	4913      	ldr	r1, [pc, #76]	; (800fd34 <DC_MOTOR_Init+0x1a4>)
 800fce6:	4613      	mov	r3, r2
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4413      	add	r3, r2
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	440b      	add	r3, r1
 800fcf0:	3304      	adds	r3, #4
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fcf8:	f107 0308 	add.w	r3, r7, #8
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f8 f923 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800fd02:	f107 0308 	add.w	r3, r7, #8
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7f2 ffe2 	bl	8002cd0 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800fd0c:	79fa      	ldrb	r2, [r7, #7]
 800fd0e:	4909      	ldr	r1, [pc, #36]	; (800fd34 <DC_MOTOR_Init+0x1a4>)
 800fd10:	4613      	mov	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4413      	add	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	440b      	add	r3, r1
 800fd1a:	3304      	adds	r3, #4
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	f107 0308 	add.w	r3, r7, #8
 800fd22:	4611      	mov	r1, r2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f7 fcd7 	bl	80076d8 <HAL_TIM_PWM_Start>
}
 800fd2a:	bf00      	nop
 800fd2c:	3790      	adds	r7, #144	; 0x90
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	08010280 	.word	0x08010280
 800fd38:	000f4240 	.word	0x000f4240

0800fd3c <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b083      	sub	sp, #12
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	460a      	mov	r2, r1
 800fd46:	71fb      	strb	r3, [r7, #7]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800fd4c:	79fa      	ldrb	r2, [r7, #7]
 800fd4e:	4928      	ldr	r1, [pc, #160]	; (800fdf0 <DC_MOTOR_Start+0xb4>)
 800fd50:	4613      	mov	r3, r2
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	4413      	add	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	440b      	add	r3, r1
 800fd5a:	3304      	adds	r3, #4
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d10a      	bne.n	800fd78 <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800fd62:	79fa      	ldrb	r2, [r7, #7]
 800fd64:	4922      	ldr	r1, [pc, #136]	; (800fdf0 <DC_MOTOR_Start+0xb4>)
 800fd66:	4613      	mov	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	4413      	add	r3, r2
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	440b      	add	r3, r1
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	88ba      	ldrh	r2, [r7, #4]
 800fd74:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800fd76:	e035      	b.n	800fde4 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800fd78:	79fa      	ldrb	r2, [r7, #7]
 800fd7a:	491d      	ldr	r1, [pc, #116]	; (800fdf0 <DC_MOTOR_Start+0xb4>)
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	4413      	add	r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	440b      	add	r3, r1
 800fd86:	3304      	adds	r3, #4
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2b04      	cmp	r3, #4
 800fd8c:	d10a      	bne.n	800fda4 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800fd8e:	79fa      	ldrb	r2, [r7, #7]
 800fd90:	4917      	ldr	r1, [pc, #92]	; (800fdf0 <DC_MOTOR_Start+0xb4>)
 800fd92:	4613      	mov	r3, r2
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	4413      	add	r3, r2
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	440b      	add	r3, r1
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	88ba      	ldrh	r2, [r7, #4]
 800fda0:	639a      	str	r2, [r3, #56]	; 0x38
}
 800fda2:	e01f      	b.n	800fde4 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800fda4:	79fa      	ldrb	r2, [r7, #7]
 800fda6:	4912      	ldr	r1, [pc, #72]	; (800fdf0 <DC_MOTOR_Start+0xb4>)
 800fda8:	4613      	mov	r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	4413      	add	r3, r2
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	440b      	add	r3, r1
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2b08      	cmp	r3, #8
 800fdb8:	d10a      	bne.n	800fdd0 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800fdba:	79fa      	ldrb	r2, [r7, #7]
 800fdbc:	490c      	ldr	r1, [pc, #48]	; (800fdf0 <DC_MOTOR_Start+0xb4>)
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	4413      	add	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	440b      	add	r3, r1
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	88ba      	ldrh	r2, [r7, #4]
 800fdcc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fdce:	e009      	b.n	800fde4 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800fdd0:	79fa      	ldrb	r2, [r7, #7]
 800fdd2:	4907      	ldr	r1, [pc, #28]	; (800fdf0 <DC_MOTOR_Start+0xb4>)
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	4413      	add	r3, r2
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	440b      	add	r3, r1
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	88ba      	ldrh	r2, [r7, #4]
 800fde2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fde4:	bf00      	nop
 800fde6:	370c      	adds	r7, #12
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	08010280 	.word	0x08010280

0800fdf4 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	460a      	mov	r2, r1
 800fdfe:	71fb      	strb	r3, [r7, #7]
 800fe00:	4613      	mov	r3, r2
 800fe02:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800fe04:	79fa      	ldrb	r2, [r7, #7]
 800fe06:	4928      	ldr	r1, [pc, #160]	; (800fea8 <DC_MOTOR_Set_Speed+0xb4>)
 800fe08:	4613      	mov	r3, r2
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	4413      	add	r3, r2
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	440b      	add	r3, r1
 800fe12:	3304      	adds	r3, #4
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d10a      	bne.n	800fe30 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800fe1a:	79fa      	ldrb	r2, [r7, #7]
 800fe1c:	4922      	ldr	r1, [pc, #136]	; (800fea8 <DC_MOTOR_Set_Speed+0xb4>)
 800fe1e:	4613      	mov	r3, r2
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	4413      	add	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	440b      	add	r3, r1
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	88ba      	ldrh	r2, [r7, #4]
 800fe2c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800fe2e:	e035      	b.n	800fe9c <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800fe30:	79fa      	ldrb	r2, [r7, #7]
 800fe32:	491d      	ldr	r1, [pc, #116]	; (800fea8 <DC_MOTOR_Set_Speed+0xb4>)
 800fe34:	4613      	mov	r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	440b      	add	r3, r1
 800fe3e:	3304      	adds	r3, #4
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b04      	cmp	r3, #4
 800fe44:	d10a      	bne.n	800fe5c <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800fe46:	79fa      	ldrb	r2, [r7, #7]
 800fe48:	4917      	ldr	r1, [pc, #92]	; (800fea8 <DC_MOTOR_Set_Speed+0xb4>)
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4413      	add	r3, r2
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	440b      	add	r3, r1
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	88ba      	ldrh	r2, [r7, #4]
 800fe58:	639a      	str	r2, [r3, #56]	; 0x38
}
 800fe5a:	e01f      	b.n	800fe9c <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800fe5c:	79fa      	ldrb	r2, [r7, #7]
 800fe5e:	4912      	ldr	r1, [pc, #72]	; (800fea8 <DC_MOTOR_Set_Speed+0xb4>)
 800fe60:	4613      	mov	r3, r2
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	4413      	add	r3, r2
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	440b      	add	r3, r1
 800fe6a:	3304      	adds	r3, #4
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b08      	cmp	r3, #8
 800fe70:	d10a      	bne.n	800fe88 <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800fe72:	79fa      	ldrb	r2, [r7, #7]
 800fe74:	490c      	ldr	r1, [pc, #48]	; (800fea8 <DC_MOTOR_Set_Speed+0xb4>)
 800fe76:	4613      	mov	r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4413      	add	r3, r2
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	440b      	add	r3, r1
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	88ba      	ldrh	r2, [r7, #4]
 800fe84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fe86:	e009      	b.n	800fe9c <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800fe88:	79fa      	ldrb	r2, [r7, #7]
 800fe8a:	4907      	ldr	r1, [pc, #28]	; (800fea8 <DC_MOTOR_Set_Speed+0xb4>)
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4413      	add	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	440b      	add	r3, r1
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	88ba      	ldrh	r2, [r7, #4]
 800fe9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr
 800fea8:	08010280 	.word	0x08010280

0800feac <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800feac:	b480      	push	{r7}
 800feae:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800feb0:	4b14      	ldr	r3, [pc, #80]	; (800ff04 <DWT_Delay_Init+0x58>)
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	4a13      	ldr	r2, [pc, #76]	; (800ff04 <DWT_Delay_Init+0x58>)
 800feb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800feba:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800febc:	4b11      	ldr	r3, [pc, #68]	; (800ff04 <DWT_Delay_Init+0x58>)
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	4a10      	ldr	r2, [pc, #64]	; (800ff04 <DWT_Delay_Init+0x58>)
 800fec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fec6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800fec8:	4b0f      	ldr	r3, [pc, #60]	; (800ff08 <DWT_Delay_Init+0x5c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4a0e      	ldr	r2, [pc, #56]	; (800ff08 <DWT_Delay_Init+0x5c>)
 800fece:	f023 0301 	bic.w	r3, r3, #1
 800fed2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800fed4:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <DWT_Delay_Init+0x5c>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a0b      	ldr	r2, [pc, #44]	; (800ff08 <DWT_Delay_Init+0x5c>)
 800feda:	f043 0301 	orr.w	r3, r3, #1
 800fede:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800fee0:	4b09      	ldr	r3, [pc, #36]	; (800ff08 <DWT_Delay_Init+0x5c>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800fee6:	bf00      	nop
    __ASM volatile ("NOP");
 800fee8:	bf00      	nop
    __ASM volatile ("NOP");
 800feea:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800feec:	4b06      	ldr	r3, [pc, #24]	; (800ff08 <DWT_Delay_Init+0x5c>)
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800fef4:	2300      	movs	r3, #0
 800fef6:	e000      	b.n	800fefa <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800fef8:	2301      	movs	r3, #1
    }
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	e000edf0 	.word	0xe000edf0
 800ff08:	e0001000 	.word	0xe0001000

0800ff0c <__libc_init_array>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	4d0d      	ldr	r5, [pc, #52]	; (800ff44 <__libc_init_array+0x38>)
 800ff10:	4c0d      	ldr	r4, [pc, #52]	; (800ff48 <__libc_init_array+0x3c>)
 800ff12:	1b64      	subs	r4, r4, r5
 800ff14:	10a4      	asrs	r4, r4, #2
 800ff16:	2600      	movs	r6, #0
 800ff18:	42a6      	cmp	r6, r4
 800ff1a:	d109      	bne.n	800ff30 <__libc_init_array+0x24>
 800ff1c:	4d0b      	ldr	r5, [pc, #44]	; (800ff4c <__libc_init_array+0x40>)
 800ff1e:	4c0c      	ldr	r4, [pc, #48]	; (800ff50 <__libc_init_array+0x44>)
 800ff20:	f000 f842 	bl	800ffa8 <_init>
 800ff24:	1b64      	subs	r4, r4, r5
 800ff26:	10a4      	asrs	r4, r4, #2
 800ff28:	2600      	movs	r6, #0
 800ff2a:	42a6      	cmp	r6, r4
 800ff2c:	d105      	bne.n	800ff3a <__libc_init_array+0x2e>
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff34:	4798      	blx	r3
 800ff36:	3601      	adds	r6, #1
 800ff38:	e7ee      	b.n	800ff18 <__libc_init_array+0xc>
 800ff3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff3e:	4798      	blx	r3
 800ff40:	3601      	adds	r6, #1
 800ff42:	e7f2      	b.n	800ff2a <__libc_init_array+0x1e>
 800ff44:	080102b0 	.word	0x080102b0
 800ff48:	080102b0 	.word	0x080102b0
 800ff4c:	080102b0 	.word	0x080102b0
 800ff50:	080102b4 	.word	0x080102b4

0800ff54 <memcpy>:
 800ff54:	440a      	add	r2, r1
 800ff56:	4291      	cmp	r1, r2
 800ff58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff5c:	d100      	bne.n	800ff60 <memcpy+0xc>
 800ff5e:	4770      	bx	lr
 800ff60:	b510      	push	{r4, lr}
 800ff62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff6a:	4291      	cmp	r1, r2
 800ff6c:	d1f9      	bne.n	800ff62 <memcpy+0xe>
 800ff6e:	bd10      	pop	{r4, pc}

0800ff70 <memset>:
 800ff70:	4402      	add	r2, r0
 800ff72:	4603      	mov	r3, r0
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d100      	bne.n	800ff7a <memset+0xa>
 800ff78:	4770      	bx	lr
 800ff7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff7e:	e7f9      	b.n	800ff74 <memset+0x4>

0800ff80 <strncpy>:
 800ff80:	b510      	push	{r4, lr}
 800ff82:	3901      	subs	r1, #1
 800ff84:	4603      	mov	r3, r0
 800ff86:	b132      	cbz	r2, 800ff96 <strncpy+0x16>
 800ff88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ff8c:	f803 4b01 	strb.w	r4, [r3], #1
 800ff90:	3a01      	subs	r2, #1
 800ff92:	2c00      	cmp	r4, #0
 800ff94:	d1f7      	bne.n	800ff86 <strncpy+0x6>
 800ff96:	441a      	add	r2, r3
 800ff98:	2100      	movs	r1, #0
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d100      	bne.n	800ffa0 <strncpy+0x20>
 800ff9e:	bd10      	pop	{r4, pc}
 800ffa0:	f803 1b01 	strb.w	r1, [r3], #1
 800ffa4:	e7f9      	b.n	800ff9a <strncpy+0x1a>
	...

0800ffa8 <_init>:
 800ffa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffaa:	bf00      	nop
 800ffac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffae:	bc08      	pop	{r3}
 800ffb0:	469e      	mov	lr, r3
 800ffb2:	4770      	bx	lr

0800ffb4 <_fini>:
 800ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb6:	bf00      	nop
 800ffb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffba:	bc08      	pop	{r3}
 800ffbc:	469e      	mov	lr, r3
 800ffbe:	4770      	bx	lr
