
RobonAUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c518  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800c6e0  0800c6e0  0001c6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c98c  0800c98c  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c98c  0800c98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c994  0800c994  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c994  0800c994  0001c994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c998  0800c998  0001c998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800c99c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009d98  200001c8  0800cb64  000201c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009f60  0800cb64  00029f60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ec4  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ea  00000000  00000000  000370bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  000399a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003ad10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026258  00000000  00000000  0003bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e619  00000000  00000000  000621e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebe0b  00000000  00000000  00080801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c60c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  0016c660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001c8 	.word	0x200001c8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c6c8 	.word	0x0800c6c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001cc 	.word	0x200001cc
 8000204:	0800c6c8 	.word	0x0800c6c8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b96e 	b.w	8000e88 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	4604      	mov	r4, r0
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8083 	bne.w	8000cda <__udivmoddi4+0x116>
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	4617      	mov	r7, r2
 8000bd8:	d947      	bls.n	8000c6a <__udivmoddi4+0xa6>
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	b142      	cbz	r2, 8000bf2 <__udivmoddi4+0x2e>
 8000be0:	f1c2 0020 	rsb	r0, r2, #32
 8000be4:	fa24 f000 	lsr.w	r0, r4, r0
 8000be8:	4091      	lsls	r1, r2
 8000bea:	4097      	lsls	r7, r2
 8000bec:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf0:	4094      	lsls	r4, r2
 8000bf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bfc:	fa1f fe87 	uxth.w	lr, r7
 8000c00:	fb08 c116 	mls	r1, r8, r6, ip
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f10e 	mul.w	r1, r6, lr
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x60>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 8119 	bcs.w	8000e4c <__udivmoddi4+0x288>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 8116 	bls.w	8000e4c <__udivmoddi4+0x288>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	443b      	add	r3, r7
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x8c>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c42:	f080 8105 	bcs.w	8000e50 <__udivmoddi4+0x28c>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	f240 8102 	bls.w	8000e50 <__udivmoddi4+0x28c>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	443c      	add	r4, r7
 8000c50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c54:	eba4 040e 	sub.w	r4, r4, lr
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa0>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	b902      	cbnz	r2, 8000c6e <__udivmoddi4+0xaa>
 8000c6c:	deff      	udf	#255	; 0xff
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d150      	bne.n	8000d18 <__udivmoddi4+0x154>
 8000c76:	1bcb      	subs	r3, r1, r7
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	2601      	movs	r6, #1
 8000c82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c86:	0c21      	lsrs	r1, r4, #16
 8000c88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb08 f30c 	mul.w	r3, r8, ip
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xe4>
 8000c98:	1879      	adds	r1, r7, r1
 8000c9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0xe2>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f200 80e9 	bhi.w	8000e78 <__udivmoddi4+0x2b4>
 8000ca6:	4684      	mov	ip, r0
 8000ca8:	1ac9      	subs	r1, r1, r3
 8000caa:	b2a3      	uxth	r3, r4
 8000cac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb8:	fb08 f800 	mul.w	r8, r8, r0
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x10c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x10a>
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	f200 80d9 	bhi.w	8000e80 <__udivmoddi4+0x2bc>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	eba4 0408 	sub.w	r4, r4, r8
 8000cd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd8:	e7bf      	b.n	8000c5a <__udivmoddi4+0x96>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d909      	bls.n	8000cf2 <__udivmoddi4+0x12e>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	f000 80b1 	beq.w	8000e46 <__udivmoddi4+0x282>
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cea:	4630      	mov	r0, r6
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	fab3 f683 	clz	r6, r3
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d14a      	bne.n	8000d90 <__udivmoddi4+0x1cc>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0x140>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 80b8 	bhi.w	8000e74 <__udivmoddi4+0x2b0>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0a8      	beq.n	8000c64 <__udivmoddi4+0xa0>
 8000d12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d20:	4097      	lsls	r7, r2
 8000d22:	fa01 f002 	lsl.w	r0, r1, r2
 8000d26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2a:	40d9      	lsrs	r1, r3
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	0c03      	lsrs	r3, r0, #16
 8000d30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d40:	fb06 f108 	mul.w	r1, r6, r8
 8000d44:	4299      	cmp	r1, r3
 8000d46:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x19c>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d52:	f080 808d 	bcs.w	8000e70 <__udivmoddi4+0x2ac>
 8000d56:	4299      	cmp	r1, r3
 8000d58:	f240 808a 	bls.w	8000e70 <__udivmoddi4+0x2ac>
 8000d5c:	3e02      	subs	r6, #2
 8000d5e:	443b      	add	r3, r7
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b281      	uxth	r1, r0
 8000d64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb00 f308 	mul.w	r3, r0, r8
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x1c4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7e:	d273      	bcs.n	8000e68 <__udivmoddi4+0x2a4>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d971      	bls.n	8000e68 <__udivmoddi4+0x2a4>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4439      	add	r1, r7
 8000d88:	1acb      	subs	r3, r1, r3
 8000d8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8e:	e778      	b.n	8000c82 <__udivmoddi4+0xbe>
 8000d90:	f1c6 0c20 	rsb	ip, r6, #32
 8000d94:	fa03 f406 	lsl.w	r4, r3, r6
 8000d98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d9c:	431c      	orrs	r4, r3
 8000d9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da2:	fa01 f306 	lsl.w	r3, r1, r6
 8000da6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000daa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dae:	431f      	orrs	r7, r3
 8000db0:	0c3b      	lsrs	r3, r7, #16
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fa1f f884 	uxth.w	r8, r4
 8000dba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x220>
 8000dd2:	1861      	adds	r1, r4, r1
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	d248      	bcs.n	8000e6c <__udivmoddi4+0x2a8>
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	d946      	bls.n	8000e6c <__udivmoddi4+0x2a8>
 8000dde:	f1a9 0902 	sub.w	r9, r9, #2
 8000de2:	4421      	add	r1, r4
 8000de4:	eba1 010a 	sub.w	r1, r1, sl
 8000de8:	b2bf      	uxth	r7, r7
 8000dea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df6:	fb00 f808 	mul.w	r8, r0, r8
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x24a>
 8000dfe:	19e7      	adds	r7, r4, r7
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d22e      	bcs.n	8000e64 <__udivmoddi4+0x2a0>
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d92c      	bls.n	8000e64 <__udivmoddi4+0x2a0>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4427      	add	r7, r4
 8000e0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e12:	eba7 0708 	sub.w	r7, r7, r8
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	454f      	cmp	r7, r9
 8000e1c:	46c6      	mov	lr, r8
 8000e1e:	4649      	mov	r1, r9
 8000e20:	d31a      	bcc.n	8000e58 <__udivmoddi4+0x294>
 8000e22:	d017      	beq.n	8000e54 <__udivmoddi4+0x290>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x27a>
 8000e26:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e32:	40f2      	lsrs	r2, r6
 8000e34:	ea4c 0202 	orr.w	r2, ip, r2
 8000e38:	40f7      	lsrs	r7, r6
 8000e3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	462e      	mov	r6, r5
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e70b      	b.n	8000c64 <__udivmoddi4+0xa0>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	e6e9      	b.n	8000c24 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fd      	b.n	8000c50 <__udivmoddi4+0x8c>
 8000e54:	4543      	cmp	r3, r8
 8000e56:	d2e5      	bcs.n	8000e24 <__udivmoddi4+0x260>
 8000e58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e60:	3801      	subs	r0, #1
 8000e62:	e7df      	b.n	8000e24 <__udivmoddi4+0x260>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e7d2      	b.n	8000e0e <__udivmoddi4+0x24a>
 8000e68:	4660      	mov	r0, ip
 8000e6a:	e78d      	b.n	8000d88 <__udivmoddi4+0x1c4>
 8000e6c:	4681      	mov	r9, r0
 8000e6e:	e7b9      	b.n	8000de4 <__udivmoddi4+0x220>
 8000e70:	4666      	mov	r6, ip
 8000e72:	e775      	b.n	8000d60 <__udivmoddi4+0x19c>
 8000e74:	4630      	mov	r0, r6
 8000e76:	e74a      	b.n	8000d0e <__udivmoddi4+0x14a>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	4439      	add	r1, r7
 8000e7e:	e713      	b.n	8000ca8 <__udivmoddi4+0xe4>
 8000e80:	3802      	subs	r0, #2
 8000e82:	443c      	add	r4, r7
 8000e84:	e724      	b.n	8000cd0 <__udivmoddi4+0x10c>
 8000e86:	bf00      	nop

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b0a8      	sub	sp, #160	; 0xa0
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t ARR_Value = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DWT_Delay_Init();
 8000ece:	f00b fb9f 	bl	800c610 <DWT_Delay_Init>
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
*/
	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4aaa      	ldr	r2, [pc, #680]	; (8001180 <SERVO_Init+0x2f4>)
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	4413      	add	r3, r2
 8000eda:	3314      	adds	r3, #20
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fad4 	bl	800048c <__aeabi_ui2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4ba6      	ldr	r3, [pc, #664]	; (8001184 <SERVO_Init+0x2f8>)
 8000eea:	f7ff fc73 	bl	80007d4 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fddd 	bl	8000ab4 <__aeabi_d2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4a9f      	ldr	r2, [pc, #636]	; (8001180 <SERVO_Init+0x2f4>)
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	4413      	add	r3, r2
 8000f08:	3314      	adds	r3, #20
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fabd 	bl	800048c <__aeabi_ui2d>
 8000f12:	4604      	mov	r4, r0
 8000f14:	460d      	mov	r5, r1
 8000f16:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000f1a:	f7ff fab7 	bl	800048c <__aeabi_ui2d>
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b99      	ldr	r3, [pc, #612]	; (8001188 <SERVO_Init+0x2fc>)
 8000f24:	f7ff f976 	bl	8000214 <__adddf3>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b95      	ldr	r3, [pc, #596]	; (800118c <SERVO_Init+0x300>)
 8000f36:	f7ff fb23 	bl	8000580 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc47 	bl	80007d4 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <SERVO_Init+0x2fc>)
 8000f54:	f7ff f95c 	bl	8000210 <__aeabi_dsub>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fda8 	bl	8000ab4 <__aeabi_d2uiz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	PSC_Value = 19;
 8000f6a:	2313      	movs	r3, #19
 8000f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value = 49999;
 8000f70:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM12)
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	4a81      	ldr	r2, [pc, #516]	; (8001180 <SERVO_Init+0x2f4>)
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4413      	add	r3, r2
 8000f80:	3308      	adds	r3, #8
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a82      	ldr	r2, [pc, #520]	; (8001190 <SERVO_Init+0x304>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <SERVO_Init+0x11c>
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	4b81      	ldr	r3, [pc, #516]	; (8001194 <SERVO_Init+0x308>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a80      	ldr	r2, [pc, #512]	; (8001194 <SERVO_Init+0x308>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <SERVO_Init+0x308>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	e046      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4a75      	ldr	r2, [pc, #468]	; (8001180 <SERVO_Init+0x2f4>)
 8000fac:	015b      	lsls	r3, r3, #5
 8000fae:	4413      	add	r3, r2
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d10e      	bne.n	8000fd8 <SERVO_Init+0x14c>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b75      	ldr	r3, [pc, #468]	; (8001194 <SERVO_Init+0x308>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a74      	ldr	r2, [pc, #464]	; (8001194 <SERVO_Init+0x308>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b72      	ldr	r3, [pc, #456]	; (8001194 <SERVO_Init+0x308>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	e02e      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4a69      	ldr	r2, [pc, #420]	; (8001180 <SERVO_Init+0x2f4>)
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	4413      	add	r3, r2
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6c      	ldr	r2, [pc, #432]	; (8001198 <SERVO_Init+0x30c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10e      	bne.n	8001008 <SERVO_Init+0x17c>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b69      	ldr	r3, [pc, #420]	; (8001194 <SERVO_Init+0x308>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a68      	ldr	r2, [pc, #416]	; (8001194 <SERVO_Init+0x308>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b66      	ldr	r3, [pc, #408]	; (8001194 <SERVO_Init+0x308>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	e016      	b.n	8001036 <SERVO_Init+0x1aa>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4a5d      	ldr	r2, [pc, #372]	; (8001180 <SERVO_Init+0x2f4>)
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	4413      	add	r3, r2
 8001010:	3308      	adds	r3, #8
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a61      	ldr	r2, [pc, #388]	; (800119c <SERVO_Init+0x310>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <SERVO_Init+0x1aa>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <SERVO_Init+0x308>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <SERVO_Init+0x308>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <SERVO_Init+0x308>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <SERVO_Init+0x2f4>)
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	4413      	add	r3, r2
 800103e:	3308      	adds	r3, #8
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8001044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001048:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 800104e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fa81 	bl	8008568 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800106e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f008 fe19 	bl	8009cb0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4618      	mov	r0, r3
 8001084:	f007 fc26 	bl	80088d4 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001094:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 ffd4 	bl	800b04c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4a32      	ldr	r2, [pc, #200]	; (8001180 <SERVO_Init+0x2f4>)
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	4413      	add	r3, r2
 80010bc:	3310      	adds	r3, #16
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fc19 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80010ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80010d2:	f7ff f9db 	bl	800048c <__aeabi_ui2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <SERVO_Init+0x2f4>)
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	4413      	add	r3, r2
 80010e2:	3318      	adds	r3, #24
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9f2 	bl	80004d0 <__aeabi_f2d>
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <SERVO_Init+0x314>)
 80010f2:	f7ff fb6f 	bl	80007d4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fa3f 	bl	8000580 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	88fc      	ldrh	r4, [r7, #6]
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fcd2 	bl	8000ab4 <__aeabi_d2uiz>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SERVO_Init+0x318>)
 8001116:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800111a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800111e:	f7ff f9b5 	bl	800048c <__aeabi_ui2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <SERVO_Init+0x31c>)
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9d1 	bl	80004d0 <__aeabi_f2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <SERVO_Init+0x314>)
 8001134:	f7ff fb4e 	bl	80007d4 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff fa1e 	bl	8000580 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	88fc      	ldrh	r4, [r7, #6]
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fcb1 	bl	8000ab4 <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b299      	uxth	r1, r3
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <SERVO_Init+0x318>)
 8001158:	00a3      	lsls	r3, r4, #2
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SERVO_Init+0x2f4>)
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	4413      	add	r3, r2
 8001168:	3310      	adds	r3, #16
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f007 fca8 	bl	8008ac8 <HAL_TIM_PWM_Start>

}
 8001178:	bf00      	nop
 800117a:	37a0      	adds	r7, #160	; 0xa0
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	0800c924 	.word	0x0800c924
 8001184:	41490000 	.word	0x41490000
 8001188:	3ff00000 	.word	0x3ff00000
 800118c:	40490000 	.word	0x40490000
 8001190:	40001800 	.word	0x40001800
 8001194:	40023800 	.word	0x40023800
 8001198:	40000400 	.word	0x40000400
 800119c:	40000800 	.word	0x40000800
 80011a0:	40340000 	.word	0x40340000
 80011a4:	200001e4 	.word	0x200001e4
 80011a8:	40066666 	.word	0x40066666

080011ac <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	ed87 0a00 	vstr	s0, [r7]
 80011b8:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <SERVO_MoveTo+0x94>)
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	4619      	mov	r1, r3
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <SERVO_MoveTo+0x94>)
 80011ce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011d2:	1acb      	subs	r3, r1, r3
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011dc:	edd7 7a00 	vldr	s15, [r7]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f972 	bl	80004d0 <__aeabi_f2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <SERVO_MoveTo+0x98>)
 80011f2:	f7ff faef 	bl	80007d4 <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <SERVO_MoveTo+0x94>)
 8001202:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f950 	bl	80004ac <__aeabi_i2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7fe fffe 	bl	8000214 <__adddf3>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc48 	bl	8000ab4 <__aeabi_d2uiz>
 8001224:	4603      	mov	r3, r0
 8001226:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SERVO_MoveTo+0x9c>)
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	4413      	add	r3, r2
 8001230:	330c      	adds	r3, #12
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	200001e4 	.word	0x200001e4
 8001244:	40668000 	.word	0x40668000
 8001248:	0800c924 	.word	0x0800c924

0800124c <HAL_UART_RxCpltCallback>:
void Kapukbol_iranyok(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	olvasok = true;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_UART_RxCpltCallback+0xb4>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &temp_radio, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	4929      	ldr	r1, [pc, #164]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <HAL_UART_RxCpltCallback+0xbc>)
 8001260:	f00a f98c 	bl	800b57c <HAL_UART_Receive_IT>
	if(temp_radio == 0x30)
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b30      	cmp	r3, #48	; 0x30
 800126a:	d102      	bne.n	8001272 <HAL_UART_RxCpltCallback+0x26>
		letsGo = true;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_UART_RxCpltCallback+0xc0>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
	if(temp_radio < 0x60 && 0x40 < temp_radio) {
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b5f      	cmp	r3, #95	; 0x5f
 8001278:	d824      	bhi.n	80012c4 <HAL_UART_RxCpltCallback+0x78>
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b40      	cmp	r3, #64	; 0x40
 8001280:	d920      	bls.n	80012c4 <HAL_UART_RxCpltCallback+0x78>
		if(temp_radio != kapuk[0]) {
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_UART_RxCpltCallback+0xc4>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d006      	beq.n	800129c <HAL_UART_RxCpltCallback+0x50>
			uj_kapu = true;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_UART_RxCpltCallback+0xc8>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
			letsGo = true;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_UART_RxCpltCallback+0xc0>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e002      	b.n	80012a2 <HAL_UART_RxCpltCallback+0x56>
		} else {
			uj_kapu = false;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_UART_RxCpltCallback+0xc8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		}
		radio_i = 0;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		for(int j=0; j < 6; j++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e007      	b.n	80012be <HAL_UART_RxCpltCallback+0x72>
			kapuk[j] = '-';
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <HAL_UART_RxCpltCallback+0xc4>)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	222d      	movs	r2, #45	; 0x2d
 80012b6:	701a      	strb	r2, [r3, #0]
		for(int j=0; j < 6; j++)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	ddf4      	ble.n	80012ae <HAL_UART_RxCpltCallback+0x62>
	}
	kapuk[radio_i] = temp_radio;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 80012cc:	7819      	ldrb	r1, [r3, #0]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_UART_RxCpltCallback+0xc4>)
 80012d0:	5499      	strb	r1, [r3, r2]
	radio_i++;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_UART_RxCpltCallback+0xcc>)
 80012dc:	701a      	strb	r2, [r3, #0]

	if(uj_kapu == true && temp_radio == '\n') {
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_UART_RxCpltCallback+0xc8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_UART_RxCpltCallback+0xa6>
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_UART_RxCpltCallback+0xb8>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d101      	bne.n	80012f2 <HAL_UART_RxCpltCallback+0xa6>
		Kapukbol_iranyok();
 80012ee:	f002 f991 	bl	8003614 <Kapukbol_iranyok>
	}
	olvasok = false;
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_UART_RxCpltCallback+0xb4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
			bluetooth_flag = 1;
		bluetooth_str1[bluetooth_a] = bluetooth_rx;
		bluetooth_a++;
	}
	HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);*/
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000265 	.word	0x20000265
 8001304:	2000015e 	.word	0x2000015e
 8001308:	2000043c 	.word	0x2000043c
 800130c:	20000260 	.word	0x20000260
 8001310:	20000158 	.word	0x20000158
 8001314:	20000262 	.word	0x20000262
 8001318:	20000261 	.word	0x20000261

0800131c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	if (olvasok == false) {
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f083 0301 	eor.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d023      	beq.n	800137a <HAL_TIM_PeriodElapsedCallback+0x5e>
		if (htim == &htim2) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d11f      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x5e>
			timer_counter += 1;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001344:	701a      	strb	r2, [r3, #0]
			if(9 < timer_counter) {
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b09      	cmp	r3, #9
 800134c:	d915      	bls.n	800137a <HAL_TIM_PeriodElapsedCallback+0x5e>
				Vonalas_tombok_torlese();
 800134e:	f001 fad1 	bl	80028f4 <Vonalas_tombok_torlese>
				Vonalszenzor_operal(vonal_eredmeny_h, vonal_eredmeny_e);
 8001352:	490f      	ldr	r1, [pc, #60]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001354:	480f      	ldr	r0, [pc, #60]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001356:	f000 fe57 	bl	8002008 <Vonalszenzor_operal>
				Vonalas_tombok_feltoltese();
 800135a:	f001 fb21 	bl	80029a0 <Vonalas_tombok_feltoltese>
				Irany_valaszto();
 800135e:	f001 fc4b 	bl	8002bf8 <Irany_valaszto>
				Kovetendo_vonal_valaszto(&vonal_kovetni_e, &vonal_kovetni_h, aktualis_irany);
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800136c:	f001 fd2c 	bl	8002dc8 <Kovetendo_vonal_valaszto>
				Szervo_szog_beallit();
 8001370:	f001 ff9e 	bl	80032b0 <Szervo_szog_beallit>
				timer_counter = 0;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			bluetooth_i++;
			bluetooth_len = strlen(bluetooth_buffer);
			//HAL_UART_Transmit(&huart2, bluetooth_buffer, bluetooth_len, 100);*/
		}
	}
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000265 	.word	0x20000265
 8001388:	20001668 	.word	0x20001668
 800138c:	20000264 	.word	0x20000264
 8001390:	20000210 	.word	0x20000210
 8001394:	200001ec 	.word	0x200001ec
 8001398:	2000013d 	.word	0x2000013d
 800139c:	20000238 	.word	0x20000238
 80013a0:	20000240 	.word	0x20000240

080013a4 <Delay_Microsec_tav1>:

void Delay_Microsec_tav1(uint16_t time){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <Delay_Microsec_tav1+0x30>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 80013b6:	bf00      	nop
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <Delay_Microsec_tav1+0x30>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3f9      	bcc.n	80013b8 <Delay_Microsec_tav1+0x14>
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000480 	.word	0x20000480

080013d8 <HAL_TIM_IC_CaptureCallback>:
bool is_first_captured_tav1 = false;
uint16_t distance_tav1 = 0;
#define TAV1_PORT GPIOB
#define TAV1_PIN GPIO_PIN_10

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7f1b      	ldrb	r3, [r3, #28]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 8086 	bne.w	80014f6 <HAL_TIM_IC_CaptureCallback+0x11e>
		if(is_first_captured_tav1 == false) {
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x130>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	f083 0301 	eor.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01a      	beq.n	800142e <HAL_TIM_IC_CaptureCallback+0x56>
			ic_TAV1_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f008 ffd8 	bl	800a3b0 <HAL_TIM_ReadCapturedValue>
 8001400:	4603      	mov	r3, r0
 8001402:	4a42      	ldr	r2, [pc, #264]	; (800150c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001404:	6013      	str	r3, [r2, #0]
			is_first_captured_tav1 = true;
 8001406:	4b40      	ldr	r3, [pc, #256]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 020a 	bic.w	r2, r2, #10
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0202 	orr.w	r2, r2, #2
 800142a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);

		}
	}
}
 800142c:	e063      	b.n	80014f6 <HAL_TIM_IC_CaptureCallback+0x11e>
		} else if (is_first_captured_tav1 == true) {
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d05f      	beq.n	80014f6 <HAL_TIM_IC_CaptureCallback+0x11e>
			ic_TAV1_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001436:	2100      	movs	r1, #0
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f008 ffb9 	bl	800a3b0 <HAL_TIM_ReadCapturedValue>
 800143e:	4603      	mov	r3, r0
 8001440:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001442:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
			if(ic_TAV1_val1 < ic_TAV1_val2) {
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_TIM_IC_CaptureCallback+0x134>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <HAL_TIM_IC_CaptureCallback+0x90>
				difference_tav1 = ic_TAV1_val2 - ic_TAV1_val1;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x138>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_TIM_IC_CaptureCallback+0x134>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00f      	b.n	8001488 <HAL_TIM_IC_CaptureCallback+0xb0>
			else if (ic_TAV1_val2 < ic_TAV1_val1) {
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x138>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_TIM_IC_CaptureCallback+0x134>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d209      	bcs.n	8001488 <HAL_TIM_IC_CaptureCallback+0xb0>
				difference_tav1 = (0xffff - ic_TAV1_val1) + ic_TAV1_val2;
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_TIM_IC_CaptureCallback+0x134>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001482:	33ff      	adds	r3, #255	; 0xff
 8001484:	4a23      	ldr	r2, [pc, #140]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001486:	6013      	str	r3, [r2, #0]
			distance_tav1 = difference_tav1 * .034/2;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe fffd 	bl	800048c <__aeabi_ui2d>
 8001492:	a31b      	add	r3, pc, #108	; (adr r3, 8001500 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f872 	bl	8000580 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ac:	f7ff f992 	bl	80007d4 <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fafc 	bl	8000ab4 <__aeabi_d2uiz>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x140>)
 80014c2:	801a      	strh	r2, [r3, #0]
			is_first_captured_tav1 = false;
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 020a 	bic.w	r2, r2, #10
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a12      	ldr	r2, [r2, #32]
 80014e4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_TIM_IC_CaptureCallback+0x144>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_TIM_IC_CaptureCallback+0x144>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0202 	bic.w	r2, r2, #2
 80014f4:	60da      	str	r2, [r3, #12]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	b020c49c 	.word	0xb020c49c
 8001504:	3fa16872 	.word	0x3fa16872
 8001508:	20000274 	.word	0x20000274
 800150c:	20000268 	.word	0x20000268
 8001510:	2000026c 	.word	0x2000026c
 8001514:	20000270 	.word	0x20000270
 8001518:	20000276 	.word	0x20000276
 800151c:	20000480 	.word	0x20000480

08001520 <HCSR04_1_Read>:
void HCSR04_1_Read(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TAV1_PORT, TAV1_PIN, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152a:	480b      	ldr	r0, [pc, #44]	; (8001558 <HCSR04_1_Read+0x38>)
 800152c:	f004 fffc 	bl	8006528 <HAL_GPIO_WritePin>
	Delay_Microsec_tav1(11);
 8001530:	200b      	movs	r0, #11
 8001532:	f7ff ff37 	bl	80013a4 <Delay_Microsec_tav1>
	HAL_GPIO_WritePin(TAV1_PORT, TAV1_PIN, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <HCSR04_1_Read+0x38>)
 800153e:	f004 fff3 	bl	8006528 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HCSR04_1_Read+0x3c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <HCSR04_1_Read+0x3c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0202 	orr.w	r2, r2, #2
 8001550:	60da      	str	r2, [r3, #12]
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40020400 	.word	0x40020400
 800155c:	20000480 	.word	0x20000480

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001564:	f003 fdfc 	bl	8005160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001568:	f000 f8d4 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156c:	f000 fc70 	bl	8001e50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001570:	f000 fc24 	bl	8001dbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001574:	f000 f940 	bl	80017f8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001578:	f000 f9a2 	bl	80018c0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800157c:	f000 f9d6 	bl	800192c <MX_SPI3_Init>
  MX_UART4_Init();
 8001580:	f000 fbc8 	bl	8001d14 <MX_UART4_Init>
  MX_TIM8_Init();
 8001584:	f000 faaa 	bl	8001adc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001588:	f000 fbee 	bl	8001d68 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 800158c:	f000 fb52 	bl	8001c34 <MX_TIM12_Init>
  MX_DMA_Init();
 8001590:	f000 fc3e 	bl	8001e10 <MX_DMA_Init>
  MX_TIM2_Init();
 8001594:	f000 fa56 	bl	8001a44 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001598:	f000 f95c 	bl	8001854 <MX_SPI1_Init>
  MX_TIM1_Init();
 800159c:	f000 f9fc 	bl	8001998 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	SERVO_Init(SZERVO);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fc73 	bl	8000e8c <SERVO_Init>
	SERVO_MoveTo(SZERVO, 90);
 80015a6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80016d0 <main+0x170>
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fdfe 	bl	80011ac <SERVO_MoveTo>
	DC_MOTOR_Init(DC_MOTOR_PWM1);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f00a fe9f 	bl	800c2f4 <DC_MOTOR_Init>
	DC_MOTOR_Init(DC_MOTOR_PWM2);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f00a fe9c 	bl	800c2f4 <DC_MOTOR_Init>
	DC_MOTOR_Start(DC_MOTOR_PWM1, 0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f00a ff6e 	bl	800c4a0 <DC_MOTOR_Start>
	DC_MOTOR_Start(DC_MOTOR_PWM2, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2001      	movs	r0, #1
 80015c8:	f00a ff6a 	bl	800c4a0 <DC_MOTOR_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);		// motvez EN
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d2:	4840      	ldr	r0, [pc, #256]	; (80016d4 <main+0x174>)
 80015d4:	f004 ffa8 	bl	8006528 <HAL_GPIO_WritePin>
	motvez_k = motvez_d / 2;   									//455
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <main+0x178>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0fda      	lsrs	r2, r3, #31
 80015de:	4413      	add	r3, r2
 80015e0:	105b      	asrs	r3, r3, #1
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <main+0x17c>)
 80015e6:	601a      	str	r2, [r3, #0]

	Vonalszenzor_minta_kuldes(leszed);
 80015e8:	483d      	ldr	r0, [pc, #244]	; (80016e0 <main+0x180>)
 80015ea:	f001 f95b 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(teszt_minta);		//csak hogy lassuk, hogy bekapcsolt
 80015ee:	483d      	ldr	r0, [pc, #244]	; (80016e4 <main+0x184>)
 80015f0:	f001 f958 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	HAL_Delay(100);
 80015f4:	2064      	movs	r0, #100	; 0x64
 80015f6:	f003 fe25 	bl	8005244 <HAL_Delay>
	Vonalszenzor_minta_kuldes(leszed);
 80015fa:	4839      	ldr	r0, [pc, #228]	; (80016e0 <main+0x180>)
 80015fc:	f001 f952 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	//HAL_UART_Receive(&huart2, &bluetooth_rx, 1, 5000);
	HAL_TIM_Base_Start_IT(&htim2);
 8001600:	4839      	ldr	r0, [pc, #228]	; (80016e8 <main+0x188>)
 8001602:	f007 f8a1 	bl	8008748 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);   //PWM jel start
 8001606:	2104      	movs	r1, #4
 8001608:	4838      	ldr	r0, [pc, #224]	; (80016ec <main+0x18c>)
 800160a:	f007 fa5d 	bl	8008ac8 <HAL_TIM_PWM_Start>

	//Vonalszenzor inicializacio
	Vonalszenzor_Init();
 800160e:	f000 fce9 	bl	8001fe4 <Vonalszenzor_Init>

	Graf_irany_feltolt();
 8001612:	f002 fb2d 	bl	8003c70 <Graf_irany_feltolt>
	//Kapukbol_iranyok();
	HAL_UART_Receive_IT(&huart1, &temp_radio, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	4935      	ldr	r1, [pc, #212]	; (80016f0 <main+0x190>)
 800161a:	4836      	ldr	r0, [pc, #216]	; (80016f4 <main+0x194>)
 800161c:	f009 ffae 	bl	800b57c <HAL_UART_Receive_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001620:	2100      	movs	r1, #0
 8001622:	4835      	ldr	r0, [pc, #212]	; (80016f8 <main+0x198>)
 8001624:	f007 fcc8 	bl	8008fb8 <HAL_TIM_IC_Start_IT>
		}*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HCSR04_1_Read();
 8001628:	f7ff ff7a 	bl	8001520 <HCSR04_1_Read>
		HAL_Delay(100);
 800162c:	2064      	movs	r0, #100	; 0x64
 800162e:	f003 fe09 	bl	8005244 <HAL_Delay>
		/*sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
				 ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
		HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );
		VL53L1_ClearInterruptAndStartMeasurement( Dev );*/

		if (btnEnable == 1) {
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <main+0x19c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d128      	bne.n	800168c <main+0x12c>
			if (motvezEnable == 1) {
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <main+0x1a0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d1f2      	bne.n	8001628 <main+0xc8>
				if(8 < sotetek) {
					motvez_k = motvez_d / 2;
					tolatas = true;
					kormanyzas_agresszivitas = 0.7;
				}*/
				if(letsGo == true){
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <main+0x1a4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00c      	beq.n	8001664 <main+0x104>
					if(tolatas == true) {
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <main+0x1a8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <main+0xfc>
						motvez_k = 570;
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <main+0x17c>)
 8001654:	f240 223a 	movw	r2, #570	; 0x23a
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e003      	b.n	8001664 <main+0x104>
					} else {
						motvez_k = 443;
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <main+0x17c>)
 800165e:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001662:	601a      	str	r2, [r3, #0]
					}
				}
				//if (motvez_d /2 > motvez_k) {							// motvez_d / 2 -nel nagyobb a hatramenet, pl. 900: gyors tolatás
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_k); 		// ha pwm1 nagyobb, hatramenet
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <main+0x17c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4619      	mov	r1, r3
 800166c:	2000      	movs	r0, #0
 800166e:	f00a ff73 	bl	800c558 <DC_MOTOR_Set_Speed>
					DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - motvez_k);
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <main+0x178>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <main+0x17c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2001      	movs	r0, #1
 8001686:	f00a ff67 	bl	800c558 <DC_MOTOR_Set_Speed>
 800168a:	e7cd      	b.n	8001628 <main+0xc8>
				//}
			}
		} else {
			veretesi_cnt = 0;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <main+0x1ac>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
			fekezes_cnt = 0;
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <main+0x1b0>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
			//SERVO_MoveTo(SZERVO, 90);
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM1, motvez_d / 2);	// ez a ketto a megallas
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <main+0x178>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0fda      	lsrs	r2, r3, #31
 800169e:	4413      	add	r3, r2
 80016a0:	105b      	asrs	r3, r3, #1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4619      	mov	r1, r3
 80016a6:	2000      	movs	r0, #0
 80016a8:	f00a ff56 	bl	800c558 <DC_MOTOR_Set_Speed>
			DC_MOTOR_Set_Speed(DC_MOTOR_PWM2, motvez_d - (motvez_d / 2));
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <main+0x178>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0fda      	lsrs	r2, r3, #31
 80016b2:	4413      	add	r3, r2
 80016b4:	105b      	asrs	r3, r3, #1
 80016b6:	425b      	negs	r3, r3
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <main+0x178>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4619      	mov	r1, r3
 80016c6:	2001      	movs	r0, #1
 80016c8:	f00a ff46 	bl	800c558 <DC_MOTOR_Set_Speed>
		HCSR04_1_Read();
 80016cc:	e7ac      	b.n	8001628 <main+0xc8>
 80016ce:	bf00      	nop
 80016d0:	42b40000 	.word	0x42b40000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	20000150 	.word	0x20000150
 80016dc:	20000154 	.word	0x20000154
 80016e0:	20000004 	.word	0x20000004
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	20001668 	.word	0x20001668
 80016ec:	200016f4 	.word	0x200016f4
 80016f0:	2000015e 	.word	0x2000015e
 80016f4:	2000043c 	.word	0x2000043c
 80016f8:	20000480 	.word	0x20000480
 80016fc:	200001e8 	.word	0x200001e8
 8001700:	20000001 	.word	0x20000001
 8001704:	20000260 	.word	0x20000260
 8001708:	2000024c 	.word	0x2000024c
 800170c:	20000258 	.word	0x20000258
 8001710:	2000025c 	.word	0x2000025c

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	; 0x50
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	2234      	movs	r2, #52	; 0x34
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f00a ffc8 	bl	800c6b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <SystemClock_Config+0xdc>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a2b      	ldr	r2, [pc, #172]	; (80017f0 <SystemClock_Config+0xdc>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <SystemClock_Config+0xdc>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	2300      	movs	r3, #0
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <SystemClock_Config+0xe0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <SystemClock_Config+0xe0>)
 800175e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <SystemClock_Config+0xe0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001778:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001784:	2304      	movs	r3, #4
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001788:	23b4      	movs	r3, #180	; 0xb4
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178c:	2302      	movs	r3, #2
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001794:	2302      	movs	r3, #2
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4618      	mov	r0, r3
 800179e:	f005 fcb5 	bl	800710c <HAL_RCC_OscConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017a8:	f003 f86e 	bl	8004888 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017ac:	f005 f8d2 	bl	8006954 <HAL_PWREx_EnableOverDrive>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017b6:	f003 f867 	bl	8004888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	230f      	movs	r3, #15
 80017bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017be:	2302      	movs	r3, #2
 80017c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80017c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	2105      	movs	r1, #5
 80017d8:	4618      	mov	r0, r3
 80017da:	f005 f90b 	bl	80069f4 <HAL_RCC_ClockConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017e4:	f003 f850 	bl	8004888 <Error_Handler>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3750      	adds	r7, #80	; 0x50
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000

080017f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_I2C1_Init+0x50>)
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <MX_I2C1_Init+0x54>)
 8001800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_I2C1_Init+0x50>)
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <MX_I2C1_Init+0x58>)
 8001806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_I2C1_Init+0x50>)
 8001816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_I2C1_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_I2C1_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_I2C1_Init+0x50>)
 8001836:	f004 fec1 	bl	80065bc <HAL_I2C_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001840:	f003 f822 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000330 	.word	0x20000330
 800184c:	40005400 	.word	0x40005400
 8001850:	000186a0 	.word	0x000186a0

08001854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_SPI1_Init+0x64>)
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <MX_SPI1_Init+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_SPI1_Init+0x64>)
 8001860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_SPI1_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_SPI1_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_SPI1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_SPI1_Init+0x64>)
 8001880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_SPI1_Init+0x64>)
 8001888:	2220      	movs	r2, #32
 800188a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_SPI1_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_SPI1_Init+0x64>)
 80018a0:	220a      	movs	r2, #10
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_SPI1_Init+0x64>)
 80018a6:	f005 ff8f 	bl	80077c8 <HAL_SPI_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018b0:	f002 ffea 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20001610 	.word	0x20001610
 80018bc:	40013000 	.word	0x40013000

080018c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_SPI2_Init+0x64>)
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <MX_SPI2_Init+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_SPI2_Init+0x64>)
 80018cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_SPI2_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_SPI2_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_SPI2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_SPI2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_SPI2_Init+0x64>)
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_SPI2_Init+0x64>)
 80018f4:	2218      	movs	r2, #24
 80018f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_SPI2_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_SPI2_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_SPI2_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_SPI2_Init+0x64>)
 800190c:	220a      	movs	r2, #10
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_SPI2_Init+0x64>)
 8001912:	f005 ff59 	bl	80077c8 <HAL_SPI_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800191c:	f002 ffb4 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000290 	.word	0x20000290
 8001928:	40003800 	.word	0x40003800

0800192c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_SPI3_Init+0x64>)
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <MX_SPI3_Init+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_SPI3_Init+0x64>)
 8001938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800193c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_SPI3_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_SPI3_Init+0x64>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_SPI3_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_SPI3_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_SPI3_Init+0x64>)
 8001958:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800195c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_SPI3_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <MX_SPI3_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_SPI3_Init+0x64>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MX_SPI3_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_SPI3_Init+0x64>)
 8001978:	220a      	movs	r2, #10
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_SPI3_Init+0x64>)
 800197e:	f005 ff23 	bl	80077c8 <HAL_SPI_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001988:	f002 ff7e 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000384 	.word	0x20000384
 8001994:	40003c00 	.word	0x40003c00

08001998 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019a8:	463b      	mov	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <MX_TIM1_Init+0xa8>)
 80019b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019bc:	2259      	movs	r2, #89	; 0x59
 80019be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80019e0:	4816      	ldr	r0, [pc, #88]	; (8001a3c <MX_TIM1_Init+0xa4>)
 80019e2:	f007 f9f9 	bl	8008dd8 <HAL_TIM_IC_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80019ec:	f002 ff4c 	bl	8004888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	480f      	ldr	r0, [pc, #60]	; (8001a3c <MX_TIM1_Init+0xa4>)
 8001a00:	f009 fb24 	bl	800b04c <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a0a:	f002 ff3d 	bl	8004888 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a12:	2301      	movs	r3, #1
 8001a14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_TIM1_Init+0xa4>)
 8001a26:	f007 fdb7 	bl	8009598 <HAL_TIM_IC_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001a30:	f002 ff2a 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000480 	.word	0x20000480
 8001a40:	40010000 	.word	0x40010000

08001a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45-1;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a6a:	222c      	movs	r2, #44	; 0x2c
 8001a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a8a:	f006 fd6d 	bl	8008568 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a94:	f002 fef8 	bl	8004888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001aa6:	f008 f903 	bl	8009cb0 <HAL_TIM_ConfigClockSource>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ab0:	f002 feea 	bl	8004888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abc:	463b      	mov	r3, r7
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001ac2:	f009 fac3 	bl	800b04c <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001acc:	f002 fedc 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20001668 	.word	0x20001668

08001adc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b096      	sub	sp, #88	; 0x58
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	615a      	str	r2, [r3, #20]
 8001b0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2220      	movs	r2, #32
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00a fdcf 	bl	800c6b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b1c:	4a44      	ldr	r2, [pc, #272]	; (8001c30 <MX_TIM8_Init+0x154>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8001b20:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b22:	2259      	movs	r2, #89	; 0x59
 8001b24:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b28:	2260      	movs	r2, #96	; 0x60
 8001b2a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b32:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b46:	4839      	ldr	r0, [pc, #228]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b48:	f006 fd0e 	bl	8008568 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b52:	f002 fe99 	bl	8004888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b60:	4619      	mov	r1, r3
 8001b62:	4832      	ldr	r0, [pc, #200]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b64:	f008 f8a4 	bl	8009cb0 <HAL_TIM_ConfigClockSource>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b6e:	f002 fe8b 	bl	8004888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b72:	482e      	ldr	r0, [pc, #184]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b74:	f006 feae 	bl	80088d4 <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001b7e:	f002 fe83 	bl	8004888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4826      	ldr	r0, [pc, #152]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001b92:	f009 fa5b 	bl	800b04c <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b9c:	f002 fe74 	bl	8004888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	; 0x60
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4819      	ldr	r0, [pc, #100]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001bc6:	f007 fe9b 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001bd0:	f002 fe5a 	bl	8004888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	2208      	movs	r2, #8
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4813      	ldr	r0, [pc, #76]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001bde:	f007 fe8f 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001be8:	f002 fe4e 	bl	8004888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001c10:	f009 fafa 	bl	800b208 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c1a:	f002 fe35 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

	//Itt kell megivni a DC_MOTOR_Init() -et
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <MX_TIM8_Init+0x150>)
 8001c20:	f003 f8ae 	bl	8004d80 <HAL_TIM_MspPostInit>

}
 8001c24:	bf00      	nop
 8001c26:	3758      	adds	r7, #88	; 0x58
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200002e8 	.word	0x200002e8
 8001c30:	40010400 	.word	0x40010400

08001c34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c5c:	4a2c      	ldr	r2, [pc, #176]	; (8001d10 <MX_TIM12_Init+0xdc>)
 8001c5e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c62:	2213      	movs	r2, #19
 8001c64:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 44999;
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c6e:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001c72:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001c80:	4822      	ldr	r0, [pc, #136]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c82:	f006 fc71 	bl	8008568 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001c8c:	f002 fdfc 	bl	8004888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481b      	ldr	r0, [pc, #108]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001c9e:	f008 f807 	bl	8009cb0 <HAL_TIM_ConfigClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ca8:	f002 fdee 	bl	8004888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001cac:	4817      	ldr	r0, [pc, #92]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001cae:	f006 fe11 	bl	80088d4 <HAL_TIM_PWM_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001cb8:	f002 fde6 	bl	8004888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbc:	2360      	movs	r3, #96	; 0x60
 8001cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480e      	ldr	r0, [pc, #56]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001cd4:	f007 fe14 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001cde:	f002 fdd3 	bl	8004888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001cea:	f007 fe09 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001cf4:	f002 fdc8 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	HAL_TIM_Base_Start_IT(&htim12);
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001cfa:	f006 fd25 	bl	8008748 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <MX_TIM12_Init+0xd8>)
 8001d00:	f003 f83e 	bl	8004d80 <HAL_TIM_MspPostInit>

}
 8001d04:	bf00      	nop
 8001d06:	3730      	adds	r7, #48	; 0x30
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200016f4 	.word	0x200016f4
 8001d10:	40001800 	.word	0x40001800

08001d14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_UART4_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_UART4_Init+0x4c>)
 8001d4c:	f009 fb3c 	bl	800b3c8 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d56:	f002 fd97 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200015cc 	.word	0x200015cc
 8001d64:	40004c00 	.word	0x40004c00

08001d68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_USART1_UART_Init+0x50>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d8e:	2204      	movs	r2, #4
 8001d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART1_UART_Init+0x4c>)
 8001da0:	f009 fb12 	bl	800b3c8 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001daa:	f002 fd6d 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000043c 	.word	0x2000043c
 8001db8:	40011000 	.word	0x40011000

08001dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <MX_USART2_UART_Init+0x50>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f009 fae8 	bl	800b3c8 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dfe:	f002 fd43 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200016b0 	.word	0x200016b0
 8001e0c:	40004400 	.word	0x40004400

08001e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_DMA_Init+0x3c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <MX_DMA_Init+0x3c>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_DMA_Init+0x3c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2010      	movs	r0, #16
 8001e38:	f003 fb18 	bl	800546c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e3c:	2010      	movs	r0, #16
 8001e3e:	f003 fb41 	bl	80054c4 <HAL_NVIC_EnableIRQ>

}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b52      	ldr	r3, [pc, #328]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a4a      	ldr	r2, [pc, #296]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a43      	ldr	r2, [pc, #268]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <MX_GPIO_Init+0x180>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	213d      	movs	r1, #61	; 0x3d
 8001ef6:	4837      	ldr	r0, [pc, #220]	; (8001fd4 <MX_GPIO_Init+0x184>)
 8001ef8:	f004 fb16 	bl	8006528 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	f641 0102 	movw	r1, #6146	; 0x1802
 8001f02:	4835      	ldr	r0, [pc, #212]	; (8001fd8 <MX_GPIO_Init+0x188>)
 8001f04:	f004 fb10 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f241 4126 	movw	r1, #5158	; 0x1426
 8001f0e:	4833      	ldr	r0, [pc, #204]	; (8001fdc <MX_GPIO_Init+0x18c>)
 8001f10:	f004 fb0a 	bl	8006528 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	482a      	ldr	r0, [pc, #168]	; (8001fd4 <MX_GPIO_Init+0x184>)
 8001f2c:	f003 ffd8 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001f30:	233d      	movs	r3, #61	; 0x3d
 8001f32:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <MX_GPIO_Init+0x184>)
 8001f48:	f003 ffca 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001f4c:	f641 0302 	movw	r3, #6146	; 0x1802
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <MX_GPIO_Init+0x188>)
 8001f66:	f003 ffbb 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <MX_GPIO_Init+0x188>)
 8001f7e:	f003 ffaf 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8001f82:	f241 4326 	movw	r3, #5158	; 0x1426
 8001f86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4810      	ldr	r0, [pc, #64]	; (8001fdc <MX_GPIO_Init+0x18c>)
 8001f9c:	f003 ffa0 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <MX_GPIO_Init+0x190>)
 8001fb4:	f003 ff94 	bl	8005ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8001fb8:	2202      	movs	r2, #2
 8001fba:	2101      	movs	r1, #1
 8001fbc:	2028      	movs	r0, #40	; 0x28
 8001fbe:	f003 fa55 	bl	800546c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fc2:	2028      	movs	r0, #40	; 0x28
 8001fc4:	f003 fa7e 	bl	80054c4 <HAL_NVIC_EnableIRQ>

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020c00 	.word	0x40020c00

08001fe4 <Vonalszenzor_Init>:

/* USER CODE BEGIN 4 */
static void Vonalszenzor_Init(void) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);	// PCB2: Von_OE1  0
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2104      	movs	r1, #4
 8001fec:	4804      	ldr	r0, [pc, #16]	; (8002000 <Vonalszenzor_Init+0x1c>)
 8001fee:	f004 fa9b 	bl	8006528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	// PCB2: Von_OE2  0
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	4803      	ldr	r0, [pc, #12]	; (8002004 <Vonalszenzor_Init+0x20>)
 8001ff8:	f004 fa96 	bl	8006528 <HAL_GPIO_WritePin>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800

08002008 <Vonalszenzor_operal>:

static void Vonalszenzor_operal(uint8_t* teljes_kiolvasott_h, uint8_t* teljes_kiolvasott_e) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002012:	48be      	ldr	r0, [pc, #760]	; (800230c <Vonalszenzor_operal+0x304>)
 8002014:	f000 fc46 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	uint8_t eredmeny_16bit_temp[2] = {0b1110000, 0b00000000};
 8002018:	2370      	movs	r3, #112	; 0x70
 800201a:	81bb      	strh	r3, [r7, #12]
	//hatso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1h);
 800201c:	48bc      	ldr	r0, [pc, #752]	; (8002310 <Vonalszenzor_operal+0x308>)
 800201e:	f000 fc41 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002022:	4bbc      	ldr	r3, [pc, #752]	; (8002314 <Vonalszenzor_operal+0x30c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f107 020c 	add.w	r2, r7, #12
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fc99 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[32] = (uint8_t) eredmeny_16bit_temp[0] - 5;
 8002032:	7b3a      	ldrb	r2, [r7, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3320      	adds	r3, #32
 8002038:	3a05      	subs	r2, #5
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800203e:	4bb6      	ldr	r3, [pc, #728]	; (8002318 <Vonalszenzor_operal+0x310>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f107 020c 	add.w	r2, r7, #12
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fc8b 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[28] = (uint8_t) eredmeny_16bit_temp[0] - 2;
 800204e:	7b3a      	ldrb	r2, [r7, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	331c      	adds	r3, #28
 8002054:	3a02      	subs	r2, #2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800205a:	48ac      	ldr	r0, [pc, #688]	; (800230c <Vonalszenzor_operal+0x304>)
 800205c:	f000 fc22 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2h);
 8002060:	48ae      	ldr	r0, [pc, #696]	; (800231c <Vonalszenzor_operal+0x314>)
 8002062:	f000 fc1f 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002066:	4bab      	ldr	r3, [pc, #684]	; (8002314 <Vonalszenzor_operal+0x30c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	f107 020c 	add.w	r2, r7, #12
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fc77 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3318      	adds	r3, #24
 800207a:	7b3a      	ldrb	r2, [r7, #12]
 800207c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800207e:	4ba6      	ldr	r3, [pc, #664]	; (8002318 <Vonalszenzor_operal+0x310>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f107 020c 	add.w	r2, r7, #12
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fc6b 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[20] = (uint8_t) eredmeny_16bit_temp[0];
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3314      	adds	r3, #20
 8002092:	7b3a      	ldrb	r2, [r7, #12]
 8002094:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002096:	489d      	ldr	r0, [pc, #628]	; (800230c <Vonalszenzor_operal+0x304>)
 8002098:	f000 fc04 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3h);
 800209c:	48a0      	ldr	r0, [pc, #640]	; (8002320 <Vonalszenzor_operal+0x318>)
 800209e:	f000 fc01 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80020a2:	4b9c      	ldr	r3, [pc, #624]	; (8002314 <Vonalszenzor_operal+0x30c>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f107 020c 	add.w	r2, r7, #12
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fc59 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[16] = (uint8_t) eredmeny_16bit_temp[0];
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3310      	adds	r3, #16
 80020b6:	7b3a      	ldrb	r2, [r7, #12]
 80020b8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020ba:	4b97      	ldr	r3, [pc, #604]	; (8002318 <Vonalszenzor_operal+0x310>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f107 020c 	add.w	r2, r7, #12
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fc4d 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[12] = (uint8_t) eredmeny_16bit_temp[0];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	330c      	adds	r3, #12
 80020ce:	7b3a      	ldrb	r2, [r7, #12]
 80020d0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80020d2:	488e      	ldr	r0, [pc, #568]	; (800230c <Vonalszenzor_operal+0x304>)
 80020d4:	f000 fbe6 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4h);
 80020d8:	4892      	ldr	r0, [pc, #584]	; (8002324 <Vonalszenzor_operal+0x31c>)
 80020da:	f000 fbe3 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <Vonalszenzor_operal+0x30c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	f107 020c 	add.w	r2, r7, #12
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fc3b 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[8] = (uint8_t) eredmeny_16bit_temp[0];
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3308      	adds	r3, #8
 80020f2:	7b3a      	ldrb	r2, [r7, #12]
 80020f4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <Vonalszenzor_operal+0x310>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fc2f 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[4] = (uint8_t) eredmeny_16bit_temp[0];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	7b3a      	ldrb	r2, [r7, #12]
 800210c:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800210e:	487f      	ldr	r0, [pc, #508]	; (800230c <Vonalszenzor_operal+0x304>)
 8002110:	f000 fbc8 	bl	80028a4 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1h);
 8002114:	4884      	ldr	r0, [pc, #528]	; (8002328 <Vonalszenzor_operal+0x320>)
 8002116:	f000 fbc5 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 800211a:	4b84      	ldr	r3, [pc, #528]	; (800232c <Vonalszenzor_operal+0x324>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f107 020c 	add.w	r2, r7, #12
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fc1d 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[31] = (uint8_t) eredmeny_16bit_temp[0];
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	331f      	adds	r3, #31
 800212e:	7b3a      	ldrb	r2, [r7, #12]
 8002130:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002132:	4b7f      	ldr	r3, [pc, #508]	; (8002330 <Vonalszenzor_operal+0x328>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f107 020c 	add.w	r2, r7, #12
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fc11 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	331b      	adds	r3, #27
 8002146:	7b3a      	ldrb	r2, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800214a:	4870      	ldr	r0, [pc, #448]	; (800230c <Vonalszenzor_operal+0x304>)
 800214c:	f000 fbaa 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2h);
 8002150:	4878      	ldr	r0, [pc, #480]	; (8002334 <Vonalszenzor_operal+0x32c>)
 8002152:	f000 fba7 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002156:	4b75      	ldr	r3, [pc, #468]	; (800232c <Vonalszenzor_operal+0x324>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fbff 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[23] = (uint8_t) eredmeny_16bit_temp[0];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3317      	adds	r3, #23
 800216a:	7b3a      	ldrb	r2, [r7, #12]
 800216c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <Vonalszenzor_operal+0x328>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fbf3 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[19] = (uint8_t) eredmeny_16bit_temp[0];
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3313      	adds	r3, #19
 8002182:	7b3a      	ldrb	r2, [r7, #12]
 8002184:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002186:	4861      	ldr	r0, [pc, #388]	; (800230c <Vonalszenzor_operal+0x304>)
 8002188:	f000 fb8c 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3h);
 800218c:	486a      	ldr	r0, [pc, #424]	; (8002338 <Vonalszenzor_operal+0x330>)
 800218e:	f000 fb89 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <Vonalszenzor_operal+0x324>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fbe1 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[15] = (uint8_t) eredmeny_16bit_temp[0];
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	330f      	adds	r3, #15
 80021a6:	7b3a      	ldrb	r2, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021aa:	4b61      	ldr	r3, [pc, #388]	; (8002330 <Vonalszenzor_operal+0x328>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f107 020c 	add.w	r2, r7, #12
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fbd5 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[11] = (uint8_t) eredmeny_16bit_temp[0];
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330b      	adds	r3, #11
 80021be:	7b3a      	ldrb	r2, [r7, #12]
 80021c0:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80021c2:	4852      	ldr	r0, [pc, #328]	; (800230c <Vonalszenzor_operal+0x304>)
 80021c4:	f000 fb6e 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4h);
 80021c8:	485c      	ldr	r0, [pc, #368]	; (800233c <Vonalszenzor_operal+0x334>)
 80021ca:	f000 fb6b 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80021ce:	4b57      	ldr	r3, [pc, #348]	; (800232c <Vonalszenzor_operal+0x324>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f107 020c 	add.w	r2, r7, #12
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fbc3 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[7] = (uint8_t) eredmeny_16bit_temp[0];
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3307      	adds	r3, #7
 80021e2:	7b3a      	ldrb	r2, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <Vonalszenzor_operal+0x328>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f107 020c 	add.w	r2, r7, #12
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fbb7 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[3] = (uint8_t) eredmeny_16bit_temp[0];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3303      	adds	r3, #3
 80021fa:	7b3a      	ldrb	r2, [r7, #12]
 80021fc:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80021fe:	4843      	ldr	r0, [pc, #268]	; (800230c <Vonalszenzor_operal+0x304>)
 8002200:	f000 fb50 	bl	80028a4 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1h);
 8002204:	484e      	ldr	r0, [pc, #312]	; (8002340 <Vonalszenzor_operal+0x338>)
 8002206:	f000 fb4d 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800220a:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <Vonalszenzor_operal+0x33c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f107 020c 	add.w	r2, r7, #12
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fba5 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[30] = (uint8_t) eredmeny_16bit_temp[0];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	331e      	adds	r3, #30
 800221e:	7b3a      	ldrb	r2, [r7, #12]
 8002220:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002222:	4b49      	ldr	r3, [pc, #292]	; (8002348 <Vonalszenzor_operal+0x340>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f107 020c 	add.w	r2, r7, #12
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fb99 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[26] = (uint8_t) eredmeny_16bit_temp[0] + 1;
 8002232:	7b3a      	ldrb	r2, [r7, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	331a      	adds	r3, #26
 8002238:	3201      	adds	r2, #1
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800223e:	4833      	ldr	r0, [pc, #204]	; (800230c <Vonalszenzor_operal+0x304>)
 8002240:	f000 fb30 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2h);
 8002244:	4841      	ldr	r0, [pc, #260]	; (800234c <Vonalszenzor_operal+0x344>)
 8002246:	f000 fb2d 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <Vonalszenzor_operal+0x33c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	f107 020c 	add.w	r2, r7, #12
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fb85 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[22] = (uint8_t) eredmeny_16bit_temp[0];
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3316      	adds	r3, #22
 800225e:	7b3a      	ldrb	r2, [r7, #12]
 8002260:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <Vonalszenzor_operal+0x340>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	f107 020c 	add.w	r2, r7, #12
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fb79 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[18] = (uint8_t) eredmeny_16bit_temp[0];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3312      	adds	r3, #18
 8002276:	7b3a      	ldrb	r2, [r7, #12]
 8002278:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800227a:	4824      	ldr	r0, [pc, #144]	; (800230c <Vonalszenzor_operal+0x304>)
 800227c:	f000 fb12 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3h);
 8002280:	4833      	ldr	r0, [pc, #204]	; (8002350 <Vonalszenzor_operal+0x348>)
 8002282:	f000 fb0f 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <Vonalszenzor_operal+0x33c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f107 020c 	add.w	r2, r7, #12
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fb67 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[14] = (uint8_t) eredmeny_16bit_temp[0];
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	330e      	adds	r3, #14
 800229a:	7b3a      	ldrb	r2, [r7, #12]
 800229c:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <Vonalszenzor_operal+0x340>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fb5b 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[10] = (uint8_t) eredmeny_16bit_temp[0];
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	330a      	adds	r3, #10
 80022b2:	7b3a      	ldrb	r2, [r7, #12]
 80022b4:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80022b6:	4815      	ldr	r0, [pc, #84]	; (800230c <Vonalszenzor_operal+0x304>)
 80022b8:	f000 faf4 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4h);
 80022bc:	4825      	ldr	r0, [pc, #148]	; (8002354 <Vonalszenzor_operal+0x34c>)
 80022be:	f000 faf1 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <Vonalszenzor_operal+0x33c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	f107 020c 	add.w	r2, r7, #12
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fb49 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[6] = (uint8_t) eredmeny_16bit_temp[0];
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3306      	adds	r3, #6
 80022d6:	7b3a      	ldrb	r2, [r7, #12]
 80022d8:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <Vonalszenzor_operal+0x340>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f107 020c 	add.w	r2, r7, #12
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fb3d 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[2] = (uint8_t) eredmeny_16bit_temp[0];
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3302      	adds	r3, #2
 80022ee:	7b3a      	ldrb	r2, [r7, #12]
 80022f0:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <Vonalszenzor_operal+0x304>)
 80022f4:	f000 fad6 	bl	80028a4 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1h);
 80022f8:	4817      	ldr	r0, [pc, #92]	; (8002358 <Vonalszenzor_operal+0x350>)
 80022fa:	f000 fad3 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <Vonalszenzor_operal+0x354>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	f107 020c 	add.w	r2, r7, #12
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	e029      	b.n	8002360 <Vonalszenzor_operal+0x358>
 800230c:	20000004 	.word	0x20000004
 8002310:	2000008c 	.word	0x2000008c
 8002314:	200001e9 	.word	0x200001e9
 8002318:	20000115 	.word	0x20000115
 800231c:	20000084 	.word	0x20000084
 8002320:	2000007c 	.word	0x2000007c
 8002324:	20000074 	.word	0x20000074
 8002328:	2000006c 	.word	0x2000006c
 800232c:	20000112 	.word	0x20000112
 8002330:	20000116 	.word	0x20000116
 8002334:	20000064 	.word	0x20000064
 8002338:	2000005c 	.word	0x2000005c
 800233c:	20000054 	.word	0x20000054
 8002340:	2000004c 	.word	0x2000004c
 8002344:	20000113 	.word	0x20000113
 8002348:	20000117 	.word	0x20000117
 800234c:	20000044 	.word	0x20000044
 8002350:	2000003c 	.word	0x2000003c
 8002354:	20000034 	.word	0x20000034
 8002358:	2000002c 	.word	0x2000002c
 800235c:	20000114 	.word	0x20000114
 8002360:	f000 fb00 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[29] = (uint8_t) eredmeny_16bit_temp[0];
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	331d      	adds	r3, #29
 8002368:	7b3a      	ldrb	r2, [r7, #12]
 800236a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800236c:	4bbd      	ldr	r3, [pc, #756]	; (8002664 <Vonalszenzor_operal+0x65c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	f107 020c 	add.w	r2, r7, #12
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f000 faf4 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[25] = (uint8_t) eredmeny_16bit_temp[0];
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3319      	adds	r3, #25
 8002380:	7b3a      	ldrb	r2, [r7, #12]
 8002382:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002384:	48b8      	ldr	r0, [pc, #736]	; (8002668 <Vonalszenzor_operal+0x660>)
 8002386:	f000 fa8d 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2h);
 800238a:	48b8      	ldr	r0, [pc, #736]	; (800266c <Vonalszenzor_operal+0x664>)
 800238c:	f000 fa8a 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002390:	4bb7      	ldr	r3, [pc, #732]	; (8002670 <Vonalszenzor_operal+0x668>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f107 020c 	add.w	r2, r7, #12
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fae2 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[21] = (uint8_t) eredmeny_16bit_temp[0];
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3315      	adds	r3, #21
 80023a4:	7b3a      	ldrb	r2, [r7, #12]
 80023a6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023a8:	4bae      	ldr	r3, [pc, #696]	; (8002664 <Vonalszenzor_operal+0x65c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f107 020c 	add.w	r2, r7, #12
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fad6 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[17] = (uint8_t) eredmeny_16bit_temp[0];
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3311      	adds	r3, #17
 80023bc:	7b3a      	ldrb	r2, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023c0:	48a9      	ldr	r0, [pc, #676]	; (8002668 <Vonalszenzor_operal+0x660>)
 80023c2:	f000 fa6f 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3h);
 80023c6:	48ab      	ldr	r0, [pc, #684]	; (8002674 <Vonalszenzor_operal+0x66c>)
 80023c8:	f000 fa6c 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80023cc:	4ba8      	ldr	r3, [pc, #672]	; (8002670 <Vonalszenzor_operal+0x668>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f107 020c 	add.w	r2, r7, #12
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fac4 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[13] = (uint8_t) eredmeny_16bit_temp[0];
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	330d      	adds	r3, #13
 80023e0:	7b3a      	ldrb	r2, [r7, #12]
 80023e2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80023e4:	4b9f      	ldr	r3, [pc, #636]	; (8002664 <Vonalszenzor_operal+0x65c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	f107 020c 	add.w	r2, r7, #12
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fab8 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[9] = (uint8_t) eredmeny_16bit_temp[0];
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3309      	adds	r3, #9
 80023f8:	7b3a      	ldrb	r2, [r7, #12]
 80023fa:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80023fc:	489a      	ldr	r0, [pc, #616]	; (8002668 <Vonalszenzor_operal+0x660>)
 80023fe:	f000 fa51 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4h);
 8002402:	489d      	ldr	r0, [pc, #628]	; (8002678 <Vonalszenzor_operal+0x670>)
 8002404:	f000 fa4e 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002408:	4b99      	ldr	r3, [pc, #612]	; (8002670 <Vonalszenzor_operal+0x668>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f107 020c 	add.w	r2, r7, #12
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 faa6 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3305      	adds	r3, #5
 800241c:	7b3a      	ldrb	r2, [r7, #12]
 800241e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002420:	4b90      	ldr	r3, [pc, #576]	; (8002664 <Vonalszenzor_operal+0x65c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	f107 020c 	add.w	r2, r7, #12
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fa9a 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_h[1] = (uint8_t) eredmeny_16bit_temp[0];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	7b3a      	ldrb	r2, [r7, #12]
 8002436:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002438:	488b      	ldr	r0, [pc, #556]	; (8002668 <Vonalszenzor_operal+0x660>)
 800243a:	f000 fa33 	bl	80028a4 <Vonalszenzor_minta_kuldes>

	//elso vonalszenzor
	Vonalszenzor_minta_kuldes(minta1_adc1e);
 800243e:	488f      	ldr	r0, [pc, #572]	; (800267c <Vonalszenzor_operal+0x674>)
 8002440:	f000 fa30 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002444:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <Vonalszenzor_operal+0x678>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f107 020c 	add.w	r2, r7, #12
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fa88 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[1] = (uint8_t) eredmeny_16bit_temp[0] - 4;
 8002454:	7b3a      	ldrb	r2, [r7, #12]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	3a04      	subs	r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002460:	4b88      	ldr	r3, [pc, #544]	; (8002684 <Vonalszenzor_operal+0x67c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f107 020c 	add.w	r2, r7, #12
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fa7a 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[5] = (uint8_t) eredmeny_16bit_temp[0];
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	3305      	adds	r3, #5
 8002474:	7b3a      	ldrb	r2, [r7, #12]
 8002476:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002478:	487b      	ldr	r0, [pc, #492]	; (8002668 <Vonalszenzor_operal+0x660>)
 800247a:	f000 fa13 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc2e);
 800247e:	4882      	ldr	r0, [pc, #520]	; (8002688 <Vonalszenzor_operal+0x680>)
 8002480:	f000 fa10 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 8002484:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <Vonalszenzor_operal+0x678>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	f107 020c 	add.w	r2, r7, #12
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fa68 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[9] = (uint8_t) eredmeny_16bit_temp[0];
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3309      	adds	r3, #9
 8002498:	7b3a      	ldrb	r2, [r7, #12]
 800249a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 800249c:	4b79      	ldr	r3, [pc, #484]	; (8002684 <Vonalszenzor_operal+0x67c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f107 020c 	add.w	r2, r7, #12
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fa5c 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[13] = (uint8_t) eredmeny_16bit_temp[0];
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	330d      	adds	r3, #13
 80024b0:	7b3a      	ldrb	r2, [r7, #12]
 80024b2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024b4:	486c      	ldr	r0, [pc, #432]	; (8002668 <Vonalszenzor_operal+0x660>)
 80024b6:	f000 f9f5 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc3e);
 80024ba:	4874      	ldr	r0, [pc, #464]	; (800268c <Vonalszenzor_operal+0x684>)
 80024bc:	f000 f9f2 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <Vonalszenzor_operal+0x678>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	f107 020c 	add.w	r2, r7, #12
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fa4a 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[17] = (uint8_t) eredmeny_16bit_temp[0];
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	3311      	adds	r3, #17
 80024d4:	7b3a      	ldrb	r2, [r7, #12]
 80024d6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <Vonalszenzor_operal+0x67c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f107 020c 	add.w	r2, r7, #12
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fa3e 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[21] = (uint8_t) eredmeny_16bit_temp[0];
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3315      	adds	r3, #21
 80024ec:	7b3a      	ldrb	r2, [r7, #12]
 80024ee:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80024f0:	485d      	ldr	r0, [pc, #372]	; (8002668 <Vonalszenzor_operal+0x660>)
 80024f2:	f000 f9d7 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta1_adc4e);
 80024f6:	4866      	ldr	r0, [pc, #408]	; (8002690 <Vonalszenzor_operal+0x688>)
 80024f8:	f000 f9d4 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel0, eredmeny_16bit_temp);
 80024fc:	4b60      	ldr	r3, [pc, #384]	; (8002680 <Vonalszenzor_operal+0x678>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f107 020c 	add.w	r2, r7, #12
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fa2c 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[25] = (uint8_t) eredmeny_16bit_temp[0];
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	3319      	adds	r3, #25
 8002510:	7b3a      	ldrb	r2, [r7, #12]
 8002512:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel4, eredmeny_16bit_temp);
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <Vonalszenzor_operal+0x67c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f107 020c 	add.w	r2, r7, #12
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fa20 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[29] = (uint8_t) eredmeny_16bit_temp[0];
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	331d      	adds	r3, #29
 8002528:	7b3a      	ldrb	r2, [r7, #12]
 800252a:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 800252c:	484e      	ldr	r0, [pc, #312]	; (8002668 <Vonalszenzor_operal+0x660>)
 800252e:	f000 f9b9 	bl	80028a4 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta2_adc1e);
 8002532:	4858      	ldr	r0, [pc, #352]	; (8002694 <Vonalszenzor_operal+0x68c>)
 8002534:	f000 f9b6 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002538:	4b57      	ldr	r3, [pc, #348]	; (8002698 <Vonalszenzor_operal+0x690>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f107 020c 	add.w	r2, r7, #12
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fa0e 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[2] = (uint8_t) eredmeny_16bit_temp[0];
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	3302      	adds	r3, #2
 800254c:	7b3a      	ldrb	r2, [r7, #12]
 800254e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002550:	4b52      	ldr	r3, [pc, #328]	; (800269c <Vonalszenzor_operal+0x694>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f107 020c 	add.w	r2, r7, #12
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fa02 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[6] = (uint8_t) eredmeny_16bit_temp[0] +2;
 8002560:	7b3a      	ldrb	r2, [r7, #12]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	3306      	adds	r3, #6
 8002566:	3202      	adds	r2, #2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 800256c:	483e      	ldr	r0, [pc, #248]	; (8002668 <Vonalszenzor_operal+0x660>)
 800256e:	f000 f999 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc2e);
 8002572:	484b      	ldr	r0, [pc, #300]	; (80026a0 <Vonalszenzor_operal+0x698>)
 8002574:	f000 f996 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <Vonalszenzor_operal+0x690>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f9ee 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[10] = (uint8_t) eredmeny_16bit_temp[0];
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	330a      	adds	r3, #10
 800258c:	7b3a      	ldrb	r2, [r7, #12]
 800258e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 8002590:	4b42      	ldr	r3, [pc, #264]	; (800269c <Vonalszenzor_operal+0x694>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f9e2 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[14] = (uint8_t) eredmeny_16bit_temp[0] +1;
 80025a0:	7b3a      	ldrb	r2, [r7, #12]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	330e      	adds	r3, #14
 80025a6:	3201      	adds	r2, #1
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025ac:	482e      	ldr	r0, [pc, #184]	; (8002668 <Vonalszenzor_operal+0x660>)
 80025ae:	f000 f979 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc3e);
 80025b2:	483c      	ldr	r0, [pc, #240]	; (80026a4 <Vonalszenzor_operal+0x69c>)
 80025b4:	f000 f976 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <Vonalszenzor_operal+0x690>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f107 020c 	add.w	r2, r7, #12
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f9ce 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[18] = (uint8_t) eredmeny_16bit_temp[0];
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	3312      	adds	r3, #18
 80025cc:	7b3a      	ldrb	r2, [r7, #12]
 80025ce:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <Vonalszenzor_operal+0x694>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f107 020c 	add.w	r2, r7, #12
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f9c2 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[22] = (uint8_t) eredmeny_16bit_temp[0];
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	3316      	adds	r3, #22
 80025e4:	7b3a      	ldrb	r2, [r7, #12]
 80025e6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80025e8:	481f      	ldr	r0, [pc, #124]	; (8002668 <Vonalszenzor_operal+0x660>)
 80025ea:	f000 f95b 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta2_adc4e);
 80025ee:	482e      	ldr	r0, [pc, #184]	; (80026a8 <Vonalszenzor_operal+0x6a0>)
 80025f0:	f000 f958 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel1, eredmeny_16bit_temp);
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <Vonalszenzor_operal+0x690>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	f107 020c 	add.w	r2, r7, #12
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f9b0 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[26] = (uint8_t) eredmeny_16bit_temp[0];
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	331a      	adds	r3, #26
 8002608:	7b3a      	ldrb	r2, [r7, #12]
 800260a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel5, eredmeny_16bit_temp);
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <Vonalszenzor_operal+0x694>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f107 020c 	add.w	r2, r7, #12
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f9a4 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[30] = (uint8_t) eredmeny_16bit_temp[0];
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	331e      	adds	r3, #30
 8002620:	7b3a      	ldrb	r2, [r7, #12]
 8002622:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002624:	4810      	ldr	r0, [pc, #64]	; (8002668 <Vonalszenzor_operal+0x660>)
 8002626:	f000 f93d 	bl	80028a4 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta3_adc1e);
 800262a:	4820      	ldr	r0, [pc, #128]	; (80026ac <Vonalszenzor_operal+0x6a4>)
 800262c:	f000 f93a 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <Vonalszenzor_operal+0x6a8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f107 020c 	add.w	r2, r7, #12
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f992 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[3] = (uint8_t) eredmeny_16bit_temp[0];
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	3303      	adds	r3, #3
 8002644:	7b3a      	ldrb	r2, [r7, #12]
 8002646:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <Vonalszenzor_operal+0x6ac>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f107 020c 	add.w	r2, r7, #12
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f986 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[7] = (uint8_t) eredmeny_16bit_temp[0];
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	3307      	adds	r3, #7
 800265c:	7b3a      	ldrb	r2, [r7, #12]
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e02a      	b.n	80026b8 <Vonalszenzor_operal+0x6b0>
 8002662:	bf00      	nop
 8002664:	20000118 	.word	0x20000118
 8002668:	20000004 	.word	0x20000004
 800266c:	20000024 	.word	0x20000024
 8002670:	20000114 	.word	0x20000114
 8002674:	2000001c 	.word	0x2000001c
 8002678:	20000014 	.word	0x20000014
 800267c:	2000010c 	.word	0x2000010c
 8002680:	200001e9 	.word	0x200001e9
 8002684:	20000115 	.word	0x20000115
 8002688:	20000104 	.word	0x20000104
 800268c:	200000fc 	.word	0x200000fc
 8002690:	200000f4 	.word	0x200000f4
 8002694:	200000ec 	.word	0x200000ec
 8002698:	20000112 	.word	0x20000112
 800269c:	20000116 	.word	0x20000116
 80026a0:	200000e4 	.word	0x200000e4
 80026a4:	200000dc 	.word	0x200000dc
 80026a8:	200000d4 	.word	0x200000d4
 80026ac:	200000cc 	.word	0x200000cc
 80026b0:	20000113 	.word	0x20000113
 80026b4:	20000117 	.word	0x20000117
	Vonalszenzor_minta_kuldes(leszed);
 80026b8:	486e      	ldr	r0, [pc, #440]	; (8002874 <Vonalszenzor_operal+0x86c>)
 80026ba:	f000 f8f3 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc2e);
 80026be:	486e      	ldr	r0, [pc, #440]	; (8002878 <Vonalszenzor_operal+0x870>)
 80026c0:	f000 f8f0 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 80026c4:	4b6d      	ldr	r3, [pc, #436]	; (800287c <Vonalszenzor_operal+0x874>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f948 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[11] = (uint8_t) eredmeny_16bit_temp[0];
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	330b      	adds	r3, #11
 80026d8:	7b3a      	ldrb	r2, [r7, #12]
 80026da:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <Vonalszenzor_operal+0x878>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f107 020c 	add.w	r2, r7, #12
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f93c 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[15] = (uint8_t) eredmeny_16bit_temp[0] +2;
 80026ec:	7b3a      	ldrb	r2, [r7, #12]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	330f      	adds	r3, #15
 80026f2:	3202      	adds	r2, #2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80026f8:	485e      	ldr	r0, [pc, #376]	; (8002874 <Vonalszenzor_operal+0x86c>)
 80026fa:	f000 f8d3 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc3e);
 80026fe:	4861      	ldr	r0, [pc, #388]	; (8002884 <Vonalszenzor_operal+0x87c>)
 8002700:	f000 f8d0 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002704:	4b5d      	ldr	r3, [pc, #372]	; (800287c <Vonalszenzor_operal+0x874>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f107 020c 	add.w	r2, r7, #12
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f928 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[19] = (uint8_t) eredmeny_16bit_temp[0];
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3313      	adds	r3, #19
 8002718:	7b3a      	ldrb	r2, [r7, #12]
 800271a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 800271c:	4b58      	ldr	r3, [pc, #352]	; (8002880 <Vonalszenzor_operal+0x878>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f107 020c 	add.w	r2, r7, #12
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f91c 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[23] = (uint8_t) eredmeny_16bit_temp[0];
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3317      	adds	r3, #23
 8002730:	7b3a      	ldrb	r2, [r7, #12]
 8002732:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002734:	484f      	ldr	r0, [pc, #316]	; (8002874 <Vonalszenzor_operal+0x86c>)
 8002736:	f000 f8b5 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta3_adc4e);
 800273a:	4853      	ldr	r0, [pc, #332]	; (8002888 <Vonalszenzor_operal+0x880>)
 800273c:	f000 f8b2 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel2, eredmeny_16bit_temp);
 8002740:	4b4e      	ldr	r3, [pc, #312]	; (800287c <Vonalszenzor_operal+0x874>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f107 020c 	add.w	r2, r7, #12
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f90a 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[27] = (uint8_t) eredmeny_16bit_temp[0];
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	331b      	adds	r3, #27
 8002754:	7b3a      	ldrb	r2, [r7, #12]
 8002756:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel6, eredmeny_16bit_temp);
 8002758:	4b49      	ldr	r3, [pc, #292]	; (8002880 <Vonalszenzor_operal+0x878>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f107 020c 	add.w	r2, r7, #12
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f8fe 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[31] = (uint8_t) eredmeny_16bit_temp[0];
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	331f      	adds	r3, #31
 800276c:	7b3a      	ldrb	r2, [r7, #12]
 800276e:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002770:	4840      	ldr	r0, [pc, #256]	; (8002874 <Vonalszenzor_operal+0x86c>)
 8002772:	f000 f897 	bl	80028a4 <Vonalszenzor_minta_kuldes>

	Vonalszenzor_minta_kuldes(minta4_adc1e);
 8002776:	4845      	ldr	r0, [pc, #276]	; (800288c <Vonalszenzor_operal+0x884>)
 8002778:	f000 f894 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 800277c:	4b44      	ldr	r3, [pc, #272]	; (8002890 <Vonalszenzor_operal+0x888>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f107 020c 	add.w	r2, r7, #12
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f8ec 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[4] = (uint8_t) eredmeny_16bit_temp[0];
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3304      	adds	r3, #4
 8002790:	7b3a      	ldrb	r2, [r7, #12]
 8002792:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <Vonalszenzor_operal+0x88c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f107 020c 	add.w	r2, r7, #12
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f8e0 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[8] = (uint8_t) eredmeny_16bit_temp[0] +2;
 80027a4:	7b3a      	ldrb	r2, [r7, #12]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	3308      	adds	r3, #8
 80027aa:	3202      	adds	r2, #2
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027b0:	4830      	ldr	r0, [pc, #192]	; (8002874 <Vonalszenzor_operal+0x86c>)
 80027b2:	f000 f877 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc2e);
 80027b6:	4838      	ldr	r0, [pc, #224]	; (8002898 <Vonalszenzor_operal+0x890>)
 80027b8:	f000 f874 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027bc:	4b34      	ldr	r3, [pc, #208]	; (8002890 <Vonalszenzor_operal+0x888>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	f107 020c 	add.w	r2, r7, #12
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f8cc 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[12] = (uint8_t) eredmeny_16bit_temp[0];
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	7b3a      	ldrb	r2, [r7, #12]
 80027d2:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <Vonalszenzor_operal+0x88c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f107 020c 	add.w	r2, r7, #12
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f8c0 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[16] = (uint8_t) eredmeny_16bit_temp[0];
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3310      	adds	r3, #16
 80027e8:	7b3a      	ldrb	r2, [r7, #12]
 80027ea:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 80027ec:	4821      	ldr	r0, [pc, #132]	; (8002874 <Vonalszenzor_operal+0x86c>)
 80027ee:	f000 f859 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc3e);
 80027f2:	482a      	ldr	r0, [pc, #168]	; (800289c <Vonalszenzor_operal+0x894>)
 80027f4:	f000 f856 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <Vonalszenzor_operal+0x888>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f107 020c 	add.w	r2, r7, #12
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f8ae 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[20] = (uint8_t) eredmeny_16bit_temp[0];
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	7b3a      	ldrb	r2, [r7, #12]
 800280e:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <Vonalszenzor_operal+0x88c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	f107 020c 	add.w	r2, r7, #12
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f8a2 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[24] = (uint8_t) eredmeny_16bit_temp[0];
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	3318      	adds	r3, #24
 8002824:	7b3a      	ldrb	r2, [r7, #12]
 8002826:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_minta_kuldes(leszed);
 8002828:	4812      	ldr	r0, [pc, #72]	; (8002874 <Vonalszenzor_operal+0x86c>)
 800282a:	f000 f83b 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_minta_kuldes(minta4_adc4e);
 800282e:	481c      	ldr	r0, [pc, #112]	; (80028a0 <Vonalszenzor_operal+0x898>)
 8002830:	f000 f838 	bl	80028a4 <Vonalszenzor_minta_kuldes>
	Vonalszenzor_meres_kiolvasas(adc_chanel3, eredmeny_16bit_temp);
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <Vonalszenzor_operal+0x888>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f107 020c 	add.w	r2, r7, #12
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f890 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[28] = (uint8_t) eredmeny_16bit_temp[0];
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	331c      	adds	r3, #28
 8002848:	7b3a      	ldrb	r2, [r7, #12]
 800284a:	701a      	strb	r2, [r3, #0]
	Vonalszenzor_meres_kiolvasas(adc_chanel7, eredmeny_16bit_temp);
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <Vonalszenzor_operal+0x88c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	f107 020c 	add.w	r2, r7, #12
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f884 	bl	8002964 <Vonalszenzor_meres_kiolvasas>
	teljes_kiolvasott_e[32] = (uint8_t) eredmeny_16bit_temp[0];
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3320      	adds	r3, #32
 8002860:	7b3a      	ldrb	r2, [r7, #12]
 8002862:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(200);
	Vonalszenzor_minta_kuldes(leszed);
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <Vonalszenzor_operal+0x86c>)
 8002866:	f000 f81d 	bl	80028a4 <Vonalszenzor_minta_kuldes>
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000004 	.word	0x20000004
 8002878:	200000c4 	.word	0x200000c4
 800287c:	20000113 	.word	0x20000113
 8002880:	20000117 	.word	0x20000117
 8002884:	200000bc 	.word	0x200000bc
 8002888:	200000b4 	.word	0x200000b4
 800288c:	200000ac 	.word	0x200000ac
 8002890:	20000114 	.word	0x20000114
 8002894:	20000118 	.word	0x20000118
 8002898:	200000a4 	.word	0x200000a4
 800289c:	2000009c 	.word	0x2000009c
 80028a0:	20000094 	.word	0x20000094

080028a4 <Vonalszenzor_minta_kuldes>:

void Vonalszenzor_minta_kuldes(uint8_t* minta) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	// PC4: Von_latch1  0
 80028ac:	2200      	movs	r2, #0
 80028ae:	2110      	movs	r1, #16
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <Vonalszenzor_minta_kuldes+0x44>)
 80028b2:	f003 fe39 	bl	8006528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// PB1: Von_latch2  0
 80028b6:	2200      	movs	r2, #0
 80028b8:	2102      	movs	r1, #2
 80028ba:	480c      	ldr	r0, [pc, #48]	; (80028ec <Vonalszenzor_minta_kuldes+0x48>)
 80028bc:	f003 fe34 	bl	8006528 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, minta, 6, 100);				// minta kikuldes
 80028c0:	2364      	movs	r3, #100	; 0x64
 80028c2:	2206      	movs	r2, #6
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	480a      	ldr	r0, [pc, #40]	; (80028f0 <Vonalszenzor_minta_kuldes+0x4c>)
 80028c8:	f005 f912 	bl	8007af0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		// PC4: Von_latch1  1
 80028cc:	2201      	movs	r2, #1
 80028ce:	2110      	movs	r1, #16
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <Vonalszenzor_minta_kuldes+0x44>)
 80028d2:	f003 fe29 	bl	8006528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// PB1: Von_latch2  1
 80028d6:	2201      	movs	r2, #1
 80028d8:	2102      	movs	r1, #2
 80028da:	4804      	ldr	r0, [pc, #16]	; (80028ec <Vonalszenzor_minta_kuldes+0x48>)
 80028dc:	f003 fe24 	bl	8006528 <HAL_GPIO_WritePin>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020400 	.word	0x40020400
 80028f0:	20000290 	.word	0x20000290

080028f4 <Vonalas_tombok_torlese>:

void Vonalas_tombok_torlese(void) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	e00c      	b.n	800291a <Vonalas_tombok_torlese+0x26>
		vonalak_h[i] = '-';
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <Vonalas_tombok_torlese+0x60>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	222d      	movs	r2, #45	; 0x2d
 8002908:	701a      	strb	r2, [r3, #0]
		vonalak_e[i] = '-';
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <Vonalas_tombok_torlese+0x64>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	222d      	movs	r2, #45	; 0x2d
 8002912:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 5; i++) {		/* 5: vonalak_elso[] es _hatso merete */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3301      	adds	r3, #1
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b04      	cmp	r3, #4
 800291e:	ddef      	ble.n	8002900 <Vonalas_tombok_torlese+0xc>
	}
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 8002920:	2301      	movs	r3, #1
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	e00c      	b.n	8002940 <Vonalas_tombok_torlese+0x4c>
		vonal_eredmeny_h[i] = 0;
 8002926:	4a0d      	ldr	r2, [pc, #52]	; (800295c <Vonalas_tombok_torlese+0x68>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
		vonal_eredmeny_e[i] = 0;
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <Vonalas_tombok_torlese+0x6c>)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
	for(int i=1; i < 33; i++) {		/* 1-32: vonal_eredmeny_elso[] es _hatso merete; 0. elem az fix 0 erteku */
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b20      	cmp	r3, #32
 8002944:	ddef      	ble.n	8002926 <Vonalas_tombok_torlese+0x32>
	}
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	20000130 	.word	0x20000130
 8002958:	20000138 	.word	0x20000138
 800295c:	200001ec 	.word	0x200001ec
 8002960:	20000210 	.word	0x20000210

08002964 <Vonalszenzor_meres_kiolvasas>:

void Vonalszenzor_meres_kiolvasas(uint8_t chanel, uint8_t* eredmeny) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1[2]= {chanel,0};
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	733b      	strb	r3, [r7, #12]
 8002974:	2300      	movs	r3, #0
 8002976:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, temp1, 2, 100);
 8002978:	f107 010c 	add.w	r1, r7, #12
 800297c:	2364      	movs	r3, #100	; 0x64
 800297e:	2202      	movs	r2, #2
 8002980:	4806      	ldr	r0, [pc, #24]	; (800299c <Vonalszenzor_meres_kiolvasas+0x38>)
 8002982:	f005 f8b5 	bl	8007af0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, eredmeny, 2, 100);
 8002986:	2364      	movs	r3, #100	; 0x64
 8002988:	2202      	movs	r2, #2
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	4803      	ldr	r0, [pc, #12]	; (800299c <Vonalszenzor_meres_kiolvasas+0x38>)
 800298e:	f005 f9fb 	bl	8007d88 <HAL_SPI_Receive>
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20001610 	.word	0x20001610

080029a0 <Vonalas_tombok_feltoltese>:

void Vonalas_tombok_feltoltese(void) {
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
	for(int poz=1; poz < 33-1; poz++) {
 80029a6:	2301      	movs	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e10c      	b.n	8002bc6 <Vonalas_tombok_feltoltese+0x226>
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele
		if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz]) {
 80029ac:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <Vonalas_tombok_feltoltese+0x238>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	4413      	add	r3, r2
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd79 	bl	80004ac <__aeabi_i2d>
 80029ba:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <Vonalas_tombok_feltoltese+0x23c>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fe f86e 	bl	8000aa0 <__aeabi_dcmpgt>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d075      	beq.n	8002ab6 <Vonalas_tombok_feltoltese+0x116>
			if(VONAL_THRESHOLD_E < vonal_eredmeny_e[poz+1]) {
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	4a82      	ldr	r2, [pc, #520]	; (8002bd8 <Vonalas_tombok_feltoltese+0x238>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd6a 	bl	80004ac <__aeabi_i2d>
 80029d8:	4b80      	ldr	r3, [pc, #512]	; (8002bdc <Vonalas_tombok_feltoltese+0x23c>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fe f85f 	bl	8000aa0 <__aeabi_dcmpgt>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d022      	beq.n	8002a2e <Vonalas_tombok_feltoltese+0x8e>
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a7a      	ldr	r2, [pc, #488]	; (8002bd8 <Vonalas_tombok_feltoltese+0x238>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fd5b 	bl	80004ac <__aeabi_i2d>
 80029f6:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <Vonalas_tombok_feltoltese+0x23c>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fe f83c 	bl	8000a78 <__aeabi_dcmple>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d057      	beq.n	8002ab6 <Vonalas_tombok_feltoltese+0x116>
					int i = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 8002a0a:	e002      	b.n	8002a12 <Vonalas_tombok_feltoltese+0x72>
						i++;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	613b      	str	r3, [r7, #16]
					while(vonalak_e[i] != '-') {
 8002a12:	4a73      	ldr	r2, [pc, #460]	; (8002be0 <Vonalas_tombok_feltoltese+0x240>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b2d      	cmp	r3, #45	; 0x2d
 8002a1c:	d1f6      	bne.n	8002a0c <Vonalas_tombok_feltoltese+0x6c>
					}
					vonalak_e[i] = poz;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	b2d9      	uxtb	r1, r3
 8002a22:	4a6f      	ldr	r2, [pc, #444]	; (8002be0 <Vonalas_tombok_feltoltese+0x240>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	460a      	mov	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e043      	b.n	8002ab6 <Vonalas_tombok_feltoltese+0x116>
				}
			} else {
				if(vonal_eredmeny_e[poz-1] <= VONAL_THRESHOLD_E) {
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <Vonalas_tombok_feltoltese+0x238>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fd38 	bl	80004ac <__aeabi_i2d>
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <Vonalas_tombok_feltoltese+0x23c>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fe f819 	bl	8000a78 <__aeabi_dcmple>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d034      	beq.n	8002ab6 <Vonalas_tombok_feltoltese+0x116>
					if(VONAL_THRESHOLD_E + 1 < vonal_eredmeny_e[poz-1] + vonal_eredmeny_e[poz+1]) {
 8002a4c:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <Vonalas_tombok_feltoltese+0x23c>)
 8002a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <Vonalas_tombok_feltoltese+0x244>)
 8002a58:	f7fd fbdc 	bl	8000214 <__adddf3>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	461d      	mov	r5, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	4a5b      	ldr	r2, [pc, #364]	; (8002bd8 <Vonalas_tombok_feltoltese+0x238>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a59      	ldr	r2, [pc, #356]	; (8002bd8 <Vonalas_tombok_feltoltese+0x238>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	440b      	add	r3, r1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd17 	bl	80004ac <__aeabi_i2d>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4620      	mov	r0, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	f7fd ffed 	bl	8000a64 <__aeabi_dcmplt>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <Vonalas_tombok_feltoltese+0x116>
						int j = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002a94:	e002      	b.n	8002a9c <Vonalas_tombok_feltoltese+0xfc>
							j++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
						while(vonalak_e[j] != '-') {
 8002a9c:	4a50      	ldr	r2, [pc, #320]	; (8002be0 <Vonalas_tombok_feltoltese+0x240>)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b2d      	cmp	r3, #45	; 0x2d
 8002aa6:	d1f6      	bne.n	8002a96 <Vonalas_tombok_feltoltese+0xf6>
						}
						vonalak_e[j] = poz;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	b2d9      	uxtb	r1, r3
 8002aac:	4a4c      	ldr	r2, [pc, #304]	; (8002be0 <Vonalas_tombok_feltoltese+0x240>)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz]) {
 8002ab6:	4a4c      	ldr	r2, [pc, #304]	; (8002be8 <Vonalas_tombok_feltoltese+0x248>)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fcf4 	bl	80004ac <__aeabi_i2d>
 8002ac4:	4b49      	ldr	r3, [pc, #292]	; (8002bec <Vonalas_tombok_feltoltese+0x24c>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd ffe9 	bl	8000aa0 <__aeabi_dcmpgt>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d075      	beq.n	8002bc0 <Vonalas_tombok_feltoltese+0x220>
			if(VONAL_THRESHOLD_H < vonal_eredmeny_h[poz+1]) {
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	4a43      	ldr	r2, [pc, #268]	; (8002be8 <Vonalas_tombok_feltoltese+0x248>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fce5 	bl	80004ac <__aeabi_i2d>
 8002ae2:	4b42      	ldr	r3, [pc, #264]	; (8002bec <Vonalas_tombok_feltoltese+0x24c>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd ffda 	bl	8000aa0 <__aeabi_dcmpgt>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d022      	beq.n	8002b38 <Vonalas_tombok_feltoltese+0x198>
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <Vonalas_tombok_feltoltese+0x248>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fcd6 	bl	80004ac <__aeabi_i2d>
 8002b00:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <Vonalas_tombok_feltoltese+0x24c>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd ffb7 	bl	8000a78 <__aeabi_dcmple>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d057      	beq.n	8002bc0 <Vonalas_tombok_feltoltese+0x220>
					int k = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002b14:	e002      	b.n	8002b1c <Vonalas_tombok_feltoltese+0x17c>
						k++;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
					while(vonalak_h[k] != '-') {
 8002b1c:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <Vonalas_tombok_feltoltese+0x250>)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b2d      	cmp	r3, #45	; 0x2d
 8002b26:	d1f6      	bne.n	8002b16 <Vonalas_tombok_feltoltese+0x176>
					}
					vonalak_h[k] = poz;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	b2d9      	uxtb	r1, r3
 8002b2c:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <Vonalas_tombok_feltoltese+0x250>)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4413      	add	r3, r2
 8002b32:	460a      	mov	r2, r1
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e043      	b.n	8002bc0 <Vonalas_tombok_feltoltese+0x220>
				}
			} else {
				if(vonal_eredmeny_h[poz-1] <= VONAL_THRESHOLD_H) {
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <Vonalas_tombok_feltoltese+0x248>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fcb3 	bl	80004ac <__aeabi_i2d>
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <Vonalas_tombok_feltoltese+0x24c>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd ff94 	bl	8000a78 <__aeabi_dcmple>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d034      	beq.n	8002bc0 <Vonalas_tombok_feltoltese+0x220>
					if(VONAL_THRESHOLD_H + 1 < vonal_eredmeny_h[poz-1] + vonal_eredmeny_h[poz+1]) {
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <Vonalas_tombok_feltoltese+0x24c>)
 8002b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <Vonalas_tombok_feltoltese+0x244>)
 8002b62:	f7fd fb57 	bl	8000214 <__adddf3>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4614      	mov	r4, r2
 8002b6c:	461d      	mov	r5, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <Vonalas_tombok_feltoltese+0x248>)
 8002b74:	5cd3      	ldrb	r3, [r2, r3]
 8002b76:	4619      	mov	r1, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <Vonalas_tombok_feltoltese+0x248>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	440b      	add	r3, r1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fc92 	bl	80004ac <__aeabi_i2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fd ff68 	bl	8000a64 <__aeabi_dcmplt>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d012      	beq.n	8002bc0 <Vonalas_tombok_feltoltese+0x220>
						int l = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002b9e:	e002      	b.n	8002ba6 <Vonalas_tombok_feltoltese+0x206>
							l++;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
						while(vonalak_h[l] != '-') {
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <Vonalas_tombok_feltoltese+0x250>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b2d      	cmp	r3, #45	; 0x2d
 8002bb0:	d1f6      	bne.n	8002ba0 <Vonalas_tombok_feltoltese+0x200>
						}
						vonalak_h[l] = poz;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	b2d9      	uxtb	r1, r3
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <Vonalas_tombok_feltoltese+0x250>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
	for(int poz=1; poz < 33-1; poz++) {
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b1f      	cmp	r3, #31
 8002bca:	f77f aeef 	ble.w	80029ac <Vonalas_tombok_feltoltese+0xc>
	}
	/*for(int poz=1; poz < 33-1; poz++) {
	// 33 -1: 31-ig megyunk, mert a 32. sosem lehet egy 2 szeles vonal jobb szele

	}*/
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd8:	20000210 	.word	0x20000210
 8002bdc:	20000128 	.word	0x20000128
 8002be0:	20000138 	.word	0x20000138
 8002be4:	3ff00000 	.word	0x3ff00000
 8002be8:	200001ec 	.word	0x200001ec
 8002bec:	20000120 	.word	0x20000120
 8002bf0:	20000130 	.word	0x20000130
 8002bf4:	00000000 	.word	0x00000000

08002bf8 <Irany_valaszto>:

void Irany_valaszto(void) {
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
	if(keresztezodesben == false) {
 8002bfe:	4b62      	ldr	r3, [pc, #392]	; (8002d88 <Irany_valaszto+0x190>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8099 	beq.w	8002d40 <Irany_valaszto+0x148>
		if(vonalak_e[1] < 33) {
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <Irany_valaszto+0x194>)
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f200 80a5 	bhi.w	8002d62 <Irany_valaszto+0x16a>
			bool ok = true;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	71fb      	strb	r3, [r7, #7]
			int i = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002c20:	e03e      	b.n	8002ca0 <Irany_valaszto+0xa8>
				if((-8 > vonal_kovetni_e - (vonalak_e[i] - 16))  ||  (vonal_kovetni_e - (vonalak_e[i] - 16) > 8)) {
 8002c22:	4b5b      	ldr	r3, [pc, #364]	; (8002d90 <Irany_valaszto+0x198>)
 8002c24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <Irany_valaszto+0x194>)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3b10      	subs	r3, #16
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc3a 	bl	80004ac <__aeabi_i2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f7fd fae6 	bl	8000210 <__aeabi_dsub>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <Irany_valaszto+0x19c>)
 8002c52:	f7fd ff07 	bl	8000a64 <__aeabi_dcmplt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d11c      	bne.n	8002c96 <Irany_valaszto+0x9e>
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <Irany_valaszto+0x198>)
 8002c5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c62:	4a4a      	ldr	r2, [pc, #296]	; (8002d8c <Irany_valaszto+0x194>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	3b10      	subs	r3, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fc1d 	bl	80004ac <__aeabi_i2d>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4620      	mov	r0, r4
 8002c78:	4629      	mov	r1, r5
 8002c7a:	f7fd fac9 	bl	8000210 <__aeabi_dsub>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <Irany_valaszto+0x1a0>)
 8002c8c:	f7fd ff08 	bl	8000aa0 <__aeabi_dcmpgt>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <Irany_valaszto+0xa2>
					//if((-9.5 > vonal_kovetni_h - (vonalak_h[i] - 16))  ||  (vonal_kovetni_h - (vonalak_h[i] - 16) > 9.5)) {
				// ha barhol van olyan vonal, ami tul messze van az aktualisan kovetettol
						ok = false;
 8002c96:	2300      	movs	r3, #0
 8002c98:	71fb      	strb	r3, [r7, #7]
					//}
				}
				i++;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	603b      	str	r3, [r7, #0]
			while(vonalak_e[i] < 33) {		//kulonben '-' van benne, ami 45
 8002ca0:	4a3a      	ldr	r2, [pc, #232]	; (8002d8c <Irany_valaszto+0x194>)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d9ba      	bls.n	8002c22 <Irany_valaszto+0x2a>
			}
			if(egyenes_cnt < 50)
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <Irany_valaszto+0x1a4>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b31      	cmp	r3, #49	; 0x31
 8002cb2:	d801      	bhi.n	8002cb8 <Irany_valaszto+0xc0>
				ok = false;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	71fb      	strb	r3, [r7, #7]
			if(ok == true) {
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d051      	beq.n	8002d62 <Irany_valaszto+0x16a>
				kereszt_cnt++;
 8002cbe:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <Irany_valaszto+0x1a8>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <Irany_valaszto+0x1a8>)
 8002cc8:	701a      	strb	r2, [r3, #0]
				if(9 < kereszt_cnt) {
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <Irany_valaszto+0x1a8>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b09      	cmp	r3, #9
 8002cd0:	d947      	bls.n	8002d62 <Irany_valaszto+0x16a>
					keresztezodesben = true;
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <Irany_valaszto+0x190>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
					tolatas = false;
 8002cd8:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <Irany_valaszto+0x1ac>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
					aktualis_irany = iranyok[keresztezodes_szam];
 8002cde:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <Irany_valaszto+0x1b0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <Irany_valaszto+0x1b4>)
 8002ce6:	5c9a      	ldrb	r2, [r3, r2]
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <Irany_valaszto+0x1b8>)
 8002cea:	701a      	strb	r2, [r3, #0]
					egyenes_cnt = 0;
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <Irany_valaszto+0x1a4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
					kovi_irany = iranyok[keresztezodes_szam + 1];
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <Irany_valaszto+0x1b0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <Irany_valaszto+0x1b4>)
 8002cfa:	5cd2      	ldrb	r2, [r2, r3]
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <Irany_valaszto+0x1bc>)
 8002cfe:	701a      	strb	r2, [r3, #0]
					if(aktualis_irany == 9) {
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <Irany_valaszto+0x1b8>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b09      	cmp	r3, #9
 8002d06:	d10b      	bne.n	8002d20 <Irany_valaszto+0x128>
						motvez_k = motvez_d / 2;	// ez a megallas
 8002d08:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <Irany_valaszto+0x1c0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0fda      	lsrs	r2, r3, #31
 8002d0e:	4413      	add	r3, r2
 8002d10:	105b      	asrs	r3, r3, #1
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <Irany_valaszto+0x1c4>)
 8002d16:	601a      	str	r2, [r3, #0]
						letsGo = false;
 8002d18:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <Irany_valaszto+0x1c8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e020      	b.n	8002d62 <Irany_valaszto+0x16a>
					} else {
						//motvez_k = motvez_d / 2;	// ez a megallas
						keresztezodes_szam++;
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <Irany_valaszto+0x1b0>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <Irany_valaszto+0x1b0>)
 8002d2a:	701a      	strb	r2, [r3, #0]
						letsGo = true;
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <Irany_valaszto+0x1c8>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
						kormanyzas_agresszivitas = 0.42;
 8002d32:	4924      	ldr	r1, [pc, #144]	; (8002dc4 <Irany_valaszto+0x1cc>)
 8002d34:	a312      	add	r3, pc, #72	; (adr r3, 8002d80 <Irany_valaszto+0x188>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	e9c1 2300 	strd	r2, r3, [r1]
 8002d3e:	e010      	b.n	8002d62 <Irany_valaszto+0x16a>
					}
				}
			}
		}
	} else if(33 < vonalak_e[1] && 50 < egyenes_cnt) {
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <Irany_valaszto+0x194>)
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b21      	cmp	r3, #33	; 0x21
 8002d46:	d90c      	bls.n	8002d62 <Irany_valaszto+0x16a>
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <Irany_valaszto+0x1a4>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b32      	cmp	r3, #50	; 0x32
 8002d4e:	d908      	bls.n	8002d62 <Irany_valaszto+0x16a>
		keresztezodesben = false;
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <Irany_valaszto+0x190>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
		aktualis_irany = 1;
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <Irany_valaszto+0x1b8>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
		kereszt_cnt = 0;
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <Irany_valaszto+0x1a8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
	}
	if(egyenes_cnt < 200)
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <Irany_valaszto+0x1a4>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2bc7      	cmp	r3, #199	; 0xc7
 8002d68:	d805      	bhi.n	8002d76 <Irany_valaszto+0x17e>
		egyenes_cnt++;
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <Irany_valaszto+0x1a4>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <Irany_valaszto+0x1a4>)
 8002d74:	701a      	strb	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	ae147ae1 	.word	0xae147ae1
 8002d84:	3fdae147 	.word	0x3fdae147
 8002d88:	20000249 	.word	0x20000249
 8002d8c:	20000138 	.word	0x20000138
 8002d90:	20000240 	.word	0x20000240
 8002d94:	c0200000 	.word	0xc0200000
 8002d98:	40200000 	.word	0x40200000
 8002d9c:	2000024b 	.word	0x2000024b
 8002da0:	2000024a 	.word	0x2000024a
 8002da4:	2000024c 	.word	0x2000024c
 8002da8:	20000248 	.word	0x20000248
 8002dac:	20000278 	.word	0x20000278
 8002db0:	2000013d 	.word	0x2000013d
 8002db4:	2000013e 	.word	0x2000013e
 8002db8:	20000150 	.word	0x20000150
 8002dbc:	20000154 	.word	0x20000154
 8002dc0:	20000260 	.word	0x20000260
 8002dc4:	20000148 	.word	0x20000148

08002dc8 <Kovetendo_vonal_valaszto>:

void Kovetendo_vonal_valaszto(double* elso, double* hatso, uint8_t irany) {
 8002dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dcc:	b092      	sub	sp, #72	; 0x48
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6178      	str	r0, [r7, #20]
 8002dd2:	6139      	str	r1, [r7, #16]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	73fb      	strb	r3, [r7, #15]
	double elso_sum = 0.0;
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double hatso_sum = 0.0;
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double e_db = 0.0001;
 8002df0:	a399      	add	r3, pc, #612	; (adr r3, 8003058 <Kovetendo_vonal_valaszto+0x290>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double h_db = 0.0001;
 8002dfa:	a397      	add	r3, pc, #604	; (adr r3, 8003058 <Kovetendo_vonal_valaszto+0x290>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if(irany == 0) {							// jobbra at
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 8083 	bne.w	8002f12 <Kovetendo_vonal_valaszto+0x14a>
		*elso = vonalak_e[0] - 16;
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <Kovetendo_vonal_valaszto+0x278>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	3b10      	subs	r3, #16
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd fb4a 	bl	80004ac <__aeabi_i2d>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	e05f      	b.n	8002ee8 <Kovetendo_vonal_valaszto+0x120>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002e28:	4a86      	ldr	r2, [pc, #536]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	4413      	add	r3, r2
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d856      	bhi.n	8002ee2 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002e34:	4b84      	ldr	r3, [pc, #528]	; (8003048 <Kovetendo_vonal_valaszto+0x280>)
 8002e36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e3a:	4a82      	ldr	r2, [pc, #520]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	3b10      	subs	r3, #16
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb31 	bl	80004ac <__aeabi_i2d>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4620      	mov	r0, r4
 8002e50:	4629      	mov	r1, r5
 8002e52:	f7fd f9dd 	bl	8000210 <__aeabi_dsub>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	4b7a      	ldr	r3, [pc, #488]	; (800304c <Kovetendo_vonal_valaszto+0x284>)
 8002e64:	f7fd fe1c 	bl	8000aa0 <__aeabi_dcmpgt>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d039      	beq.n	8002ee2 <Kovetendo_vonal_valaszto+0x11a>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002e6e:	4b76      	ldr	r3, [pc, #472]	; (8003048 <Kovetendo_vonal_valaszto+0x280>)
 8002e70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e74:	4a73      	ldr	r2, [pc, #460]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	4413      	add	r3, r2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	3b10      	subs	r3, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fb14 	bl	80004ac <__aeabi_i2d>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4620      	mov	r0, r4
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	f7fd f9c0 	bl	8000210 <__aeabi_dsub>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <Kovetendo_vonal_valaszto+0x288>)
 8002e9e:	f7fd fde1 	bl	8000a64 <__aeabi_dcmplt>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01c      	beq.n	8002ee2 <Kovetendo_vonal_valaszto+0x11a>
				hatso_sum += vonalak_h[i] - 16;
 8002ea8:	4a66      	ldr	r2, [pc, #408]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	4413      	add	r3, r2
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	3b10      	subs	r3, #16
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fafa 	bl	80004ac <__aeabi_i2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ec0:	f7fd f9a8 	bl	8000214 <__adddf3>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	4b60      	ldr	r3, [pc, #384]	; (8003054 <Kovetendo_vonal_valaszto+0x28c>)
 8002ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ed6:	f7fd f99d 	bl	8000214 <__adddf3>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	dd9c      	ble.n	8002e28 <Kovetendo_vonal_valaszto+0x60>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f02:	f7fd fc67 	bl	80007d4 <__aeabi_ddiv>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	6939      	ldr	r1, [r7, #16]
 8002f0c:	e9c1 2300 	strd	r2, r3, [r1]
 8002f10:	e165      	b.n	80031de <Kovetendo_vonal_valaszto+0x416>
	} else if (irany == 2) {					// balra at
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	f040 808f 	bne.w	8003038 <Kovetendo_vonal_valaszto+0x270>
		int j = 4;								// 4: vonalak_e merete
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002f1e:	e002      	b.n	8002f26 <Kovetendo_vonal_valaszto+0x15e>
			j--;
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	623b      	str	r3, [r7, #32]
		while(33 < vonalak_e[j]) {
 8002f26:	4a46      	ldr	r2, [pc, #280]	; (8003040 <Kovetendo_vonal_valaszto+0x278>)
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b21      	cmp	r3, #33	; 0x21
 8002f30:	d8f6      	bhi.n	8002f20 <Kovetendo_vonal_valaszto+0x158>
		}
		*elso = vonalak_e[j] - 16;
 8002f32:	4a43      	ldr	r2, [pc, #268]	; (8003040 <Kovetendo_vonal_valaszto+0x278>)
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	3b10      	subs	r3, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fab5 	bl	80004ac <__aeabi_i2d>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e05f      	b.n	8003012 <Kovetendo_vonal_valaszto+0x24a>
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002f52:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d856      	bhi.n	800300c <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <Kovetendo_vonal_valaszto+0x280>)
 8002f60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f64:	4a37      	ldr	r2, [pc, #220]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b10      	subs	r3, #16
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fa9c 	bl	80004ac <__aeabi_i2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4640      	mov	r0, r8
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	f7fd f948 	bl	8000210 <__aeabi_dsub>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
			if((vonalak_h[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <Kovetendo_vonal_valaszto+0x284>)
 8002f8e:	f7fd fd87 	bl	8000aa0 <__aeabi_dcmpgt>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d039      	beq.n	800300c <Kovetendo_vonal_valaszto+0x244>
			   ((-6 < vonal_kovetni_h - (vonalak_h[i] - 16))  &&  (vonal_kovetni_h - (vonalak_h[i] - 16) < 6))) {
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <Kovetendo_vonal_valaszto+0x280>)
 8002f9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f9e:	4a29      	ldr	r2, [pc, #164]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	3b10      	subs	r3, #16
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fa7f 	bl	80004ac <__aeabi_i2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	f7fd f92b 	bl	8000210 <__aeabi_dsub>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <Kovetendo_vonal_valaszto+0x288>)
 8002fc8:	f7fd fd4c 	bl	8000a64 <__aeabi_dcmplt>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01c      	beq.n	800300c <Kovetendo_vonal_valaszto+0x244>
				hatso_sum += vonalak_h[i] - 16;
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <Kovetendo_vonal_valaszto+0x27c>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	3b10      	subs	r3, #16
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fa65 	bl	80004ac <__aeabi_i2d>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002fea:	f7fd f913 	bl	8000214 <__adddf3>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <Kovetendo_vonal_valaszto+0x28c>)
 8002ffc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003000:	f7fd f908 	bl	8000214 <__adddf3>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 2; i++) {				// 6: vonalak[] merete
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b01      	cmp	r3, #1
 8003016:	dd9c      	ble.n	8002f52 <Kovetendo_vonal_valaszto+0x18a>
			}
		}
		*hatso = (-1)* hatso_sum / h_db;
 8003018:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd fbd4 	bl	80007d4 <__aeabi_ddiv>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	6939      	ldr	r1, [r7, #16]
 8003032:	e9c1 2300 	strd	r2, r3, [r1]
 8003036:	e0d2      	b.n	80031de <Kovetendo_vonal_valaszto+0x416>
	} else {									// irany == 1: kozep es egyeb, rossz iranyokra is ezt csinaljuk
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e093      	b.n	8003166 <Kovetendo_vonal_valaszto+0x39e>
 800303e:	bf00      	nop
 8003040:	20000138 	.word	0x20000138
 8003044:	20000130 	.word	0x20000130
 8003048:	20000238 	.word	0x20000238
 800304c:	c0180000 	.word	0xc0180000
 8003050:	40180000 	.word	0x40180000
 8003054:	3ff00000 	.word	0x3ff00000
 8003058:	eb1c432d 	.word	0xeb1c432d
 800305c:	3f1a36e2 	.word	0x3f1a36e2
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003060:	4a8b      	ldr	r2, [pc, #556]	; (8003290 <Kovetendo_vonal_valaszto+0x4c8>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4413      	add	r3, r2
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b20      	cmp	r3, #32
 800306a:	d856      	bhi.n	800311a <Kovetendo_vonal_valaszto+0x352>
			   ((-5 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 5))) {
 800306c:	4b89      	ldr	r3, [pc, #548]	; (8003294 <Kovetendo_vonal_valaszto+0x4cc>)
 800306e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003072:	4a87      	ldr	r2, [pc, #540]	; (8003290 <Kovetendo_vonal_valaszto+0x4c8>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	3b10      	subs	r3, #16
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa15 	bl	80004ac <__aeabi_i2d>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4620      	mov	r0, r4
 8003088:	4629      	mov	r1, r5
 800308a:	f7fd f8c1 	bl	8000210 <__aeabi_dsub>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
			if((vonalak_e[i] < 33)  &&			// kulonben '-' van benne, ami 45
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	4b7f      	ldr	r3, [pc, #508]	; (8003298 <Kovetendo_vonal_valaszto+0x4d0>)
 800309c:	f7fd fd00 	bl	8000aa0 <__aeabi_dcmpgt>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d039      	beq.n	800311a <Kovetendo_vonal_valaszto+0x352>
			   ((-5 < vonal_kovetni_e - (vonalak_e[i] - 16))  &&  (vonal_kovetni_e - (vonalak_e[i] - 16) < 5))) {
 80030a6:	4b7b      	ldr	r3, [pc, #492]	; (8003294 <Kovetendo_vonal_valaszto+0x4cc>)
 80030a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030ac:	4a78      	ldr	r2, [pc, #480]	; (8003290 <Kovetendo_vonal_valaszto+0x4c8>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	3b10      	subs	r3, #16
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd f9f8 	bl	80004ac <__aeabi_i2d>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4620      	mov	r0, r4
 80030c2:	4629      	mov	r1, r5
 80030c4:	f7fd f8a4 	bl	8000210 <__aeabi_dsub>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <Kovetendo_vonal_valaszto+0x4d4>)
 80030d6:	f7fd fcc5 	bl	8000a64 <__aeabi_dcmplt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01c      	beq.n	800311a <Kovetendo_vonal_valaszto+0x352>
				elso_sum += vonalak_e[i] - 16;
 80030e0:	4a6b      	ldr	r2, [pc, #428]	; (8003290 <Kovetendo_vonal_valaszto+0x4c8>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	3b10      	subs	r3, #16
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f9de 	bl	80004ac <__aeabi_i2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80030f8:	f7fd f88c 	bl	8000214 <__adddf3>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				e_db += 1.0;
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <Kovetendo_vonal_valaszto+0x4d8>)
 800310a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800310e:	f7fd f881 	bl	8000214 <__adddf3>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			}
			if(vonalak_h[i] < 33) {				// kulonben '-' van benne, ami 45
 800311a:	4a62      	ldr	r2, [pc, #392]	; (80032a4 <Kovetendo_vonal_valaszto+0x4dc>)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b20      	cmp	r3, #32
 8003124:	d81c      	bhi.n	8003160 <Kovetendo_vonal_valaszto+0x398>
				hatso_sum += vonalak_h[i] - 16;
 8003126:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <Kovetendo_vonal_valaszto+0x4dc>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	3b10      	subs	r3, #16
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd f9bb 	bl	80004ac <__aeabi_i2d>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800313e:	f7fd f869 	bl	8000214 <__adddf3>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				h_db += 1.0;
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <Kovetendo_vonal_valaszto+0x4d8>)
 8003150:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003154:	f7fd f85e 	bl	8000214 <__adddf3>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for(int i=0; i < 5; i++) {				// 6: vonalak[] merete
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	3301      	adds	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b04      	cmp	r3, #4
 800316a:	f77f af79 	ble.w	8003060 <Kovetendo_vonal_valaszto+0x298>
			}
		}
		if(0.9 < e_db) {
 800316e:	a344      	add	r3, pc, #272	; (adr r3, 8003280 <Kovetendo_vonal_valaszto+0x4b8>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003178:	f7fd fc92 	bl	8000aa0 <__aeabi_dcmpgt>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <Kovetendo_vonal_valaszto+0x3d2>
			*elso = elso_sum / e_db;
 8003182:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003186:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800318a:	f7fd fb23 	bl	80007d4 <__aeabi_ddiv>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	e9c1 2300 	strd	r2, r3, [r1]
 8003198:	e005      	b.n	80031a6 <Kovetendo_vonal_valaszto+0x3de>
		} else {
			*elso = *elso;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	6979      	ldr	r1, [r7, #20]
 80031a2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(0.9 < h_db) {
 80031a6:	a336      	add	r3, pc, #216	; (adr r3, 8003280 <Kovetendo_vonal_valaszto+0x4b8>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031b0:	f7fd fc76 	bl	8000aa0 <__aeabi_dcmpgt>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <Kovetendo_vonal_valaszto+0x40a>
			*hatso = hatso_sum / h_db;
 80031ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031c2:	f7fd fb07 	bl	80007d4 <__aeabi_ddiv>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	6939      	ldr	r1, [r7, #16]
 80031cc:	e9c1 2300 	strd	r2, r3, [r1]
 80031d0:	e005      	b.n	80031de <Kovetendo_vonal_valaszto+0x416>
		} else {
			*hatso = *hatso;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	6939      	ldr	r1, [r7, #16]
 80031da:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

	if(1.9 < e_db) {
 80031de:	a32a      	add	r3, pc, #168	; (adr r3, 8003288 <Kovetendo_vonal_valaszto+0x4c0>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031e8:	f7fd fc5a 	bl	8000aa0 <__aeabi_dcmpgt>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <Kovetendo_vonal_valaszto+0x436>
		fekezes_cnt += 1;
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <Kovetendo_vonal_valaszto+0x4e0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <Kovetendo_vonal_valaszto+0x4e0>)
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e002      	b.n	8003204 <Kovetendo_vonal_valaszto+0x43c>
	} else {
		fekezes_cnt = 0;
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <Kovetendo_vonal_valaszto+0x4e0>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
	}
	if((-5 < *elso && *elso < 5)  &&  (-5 < *hatso && *hatso < 5)) {
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <Kovetendo_vonal_valaszto+0x4d0>)
 8003210:	f7fd fc46 	bl	8000aa0 <__aeabi_dcmpgt>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d026      	beq.n	8003268 <Kovetendo_vonal_valaszto+0x4a0>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <Kovetendo_vonal_valaszto+0x4d4>)
 8003226:	f7fd fc1d 	bl	8000a64 <__aeabi_dcmplt>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01b      	beq.n	8003268 <Kovetendo_vonal_valaszto+0x4a0>
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <Kovetendo_vonal_valaszto+0x4d0>)
 800323c:	f7fd fc30 	bl	8000aa0 <__aeabi_dcmpgt>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <Kovetendo_vonal_valaszto+0x4a0>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <Kovetendo_vonal_valaszto+0x4d4>)
 8003252:	f7fd fc07 	bl	8000a64 <__aeabi_dcmplt>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <Kovetendo_vonal_valaszto+0x4a0>
		veretesi_cnt += 1;
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <Kovetendo_vonal_valaszto+0x4e4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <Kovetendo_vonal_valaszto+0x4e4>)
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e003      	b.n	8003270 <Kovetendo_vonal_valaszto+0x4a8>
	} else {
		veretesi_cnt = 0;
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <Kovetendo_vonal_valaszto+0x4e4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
	}
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	3748      	adds	r7, #72	; 0x48
 8003274:	46bd      	mov	sp, r7
 8003276:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800327a:	bf00      	nop
 800327c:	f3af 8000 	nop.w
 8003280:	cccccccd 	.word	0xcccccccd
 8003284:	3feccccc 	.word	0x3feccccc
 8003288:	66666666 	.word	0x66666666
 800328c:	3ffe6666 	.word	0x3ffe6666
 8003290:	20000138 	.word	0x20000138
 8003294:	20000240 	.word	0x20000240
 8003298:	c0140000 	.word	0xc0140000
 800329c:	40140000 	.word	0x40140000
 80032a0:	3ff00000 	.word	0x3ff00000
 80032a4:	20000130 	.word	0x20000130
 80032a8:	2000025c 	.word	0x2000025c
 80032ac:	20000258 	.word	0x20000258

080032b0 <Szervo_szog_beallit>:

void Szervo_szog_beallit(void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	if (btnEnable == 1 && szervoEnable == 1) {
 80032b4:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <Szervo_szog_beallit+0x140>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 8093 	bne.w	80033e4 <Szervo_szog_beallit+0x134>
 80032be:	4b4d      	ldr	r3, [pc, #308]	; (80033f4 <Szervo_szog_beallit+0x144>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	f040 808e 	bne.w	80033e4 <Szervo_szog_beallit+0x134>
		if (tolatas == true) {		// tolatas	// 10 - (10- -7)*0.5 =
 80032c8:	4b4b      	ldr	r3, [pc, #300]	; (80033f8 <Szervo_szog_beallit+0x148>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d029      	beq.n	8003324 <Szervo_szog_beallit+0x74>
			kormanyzas_agresszivitas = 0.7;
 80032d0:	494a      	ldr	r1, [pc, #296]	; (80033fc <Szervo_szog_beallit+0x14c>)
 80032d2:	a345      	add	r3, pc, #276	; (adr r3, 80033e8 <Szervo_szog_beallit+0x138>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	e9c1 2300 	strd	r2, r3, [r1]
			cel = vonal_kovetni_h + (((vonal_kovetni_h) - (vonal_kovetni_e)) *kormanyzas_agresszivitas);
 80032dc:	4b48      	ldr	r3, [pc, #288]	; (8003400 <Szervo_szog_beallit+0x150>)
 80032de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e2:	4b48      	ldr	r3, [pc, #288]	; (8003404 <Szervo_szog_beallit+0x154>)
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fc ff92 	bl	8000210 <__aeabi_dsub>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <Szervo_szog_beallit+0x14c>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fd f941 	bl	8000580 <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <Szervo_szog_beallit+0x150>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f7fc ff82 	bl	8000214 <__adddf3>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	493c      	ldr	r1, [pc, #240]	; (8003408 <Szervo_szog_beallit+0x158>)
 8003316:	e9c1 2300 	strd	r2, r3, [r1]
			motvez_k = 560;
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <Szervo_szog_beallit+0x15c>)
 800331c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e01e      	b.n	8003362 <Szervo_szog_beallit+0xb2>
		} else {				// elore menet es rossz input
			cel = vonal_kovetni_e + (((vonal_kovetni_e) - (vonal_kovetni_h)) *kormanyzas_agresszivitas);
 8003324:	4b37      	ldr	r3, [pc, #220]	; (8003404 <Szervo_szog_beallit+0x154>)
 8003326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <Szervo_szog_beallit+0x150>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f7fc ff6e 	bl	8000210 <__aeabi_dsub>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <Szervo_szog_beallit+0x14c>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f7fd f91d 	bl	8000580 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <Szervo_szog_beallit+0x154>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fc ff5e 	bl	8000214 <__adddf3>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	492a      	ldr	r1, [pc, #168]	; (8003408 <Szervo_szog_beallit+0x158>)
 800335e:	e9c1 2300 	strd	r2, r3, [r1]
			//motvez_k = 455;
		}
		if(cel < -15) {
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <Szervo_szog_beallit+0x158>)
 8003364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <Szervo_szog_beallit+0x160>)
 800336e:	f7fd fb79 	bl	8000a64 <__aeabi_dcmplt>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <Szervo_szog_beallit+0xd2>
			szervoSzog = 0;
 8003378:	4b26      	ldr	r3, [pc, #152]	; (8003414 <Szervo_szog_beallit+0x164>)
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e028      	b.n	80033d4 <Szervo_szog_beallit+0x124>
		} else if(15 < cel) {
 8003382:	4b21      	ldr	r3, [pc, #132]	; (8003408 <Szervo_szog_beallit+0x158>)
 8003384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <Szervo_szog_beallit+0x168>)
 800338e:	f7fd fb87 	bl	8000aa0 <__aeabi_dcmpgt>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <Szervo_szog_beallit+0xf0>
			szervoSzog = 180;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <Szervo_szog_beallit+0x164>)
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <Szervo_szog_beallit+0x16c>)
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e019      	b.n	80033d4 <Szervo_szog_beallit+0x124>
		} else {
			szervoSzog = 90 + cel *6;
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <Szervo_szog_beallit+0x158>)
 80033a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <Szervo_szog_beallit+0x170>)
 80033ac:	f7fd f8e8 	bl	8000580 <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <Szervo_szog_beallit+0x174>)
 80033be:	f7fc ff29 	bl	8000214 <__adddf3>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f7fd fb93 	bl	8000af4 <__aeabi_d2f>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4a10      	ldr	r2, [pc, #64]	; (8003414 <Szervo_szog_beallit+0x164>)
 80033d2:	6013      	str	r3, [r2, #0]
		}

		SERVO_MoveTo(SZERVO, szervoSzog);
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <Szervo_szog_beallit+0x164>)
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fd fee4 	bl	80011ac <SERVO_MoveTo>
	}
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	66666666 	.word	0x66666666
 80033ec:	3fe66666 	.word	0x3fe66666
 80033f0:	200001e8 	.word	0x200001e8
 80033f4:	20000000 	.word	0x20000000
 80033f8:	2000024c 	.word	0x2000024c
 80033fc:	20000148 	.word	0x20000148
 8003400:	20000238 	.word	0x20000238
 8003404:	20000240 	.word	0x20000240
 8003408:	20000250 	.word	0x20000250
 800340c:	20000154 	.word	0x20000154
 8003410:	c02e0000 	.word	0xc02e0000
 8003414:	20000140 	.word	0x20000140
 8003418:	402e0000 	.word	0x402e0000
 800341c:	43340000 	.word	0x43340000
 8003420:	40180000 	.word	0x40180000
 8003424:	40568000 	.word	0x40568000

08003428 <MinDistance>:

// A utility function to find the vertex with minimum distance value, from
// the set of vertices not yet included in shortest path tree
int MinDistance(int dist[], bool sptSet[])
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
    // Initialize min value
    int min = INT_MAX, min_index;
 8003432:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003436:	617b      	str	r3, [r7, #20]

    for (int v = 0; v < CSUCS_SZAM; v++)
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e01b      	b.n	8003476 <MinDistance+0x4e>
        if (sptSet[v] == false && dist[v] <= min)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00f      	beq.n	8003470 <MinDistance+0x48>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	db07      	blt.n	8003470 <MinDistance+0x48>
            min = dist[v], min_index = v;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	613b      	str	r3, [r7, #16]
    for (int v = 0; v < CSUCS_SZAM; v++)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3301      	adds	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b20      	cmp	r3, #32
 800347a:	dde0      	ble.n	800343e <MinDistance+0x16>

    return min_index;
 800347c:	693b      	ldr	r3, [r7, #16]
}
 800347e:	4618      	mov	r0, r3
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <Source_Target_allito>:


void Source_Target_allito(void) {
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
    source = road[0];
 8003490:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <Source_Target_allito+0x174>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5b      	ldr	r2, [pc, #364]	; (8003604 <Source_Target_allito+0x178>)
 8003496:	6013      	str	r3, [r2, #0]

    if            (kapuk[0] == 'A') {
 8003498:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <Source_Target_allito+0x17c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b41      	cmp	r3, #65	; 0x41
 800349e:	d106      	bne.n	80034ae <Source_Target_allito+0x22>
            target1 = 1;
 80034a0:	4b5a      	ldr	r3, [pc, #360]	; (800360c <Source_Target_allito+0x180>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
            target2 = 2;
 80034a6:	4b5a      	ldr	r3, [pc, #360]	; (8003610 <Source_Target_allito+0x184>)
 80034a8:	2202      	movs	r2, #2
 80034aa:	601a      	str	r2, [r3, #0]
            target2 = 29;
    } else if    (kapuk[0] == 'X') {
            target1 = 31;
            target2 = 32;
    }
}
 80034ac:	e0a3      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'B') {
 80034ae:	4b56      	ldr	r3, [pc, #344]	; (8003608 <Source_Target_allito+0x17c>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b42      	cmp	r3, #66	; 0x42
 80034b4:	d106      	bne.n	80034c4 <Source_Target_allito+0x38>
            target1 = 3;
 80034b6:	4b55      	ldr	r3, [pc, #340]	; (800360c <Source_Target_allito+0x180>)
 80034b8:	2203      	movs	r2, #3
 80034ba:	601a      	str	r2, [r3, #0]
            target2 = 4;
 80034bc:	4b54      	ldr	r3, [pc, #336]	; (8003610 <Source_Target_allito+0x184>)
 80034be:	2204      	movs	r2, #4
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	e098      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'C') {
 80034c4:	4b50      	ldr	r3, [pc, #320]	; (8003608 <Source_Target_allito+0x17c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b43      	cmp	r3, #67	; 0x43
 80034ca:	d106      	bne.n	80034da <Source_Target_allito+0x4e>
            target1 = 5;
 80034cc:	4b4f      	ldr	r3, [pc, #316]	; (800360c <Source_Target_allito+0x180>)
 80034ce:	2205      	movs	r2, #5
 80034d0:	601a      	str	r2, [r3, #0]
            target2 = 6;
 80034d2:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <Source_Target_allito+0x184>)
 80034d4:	2206      	movs	r2, #6
 80034d6:	601a      	str	r2, [r3, #0]
}
 80034d8:	e08d      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'D') {
 80034da:	4b4b      	ldr	r3, [pc, #300]	; (8003608 <Source_Target_allito+0x17c>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b44      	cmp	r3, #68	; 0x44
 80034e0:	d106      	bne.n	80034f0 <Source_Target_allito+0x64>
            target1 = 7;
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <Source_Target_allito+0x180>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
            target2 = 8;
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <Source_Target_allito+0x184>)
 80034ea:	2208      	movs	r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
}
 80034ee:	e082      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'E') {
 80034f0:	4b45      	ldr	r3, [pc, #276]	; (8003608 <Source_Target_allito+0x17c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b45      	cmp	r3, #69	; 0x45
 80034f6:	d106      	bne.n	8003506 <Source_Target_allito+0x7a>
            target1 = 9;
 80034f8:	4b44      	ldr	r3, [pc, #272]	; (800360c <Source_Target_allito+0x180>)
 80034fa:	2209      	movs	r2, #9
 80034fc:	601a      	str	r2, [r3, #0]
            target2 = 10;
 80034fe:	4b44      	ldr	r3, [pc, #272]	; (8003610 <Source_Target_allito+0x184>)
 8003500:	220a      	movs	r2, #10
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	e077      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'F') {
 8003506:	4b40      	ldr	r3, [pc, #256]	; (8003608 <Source_Target_allito+0x17c>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b46      	cmp	r3, #70	; 0x46
 800350c:	d106      	bne.n	800351c <Source_Target_allito+0x90>
            target1 = 11;
 800350e:	4b3f      	ldr	r3, [pc, #252]	; (800360c <Source_Target_allito+0x180>)
 8003510:	220b      	movs	r2, #11
 8003512:	601a      	str	r2, [r3, #0]
            target2 = 12;
 8003514:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <Source_Target_allito+0x184>)
 8003516:	220c      	movs	r2, #12
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	e06c      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'G') {
 800351c:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <Source_Target_allito+0x17c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b47      	cmp	r3, #71	; 0x47
 8003522:	d106      	bne.n	8003532 <Source_Target_allito+0xa6>
            target1 = 13;
 8003524:	4b39      	ldr	r3, [pc, #228]	; (800360c <Source_Target_allito+0x180>)
 8003526:	220d      	movs	r2, #13
 8003528:	601a      	str	r2, [r3, #0]
            target2 = 14;
 800352a:	4b39      	ldr	r3, [pc, #228]	; (8003610 <Source_Target_allito+0x184>)
 800352c:	220e      	movs	r2, #14
 800352e:	601a      	str	r2, [r3, #0]
}
 8003530:	e061      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'H') {
 8003532:	4b35      	ldr	r3, [pc, #212]	; (8003608 <Source_Target_allito+0x17c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b48      	cmp	r3, #72	; 0x48
 8003538:	d106      	bne.n	8003548 <Source_Target_allito+0xbc>
            target1 = 15;
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <Source_Target_allito+0x180>)
 800353c:	220f      	movs	r2, #15
 800353e:	601a      	str	r2, [r3, #0]
            target2 = 16;
 8003540:	4b33      	ldr	r3, [pc, #204]	; (8003610 <Source_Target_allito+0x184>)
 8003542:	2210      	movs	r2, #16
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	e056      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'I') {
 8003548:	4b2f      	ldr	r3, [pc, #188]	; (8003608 <Source_Target_allito+0x17c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b49      	cmp	r3, #73	; 0x49
 800354e:	d106      	bne.n	800355e <Source_Target_allito+0xd2>
            target1 = 17;
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <Source_Target_allito+0x180>)
 8003552:	2211      	movs	r2, #17
 8003554:	601a      	str	r2, [r3, #0]
            target2 = 18;
 8003556:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <Source_Target_allito+0x184>)
 8003558:	2212      	movs	r2, #18
 800355a:	601a      	str	r2, [r3, #0]
}
 800355c:	e04b      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'J') {
 800355e:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <Source_Target_allito+0x17c>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b4a      	cmp	r3, #74	; 0x4a
 8003564:	d106      	bne.n	8003574 <Source_Target_allito+0xe8>
            target1 = 19;
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <Source_Target_allito+0x180>)
 8003568:	2213      	movs	r2, #19
 800356a:	601a      	str	r2, [r3, #0]
            target2 = 20;
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <Source_Target_allito+0x184>)
 800356e:	2214      	movs	r2, #20
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	e040      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'K') {
 8003574:	4b24      	ldr	r3, [pc, #144]	; (8003608 <Source_Target_allito+0x17c>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b4b      	cmp	r3, #75	; 0x4b
 800357a:	d106      	bne.n	800358a <Source_Target_allito+0xfe>
            target1 = 21;
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <Source_Target_allito+0x180>)
 800357e:	2215      	movs	r2, #21
 8003580:	601a      	str	r2, [r3, #0]
            target2 = 22;
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <Source_Target_allito+0x184>)
 8003584:	2216      	movs	r2, #22
 8003586:	601a      	str	r2, [r3, #0]
}
 8003588:	e035      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'L') {
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <Source_Target_allito+0x17c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b4c      	cmp	r3, #76	; 0x4c
 8003590:	d106      	bne.n	80035a0 <Source_Target_allito+0x114>
            target1 = 23;
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <Source_Target_allito+0x180>)
 8003594:	2217      	movs	r2, #23
 8003596:	601a      	str	r2, [r3, #0]
            target2 = 24;
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <Source_Target_allito+0x184>)
 800359a:	2218      	movs	r2, #24
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	e02a      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'M') {
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <Source_Target_allito+0x17c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b4d      	cmp	r3, #77	; 0x4d
 80035a6:	d106      	bne.n	80035b6 <Source_Target_allito+0x12a>
            target1 = 25;
 80035a8:	4b18      	ldr	r3, [pc, #96]	; (800360c <Source_Target_allito+0x180>)
 80035aa:	2219      	movs	r2, #25
 80035ac:	601a      	str	r2, [r3, #0]
            target2 = 26;
 80035ae:	4b18      	ldr	r3, [pc, #96]	; (8003610 <Source_Target_allito+0x184>)
 80035b0:	221a      	movs	r2, #26
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	e01f      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'N') {
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <Source_Target_allito+0x17c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b4e      	cmp	r3, #78	; 0x4e
 80035bc:	d106      	bne.n	80035cc <Source_Target_allito+0x140>
            target1 = 27;
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <Source_Target_allito+0x180>)
 80035c0:	221b      	movs	r2, #27
 80035c2:	601a      	str	r2, [r3, #0]
            target2 = 28;
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <Source_Target_allito+0x184>)
 80035c6:	221c      	movs	r2, #28
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	e014      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'O') {
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <Source_Target_allito+0x17c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b4f      	cmp	r3, #79	; 0x4f
 80035d2:	d106      	bne.n	80035e2 <Source_Target_allito+0x156>
            target1 = 29;
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <Source_Target_allito+0x180>)
 80035d6:	221d      	movs	r2, #29
 80035d8:	601a      	str	r2, [r3, #0]
            target2 = 29;
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <Source_Target_allito+0x184>)
 80035dc:	221d      	movs	r2, #29
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	e009      	b.n	80035f6 <Source_Target_allito+0x16a>
    } else if    (kapuk[0] == 'X') {
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <Source_Target_allito+0x17c>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b58      	cmp	r3, #88	; 0x58
 80035e8:	d105      	bne.n	80035f6 <Source_Target_allito+0x16a>
            target1 = 31;
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <Source_Target_allito+0x180>)
 80035ec:	221f      	movs	r2, #31
 80035ee:	601a      	str	r2, [r3, #0]
            target2 = 32;
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <Source_Target_allito+0x184>)
 80035f2:	2220      	movs	r2, #32
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000160 	.word	0x20000160
 8003604:	200001b0 	.word	0x200001b0
 8003608:	20000158 	.word	0x20000158
 800360c:	200001b4 	.word	0x200001b4
 8003610:	200001b8 	.word	0x200001b8

08003614 <Kapukbol_iranyok>:

void Kapukbol_iranyok(void) {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	Source_Target_allito();
 8003618:	f7ff ff38 	bl	800348c <Source_Target_allito>
	Graf_csucs_feltolt();
 800361c:	f000 f96a 	bl	80038f4 <Graf_csucs_feltolt>
	Kapuk_letilt();
 8003620:	f000 fece 	bl	80043c0 <Kapuk_letilt>
	Dijkstra(graf_csucs, source, target1, target2);
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <Kapukbol_iranyok+0x30>)
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <Kapukbol_iranyok+0x34>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <Kapukbol_iranyok+0x38>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4807      	ldr	r0, [pc, #28]	; (8003650 <Kapukbol_iranyok+0x3c>)
 8003632:	f000 f80f 	bl	8003654 <Dijkstra>
	Iranyok_torlo();
 8003636:	f001 f87f 	bl	8004738 <Iranyok_torlo>
	Iranyok_osszeallito();
 800363a:	f001 f897 	bl	800476c <Iranyok_osszeallito>
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200001b0 	.word	0x200001b0
 8003648:	200001b4 	.word	0x200001b4
 800364c:	200001b8 	.word	0x200001b8
 8003650:	200004c8 	.word	0x200004c8

08003654 <Dijkstra>:

// Function that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void Dijkstra(int graph[CSUCS_SZAM][CSUCS_SZAM], int src, int target1, int target2) {
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b0d9      	sub	sp, #356	; 0x164
 8003658:	af00      	add	r7, sp, #0
 800365a:	f107 040c 	add.w	r4, r7, #12
 800365e:	6020      	str	r0, [r4, #0]
 8003660:	f107 0008 	add.w	r0, r7, #8
 8003664:	6001      	str	r1, [r0, #0]
 8003666:	1d39      	adds	r1, r7, #4
 8003668:	600a      	str	r2, [r1, #0]
 800366a:	463a      	mov	r2, r7
 800366c:	6013      	str	r3, [r2, #0]
	int dist[CSUCS_SZAM]; // The output array. dist[i] will hold the shortest
	// distance from src to i
  	int r[CSUCS_SZAM];
  	for(int i = 0; i < CSUCS_SZAM; i++) {
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003674:	e00c      	b.n	8003690 <Dijkstra+0x3c>
      	r[i] = -1;
 8003676:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800367a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800367e:	f04f 31ff 	mov.w	r1, #4294967295
 8003682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  	for(int i = 0; i < CSUCS_SZAM; i++) {
 8003686:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800368a:	3301      	adds	r3, #1
 800368c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003690:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003694:	2b20      	cmp	r3, #32
 8003696:	ddee      	ble.n	8003676 <Dijkstra+0x22>

	bool sptSet[CSUCS_SZAM]; // sptSet[i] will be true if vertex i is included in shortest
	// path tree or shortest distance from src to i is finalized

	// Initialize all distances as INFINITE and stpSet[] as false
	for (int i = 0; i < CSUCS_SZAM; i++)
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800369e:	e015      	b.n	80036cc <Dijkstra+0x78>
		dist[i] = INT_MAX, sptSet[i] = false;
 80036a0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80036aa:	4413      	add	r3, r2
 80036ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80036b0:	f843 2ca8 	str.w	r2, [r3, #-168]
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036bc:	4413      	add	r3, r2
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CSUCS_SZAM; i++)
 80036c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036c6:	3301      	adds	r3, #1
 80036c8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036cc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	dde5      	ble.n	80036a0 <Dijkstra+0x4c>

	// Distance of source vertex from itself is always 0
	dist[src] = 0;
 80036d4:	f107 0308 	add.w	r3, r7, #8
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80036e0:	4413      	add	r3, r2
 80036e2:	2200      	movs	r2, #0
 80036e4:	f843 2ca8 	str.w	r2, [r3, #-168]

	// Find shortest path for all vertices
	for (int count = 0; count < CSUCS_SZAM - 1; count++) {
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036ee:	e094      	b.n	800381a <Dijkstra+0x1c6>
		// Pick the minimum distance vertex from the set of vertices not
		// yet processed. u is always equal to src in the first iteration.
		int u = MinDistance(dist, sptSet);
 80036f0:	f107 0210 	add.w	r2, r7, #16
 80036f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fe94 	bl	8003428 <MinDistance>
 8003700:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

		// Mark the picked vertex as processed
		sptSet[u] = true;
 8003704:	f107 0210 	add.w	r2, r7, #16
 8003708:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800370c:	4413      	add	r3, r2
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]

		// Update dist value of the adjacent vertices of the picked vertex.
		for (int v = 0; v < CSUCS_SZAM; v++)
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003718:	e076      	b.n	8003808 <Dijkstra+0x1b4>

			// Update dist[v] only if is not in sptSet, there is an edge from
			// u to v, and total weight of path from src to v through u is
			// smaller than current value of dist[v]
			if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
 800371a:	f107 0210 	add.w	r2, r7, #16
 800371e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	f083 0301 	eor.w	r3, r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d066      	beq.n	80037fe <Dijkstra+0x1aa>
 8003730:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8003734:	4613      	mov	r3, r2
 8003736:	015b      	lsls	r3, r3, #5
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	461a      	mov	r2, r3
 800373e:	f107 030c 	add.w	r3, r7, #12
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4413      	add	r3, r2
 8003746:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800374a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d055      	beq.n	80037fe <Dijkstra+0x1aa>
 8003752:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800375c:	4413      	add	r3, r2
 800375e:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003762:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003766:	4293      	cmp	r3, r2
 8003768:	d049      	beq.n	80037fe <Dijkstra+0x1aa>
				&& dist[u] + graph[u][v] < dist[v]) {
 800376a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003774:	4413      	add	r3, r2
 8003776:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 800377a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800377e:	4613      	mov	r3, r2
 8003780:	015b      	lsls	r3, r3, #5
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	461a      	mov	r2, r3
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4413      	add	r3, r2
 8003790:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003798:	18ca      	adds	r2, r1, r3
 800379a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80037a4:	440b      	add	r3, r1
 80037a6:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	da27      	bge.n	80037fe <Dijkstra+0x1aa>
				dist[v] = dist[u] + graph[u][v];
 80037ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80037b8:	4413      	add	r3, r2
 80037ba:	f853 1ca8 	ldr.w	r1, [r3, #-168]
 80037be:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80037c2:	4613      	mov	r3, r2
 80037c4:	015b      	lsls	r3, r3, #5
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4413      	add	r3, r2
 80037d4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	18ca      	adds	r2, r1, r3
 80037de:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80037e8:	440b      	add	r3, r1
 80037ea:	f843 2ca8 	str.w	r2, [r3, #-168]
    			r[v] = u; }
 80037ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037f2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80037f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int v = 0; v < CSUCS_SZAM; v++)
 80037fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003802:	3301      	adds	r3, #1
 8003804:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003808:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800380c:	2b20      	cmp	r3, #32
 800380e:	dd84      	ble.n	800371a <Dijkstra+0xc6>
	for (int count = 0; count < CSUCS_SZAM - 1; count++) {
 8003810:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003814:	3301      	adds	r3, #1
 8003816:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800381a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800381e:	2b1f      	cmp	r3, #31
 8003820:	f77f af66 	ble.w	80036f0 <Dijkstra+0x9c>
	}

  	int ultimate_trg = target1;
 8003824:	1d3b      	adds	r3, r7, #4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  	if(dist[target2] < dist[target1])
 800382c:	463b      	mov	r3, r7
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003836:	4413      	add	r3, r2
 8003838:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003846:	440b      	add	r3, r1
 8003848:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 800384c:	429a      	cmp	r2, r3
 800384e:	da03      	bge.n	8003858 <Dijkstra+0x204>
      	ultimate_trg = target2;
 8003850:	463b      	mov	r3, r7
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  	for(int i = 0; i < 20; i++) {
 8003858:	2300      	movs	r3, #0
 800385a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800385e:	e00b      	b.n	8003878 <Dijkstra+0x224>
      	road[i] = -1;
 8003860:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <Dijkstra+0x29c>)
 8003862:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003866:	f04f 31ff 	mov.w	r1, #4294967295
 800386a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	for(int i = 0; i < 20; i++) {
 800386e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003872:	3301      	adds	r3, #1
 8003874:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003878:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800387c:	2b13      	cmp	r3, #19
 800387e:	ddef      	ble.n	8003860 <Dijkstra+0x20c>
    }
  	road[0] = ultimate_trg;
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <Dijkstra+0x29c>)
 8003882:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003886:	6013      	str	r3, [r2, #0]
  	int last_v = r[ultimate_trg];
 8003888:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800388c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003894:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  	int k = 1;
 8003898:	2301      	movs	r3, #1
 800389a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  	//cout <<last_v<< endl;
  	while(last_v != src){
 800389e:	e013      	b.n	80038c8 <Dijkstra+0x274>
  		road[k] = last_v;
 80038a0:	4913      	ldr	r1, [pc, #76]	; (80038f0 <Dijkstra+0x29c>)
 80038a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80038a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		k++;
 80038ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80038b2:	3301      	adds	r3, #1
 80038b4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        last_v = r[last_v];
 80038b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038bc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  	while(last_v != src){
 80038c8:	f107 0308 	add.w	r3, r7, #8
 80038cc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d1e4      	bne.n	80038a0 <Dijkstra+0x24c>
      	//cout <<last_v<< endl;
     }
  	road[k] = last_v;
 80038d6:	4906      	ldr	r1, [pc, #24]	; (80038f0 <Dijkstra+0x29c>)
 80038d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80038dc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038e4:	bf00      	nop
 80038e6:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000160 	.word	0x20000160

080038f4 <Graf_csucs_feltolt>:

void Graf_csucs_feltolt(void) {
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
  	for(int u = 0; u < CSUCS_SZAM; u++) {
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	e015      	b.n	800392c <Graf_csucs_feltolt+0x38>
      	for(int v= 0; v < CSUCS_SZAM; v++) {
 8003900:	2300      	movs	r3, #0
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	e00c      	b.n	8003920 <Graf_csucs_feltolt+0x2c>
      		graf_csucs[u][v] = 5000000;
 8003906:	49d0      	ldr	r1, [pc, #832]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	015b      	lsls	r3, r3, #5
 800390e:	4413      	add	r3, r2
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	4413      	add	r3, r2
 8003914:	4acd      	ldr	r2, [pc, #820]	; (8003c4c <Graf_csucs_feltolt+0x358>)
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      	for(int v= 0; v < CSUCS_SZAM; v++) {
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b20      	cmp	r3, #32
 8003924:	ddef      	ble.n	8003906 <Graf_csucs_feltolt+0x12>
  	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3301      	adds	r3, #1
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b20      	cmp	r3, #32
 8003930:	dde6      	ble.n	8003900 <Graf_csucs_feltolt+0xc>
        }
    }
  	graf_csucs[1][3] = 4891;
 8003932:	4bc5      	ldr	r3, [pc, #788]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003934:	f241 321b 	movw	r2, #4891	; 0x131b
 8003938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    graf_csucs[1][5] = 6060;
 800393c:	4bc2      	ldr	r3, [pc, #776]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 800393e:	f241 72ac 	movw	r2, #6060	; 0x17ac
 8003942:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    graf_csucs[1][7] = 7143;
 8003946:	4bc0      	ldr	r3, [pc, #768]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003948:	f641 32e7 	movw	r2, #7143	; 0x1be7
 800394c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    graf_csucs[2][3] = 5260;
 8003950:	4bbd      	ldr	r3, [pc, #756]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003952:	f241 428c 	movw	r2, #5260	; 0x148c
 8003956:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    graf_csucs[2][5] = 6429;
 800395a:	4bbb      	ldr	r3, [pc, #748]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 800395c:	f641 121d 	movw	r2, #6429	; 0x191d
 8003960:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    graf_csucs[2][7] = 7512;
 8003964:	4bb8      	ldr	r3, [pc, #736]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003966:	f641 5258 	movw	r2, #7512	; 0x1d58
 800396a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    graf_csucs[3][9] = 4202;
 800396e:	4bb6      	ldr	r3, [pc, #728]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003970:	f241 026a 	movw	r2, #4202	; 0x106a
 8003974:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    graf_csucs[3][11] = 5373;
 8003978:	4bb3      	ldr	r3, [pc, #716]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 800397a:	f241 42fd 	movw	r2, #5373	; 0x14fd
 800397e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    graf_csucs[4][1] = 5260;
 8003982:	4bb1      	ldr	r3, [pc, #708]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003984:	f241 428c 	movw	r2, #5260	; 0x148c
 8003988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    graf_csucs[4][2] = 4891;
 800398c:	4bae      	ldr	r3, [pc, #696]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 800398e:	f241 321b 	movw	r2, #4891	; 0x131b
 8003992:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    graf_csucs[5][11] = 3657;
 8003996:	4bac      	ldr	r3, [pc, #688]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003998:	f640 6249 	movw	r2, #3657	; 0xe49
 800399c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    graf_csucs[6][1] = 6429;
 80039a0:	4ba9      	ldr	r3, [pc, #676]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039a2:	f641 121d 	movw	r2, #6429	; 0x191d
 80039a6:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    graf_csucs[6][2] = 6060; 	// C csucs kesz
 80039aa:	4ba7      	ldr	r3, [pc, #668]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039ac:	f241 72ac 	movw	r2, #6060	; 0x17ac
 80039b0:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
    graf_csucs[7][11] = 2899;
 80039b4:	4ba4      	ldr	r3, [pc, #656]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039b6:	f640 3253 	movw	r2, #2899	; 0xb53
 80039ba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
    graf_csucs[8][1] = 7512;
 80039be:	4ba2      	ldr	r3, [pc, #648]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039c0:	f641 5258 	movw	r2, #7512	; 0x1d58
 80039c4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    graf_csucs[8][2] = 7143;
 80039c8:	4b9f      	ldr	r3, [pc, #636]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039ca:	f641 32e7 	movw	r2, #7143	; 0x1be7
 80039ce:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    graf_csucs[9][17] = 6770;
 80039d2:	4b9d      	ldr	r3, [pc, #628]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039d4:	f641 2272 	movw	r2, #6770	; 0x1a72
 80039d8:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
    graf_csucs[9][19] = 8874;
 80039dc:	4b9a      	ldr	r3, [pc, #616]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039de:	f242 22aa 	movw	r2, #8874	; 0x22aa
 80039e2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
    graf_csucs[10][4] = 4202;
 80039e6:	4b98      	ldr	r3, [pc, #608]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039e8:	f241 026a 	movw	r2, #4202	; 0x106a
 80039ec:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    graf_csucs[11][14] = 1697;
 80039f0:	4b95      	ldr	r3, [pc, #596]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039f2:	f240 62a1 	movw	r2, #1697	; 0x6a1
 80039f6:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
    graf_csucs[11][15] = 2370;
 80039fa:	4b93      	ldr	r3, [pc, #588]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 80039fc:	f640 1242 	movw	r2, #2370	; 0x942
 8003a00:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
    graf_csucs[11][21] = 8569;
 8003a04:	4b90      	ldr	r3, [pc, #576]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a06:	f242 1279 	movw	r2, #8569	; 0x2179
 8003a0a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    graf_csucs[11][23] = 13602;
 8003a0e:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a10:	f243 5222 	movw	r2, #13602	; 0x3522
 8003a14:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
    graf_csucs[11][25] = 14059;
 8003a18:	4b8b      	ldr	r3, [pc, #556]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a1a:	f243 62eb 	movw	r2, #14059	; 0x36eb
 8003a1e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    graf_csucs[11][27] = 15560;
 8003a22:	4b89      	ldr	r3, [pc, #548]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a24:	f643 42c8 	movw	r2, #15560	; 0x3cc8
 8003a28:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    graf_csucs[12][4] = 5373;
 8003a2c:	4b86      	ldr	r3, [pc, #536]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a2e:	f241 42fd 	movw	r2, #5373	; 0x14fd
 8003a32:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    graf_csucs[12][6] = 3657;
 8003a36:	4b84      	ldr	r3, [pc, #528]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a38:	f640 6249 	movw	r2, #3657	; 0xe49
 8003a3c:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
    graf_csucs[12][8] = 2899; 	// F csucs kesz
 8003a40:	4b81      	ldr	r3, [pc, #516]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a42:	f640 3253 	movw	r2, #2899	; 0xb53
 8003a46:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    graf_csucs[13][12] = 1697;
 8003a4a:	4b7f      	ldr	r3, [pc, #508]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a4c:	f240 62a1 	movw	r2, #1697	; 0x6a1
 8003a50:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4
    graf_csucs[14][17] = 4396;
 8003a54:	4b7c      	ldr	r3, [pc, #496]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a56:	f241 122c 	movw	r2, #4396	; 0x112c
 8003a5a:	f8c3 277c 	str.w	r2, [r3, #1916]	; 0x77c
    graf_csucs[14][19] = 6500;
 8003a5e:	4b7a      	ldr	r3, [pc, #488]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a60:	f641 1264 	movw	r2, #6500	; 0x1964
 8003a64:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    graf_csucs[15][21] = 6494;
 8003a68:	4b77      	ldr	r3, [pc, #476]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a6a:	f641 125e 	movw	r2, #6494	; 0x195e
 8003a6e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    graf_csucs[15][23] = 11527;
 8003a72:	4b75      	ldr	r3, [pc, #468]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a74:	f642 5207 	movw	r2, #11527	; 0x2d07
 8003a78:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    graf_csucs[15][25] = 11984;
 8003a7c:	4b72      	ldr	r3, [pc, #456]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a7e:	f642 62d0 	movw	r2, #11984	; 0x2ed0
 8003a82:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    graf_csucs[15][27] = 13485;
 8003a86:	4b70      	ldr	r3, [pc, #448]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a88:	f243 42ad 	movw	r2, #13485	; 0x34ad
 8003a8c:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
    graf_csucs[16][12] = 2370;
 8003a90:	4b6d      	ldr	r3, [pc, #436]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a92:	f640 1242 	movw	r2, #2370	; 0x942
 8003a96:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
    graf_csucs[17][21] = 2969;
 8003a9a:	4b6b      	ldr	r3, [pc, #428]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003a9c:	f640 3299 	movw	r2, #2969	; 0xb99
 8003aa0:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    graf_csucs[17][23] = 8002;
 8003aa4:	4b68      	ldr	r3, [pc, #416]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003aa6:	f641 7242 	movw	r2, #8002	; 0x1f42
 8003aaa:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    graf_csucs[17][25] = 8459;
 8003aae:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003ab0:	f242 120b 	movw	r2, #8459	; 0x210b
 8003ab4:	f8c3 2928 	str.w	r2, [r3, #2344]	; 0x928
    graf_csucs[17][27] = 9960;
 8003ab8:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003aba:	f242 62e8 	movw	r2, #9960	; 0x26e8
 8003abe:	f8c3 2930 	str.w	r2, [r3, #2352]	; 0x930
    graf_csucs[18][13] = 4396;
 8003ac2:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003ac4:	f241 122c 	movw	r2, #4396	; 0x112c
 8003ac8:	f8c3 297c 	str.w	r2, [r3, #2428]	; 0x97c
    graf_csucs[18][10] = 6770; 	// I csucs kesz
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003ace:	f641 2272 	movw	r2, #6770	; 0x1a72
 8003ad2:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    graf_csucs[19][23] = 5615;
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003ad8:	f241 52ef 	movw	r2, #5615	; 0x15ef
 8003adc:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
    graf_csucs[19][25] = 6072;
 8003ae0:	4b59      	ldr	r3, [pc, #356]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003ae2:	f241 72b8 	movw	r2, #6072	; 0x17b8
 8003ae6:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
    graf_csucs[19][27] = 7573;
 8003aea:	4b57      	ldr	r3, [pc, #348]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003aec:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003af0:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
    graf_csucs[20][10] = 8874;
 8003af4:	4b54      	ldr	r3, [pc, #336]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003af6:	f242 22aa 	movw	r2, #8874	; 0x22aa
 8003afa:	f8c3 2a78 	str.w	r2, [r3, #2680]	; 0xa78
    graf_csucs[20][13] = 6500;
 8003afe:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b00:	f641 1264 	movw	r2, #6500	; 0x1964
 8003b04:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
    graf_csucs[21][23] = 4727;
 8003b08:	4b4f      	ldr	r3, [pc, #316]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b0a:	f241 2277 	movw	r2, #4727	; 0x1277
 8003b0e:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    graf_csucs[21][25] = 5184;
 8003b12:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b14:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 8003b18:	f8c3 2b38 	str.w	r2, [r3, #2872]	; 0xb38
    graf_csucs[21][27] = 6685;
 8003b1c:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b1e:	f641 221d 	movw	r2, #6685	; 0x1a1d
 8003b22:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    graf_csucs[22][12] = 8569;
 8003b26:	4b48      	ldr	r3, [pc, #288]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b28:	f242 1279 	movw	r2, #8569	; 0x2179
 8003b2c:	f8c3 2b88 	str.w	r2, [r3, #2952]	; 0xb88
    graf_csucs[22][16] = 6494;
 8003b30:	4b45      	ldr	r3, [pc, #276]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b32:	f641 125e 	movw	r2, #6494	; 0x195e
 8003b36:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
    graf_csucs[22][18] = 2969;
 8003b3a:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b3c:	f640 3299 	movw	r2, #2969	; 0xb99
 8003b40:	f8c3 2ba0 	str.w	r2, [r3, #2976]	; 0xba0
    graf_csucs[23][29] = 10948;
 8003b44:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b46:	f642 22c4 	movw	r2, #10948	; 0x2ac4
 8003b4a:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    graf_csucs[23][32] = 13441;
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b50:	f243 4281 	movw	r2, #13441	; 0x3481
 8003b54:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    graf_csucs[24][12] = 13602;
 8003b58:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b5a:	f243 5222 	movw	r2, #13602	; 0x3522
 8003b5e:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    graf_csucs[24][16] = 11527;
 8003b62:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b64:	f642 5207 	movw	r2, #11527	; 0x2d07
 8003b68:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
    graf_csucs[24][18] = 8002;
 8003b6c:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b6e:	f641 7242 	movw	r2, #8002	; 0x1f42
 8003b72:	f8c3 2ca8 	str.w	r2, [r3, #3240]	; 0xca8
    graf_csucs[24][20] = 5615;
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b78:	f241 52ef 	movw	r2, #5615	; 0x15ef
 8003b7c:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
    graf_csucs[24][22] = 4727; 	// L csucs kesz
 8003b80:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b82:	f241 2277 	movw	r2, #4727	; 0x1277
 8003b86:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
    graf_csucs[25][29] = 10485;
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b8c:	f642 02f5 	movw	r2, #10485	; 0x28f5
 8003b90:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
    graf_csucs[25][32] = 12978;
 8003b94:	4b2c      	ldr	r3, [pc, #176]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003b96:	f243 22b2 	movw	r2, #12978	; 0x32b2
 8003b9a:	f8c3 2d64 	str.w	r2, [r3, #3428]	; 0xd64
    graf_csucs[26][12] = 14059;
 8003b9e:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003ba0:	f243 62eb 	movw	r2, #14059	; 0x36eb
 8003ba4:	f8c3 2d98 	str.w	r2, [r3, #3480]	; 0xd98
    graf_csucs[26][16] = 11984;
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003baa:	f642 62d0 	movw	r2, #11984	; 0x2ed0
 8003bae:	f8c3 2da8 	str.w	r2, [r3, #3496]	; 0xda8
    graf_csucs[26][18] = 8459;
 8003bb2:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003bb4:	f242 120b 	movw	r2, #8459	; 0x210b
 8003bb8:	f8c3 2db0 	str.w	r2, [r3, #3504]	; 0xdb0
    graf_csucs[26][20] = 6072;
 8003bbc:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003bbe:	f241 72b8 	movw	r2, #6072	; 0x17b8
 8003bc2:	f8c3 2db8 	str.w	r2, [r3, #3512]	; 0xdb8
    graf_csucs[26][22] = 5184;
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003bc8:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 8003bcc:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
    graf_csucs[27][31] = 3047;
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003bd2:	f640 32e7 	movw	r2, #3047	; 0xbe7
 8003bd6:	f8c3 2e68 	str.w	r2, [r3, #3688]	; 0xe68
    graf_csucs[28][12] = 15560;
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003bdc:	f643 42c8 	movw	r2, #15560	; 0x3cc8
 8003be0:	f8c3 2ea0 	str.w	r2, [r3, #3744]	; 0xea0
    graf_csucs[28][16] = 13485;
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003be6:	f243 42ad 	movw	r2, #13485	; 0x34ad
 8003bea:	f8c3 2eb0 	str.w	r2, [r3, #3760]	; 0xeb0
    graf_csucs[28][18] = 9960;
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003bf0:	f242 62e8 	movw	r2, #9960	; 0x26e8
 8003bf4:	f8c3 2eb8 	str.w	r2, [r3, #3768]	; 0xeb8
    graf_csucs[28][20] = 7573;
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003bfa:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003bfe:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
    graf_csucs[28][22] = 6685;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003c04:	f641 221d 	movw	r2, #6685	; 0x1a1d
 8003c08:	f8c3 2ec8 	str.w	r2, [r3, #3784]	; 0xec8
    graf_csucs[29][32] = 9659;
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003c0e:	f242 52bb 	movw	r2, #9659	; 0x25bb
 8003c12:	f8c3 2f74 	str.w	r2, [r3, #3956]	; 0xf74
    graf_csucs[30][29] = 6981;
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003c18:	f641 3245 	movw	r2, #6981	; 0x1b45
 8003c1c:	f8c3 2fec 	str.w	r2, [r3, #4076]	; 0xfec
    graf_csucs[30][32] = 9474;
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003c22:	f242 5202 	movw	r2, #9474	; 0x2502
 8003c26:	f8c3 2ff8 	str.w	r2, [r3, #4088]	; 0xff8
    graf_csucs[31][24] = 13441;
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003c2c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003c30:	331c      	adds	r3, #28
 8003c32:	f243 4281 	movw	r2, #13441	; 0x3481
 8003c36:	601a      	str	r2, [r3, #0]
    graf_csucs[31][26] = 12978;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <Graf_csucs_feltolt+0x354>)
 8003c3a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003c3e:	3304      	adds	r3, #4
 8003c40:	f243 22b2 	movw	r2, #12978	; 0x32b2
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e003      	b.n	8003c50 <Graf_csucs_feltolt+0x35c>
 8003c48:	200004c8 	.word	0x200004c8
 8003c4c:	004c4b40 	.word	0x004c4b40
    graf_csucs[32][28] = 3047;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <Graf_csucs_feltolt+0x378>)
 8003c52:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003c56:	3310      	adds	r3, #16
 8003c58:	f640 32e7 	movw	r2, #3047	; 0xbe7
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	200004c8 	.word	0x200004c8

08003c70 <Graf_irany_feltolt>:

void Graf_irany_feltolt(void) {
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	e022      	b.n	8003cc2 <Graf_irany_feltolt+0x52>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	e019      	b.n	8003cb6 <Graf_irany_feltolt+0x46>
			for(int d = 0; d < 8; d++) {
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	e010      	b.n	8003caa <Graf_irany_feltolt+0x3a>
				graf_irany[u][v][d] = -1;
 8003c88:	49bb      	ldr	r1, [pc, #748]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	015b      	lsls	r3, r3, #5
 8003c90:	4413      	add	r3, r2
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	00da      	lsls	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int d = 0; d < 8; d++) {
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b07      	cmp	r3, #7
 8003cae:	ddeb      	ble.n	8003c88 <Graf_irany_feltolt+0x18>
		for(int v = 0; v < CSUCS_SZAM; v++) {
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	dde2      	ble.n	8003c82 <Graf_irany_feltolt+0x12>
	for(int u = 0; u < CSUCS_SZAM; u++) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	ddd9      	ble.n	8003c7c <Graf_irany_feltolt+0xc>
			}
		}
	}
	graf_irany[1][3][0] = 2;
 8003cc8:	4bab      	ldr	r3, [pc, #684]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	graf_irany[1][5][0] = 0;
 8003cd0:	4ba9      	ldr	r3, [pc, #676]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
	graf_irany[1][5][1] = 2;
 8003cd8:	4ba7      	ldr	r3, [pc, #668]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	graf_irany[1][7][0] = 0;
 8003ce0:	4ba5      	ldr	r3, [pc, #660]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	graf_irany[1][7][1] = 0;
 8003ce8:	4ba3      	ldr	r3, [pc, #652]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	graf_irany[2][3][0] = 2;
 8003cf0:	4ba1      	ldr	r3, [pc, #644]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f8c3 28a0 	str.w	r2, [r3, #2208]	; 0x8a0
	graf_irany[2][5][0] = 0;
 8003cf8:	4b9f      	ldr	r3, [pc, #636]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
	graf_irany[2][5][1] = 2;
 8003d00:	4b9d      	ldr	r3, [pc, #628]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d02:	2202      	movs	r2, #2
 8003d04:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
	graf_irany[2][7][0] = 0;
 8003d08:	4b9b      	ldr	r3, [pc, #620]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
	graf_irany[2][7][1] = 0;
 8003d10:	4b99      	ldr	r3, [pc, #612]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
	graf_irany[3][9][0] = 2;
 8003d18:	4b97      	ldr	r3, [pc, #604]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
	graf_irany[3][11][0] = 0;
 8003d20:	4b95      	ldr	r3, [pc, #596]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
	graf_irany[3][11][1] = 1;
 8003d28:	4b93      	ldr	r3, [pc, #588]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f8c3 2dc4 	str.w	r2, [r3, #3524]	; 0xdc4
	graf_irany[3][11][2] = 2;
 8003d30:	4b91      	ldr	r3, [pc, #580]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d32:	2202      	movs	r2, #2
 8003d34:	f8c3 2dc8 	str.w	r2, [r3, #3528]	; 0xdc8
	graf_irany[4][1][0] = 0;
 8003d38:	4b8f      	ldr	r3, [pc, #572]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d3a:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
	graf_irany[4][2][0] = 2;
 8003d42:	4b8d      	ldr	r3, [pc, #564]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d44:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8003d48:	2202      	movs	r2, #2
 8003d4a:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][0] = 0;
 8003d4c:	4b8a      	ldr	r3, [pc, #552]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d4e:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
	graf_irany[5][11][1] = 2;
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d58:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2202      	movs	r2, #2
 8003d60:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][0] = 0;
 8003d62:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d64:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
	graf_irany[6][1][1] = 0;
 8003d6c:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d6e:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8003d72:	3304      	adds	r3, #4
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][0] = 0; 	// C csucs kesz
 8003d78:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d7a:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
	graf_irany[6][2][1] = 2; 	// C csucs kesz
 8003d82:	4b7d      	ldr	r3, [pc, #500]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d84:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	601a      	str	r2, [r3, #0]
	graf_irany[7][11][0] = 1;
 8003d8e:	4b7a      	ldr	r3, [pc, #488]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d90:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][0] = 1;
 8003d98:	4b77      	ldr	r3, [pc, #476]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003d9a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003d9e:	3320      	adds	r3, #32
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
	graf_irany[8][1][1] = 0;
 8003da4:	4b74      	ldr	r3, [pc, #464]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003da6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][0] = 1;
 8003db0:	4b71      	ldr	r3, [pc, #452]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003db2:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
	graf_irany[8][2][1] = 2;
 8003dba:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003dbc:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][0] = 2;
 8003dc6:	4b6c      	ldr	r3, [pc, #432]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003dc8:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003dcc:	2202      	movs	r2, #2
 8003dce:	601a      	str	r2, [r3, #0]
	graf_irany[9][17][1] = 0;
 8003dd0:	4b69      	ldr	r3, [pc, #420]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003dd2:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][0] = 2;
 8003ddc:	4b66      	ldr	r3, [pc, #408]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003dde:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8003de2:	2202      	movs	r2, #2
 8003de4:	601a      	str	r2, [r3, #0]
	graf_irany[9][19][1] = 2;
 8003de6:	4b64      	ldr	r3, [pc, #400]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003de8:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8003dec:	3304      	adds	r3, #4
 8003dee:	2202      	movs	r2, #2
 8003df0:	601a      	str	r2, [r3, #0]
	graf_irany[10][4][0] = 0;
 8003df2:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003df4:	f503 5327 	add.w	r3, r3, #10688	; 0x29c0
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
	graf_irany[11][14][0] = 2;
 8003dfc:	4b5e      	ldr	r3, [pc, #376]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003dfe:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003e02:	3320      	adds	r3, #32
 8003e04:	2202      	movs	r2, #2
 8003e06:	601a      	str	r2, [r3, #0]
	graf_irany[11][15][0] = 0;
 8003e08:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e0a:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][0] = 1;
 8003e12:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][1] = 2;
 8003e1c:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e1e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003e22:	3304      	adds	r3, #4
 8003e24:	2202      	movs	r2, #2
 8003e26:	601a      	str	r2, [r3, #0]
	graf_irany[11][21][2] = 1;
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e2a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003e2e:	3308      	adds	r3, #8
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][0] = 1;
 8003e34:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e36:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][1] = 2;
 8003e3e:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e40:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003e44:	3304      	adds	r3, #4
 8003e46:	2202      	movs	r2, #2
 8003e48:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][2] = 0;
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e4c:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003e50:	3308      	adds	r3, #8
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
	graf_irany[11][23][3] = 0;
 8003e56:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e58:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][0] = 1;
 8003e62:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e64:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][1] = 2;
 8003e6c:	4b42      	ldr	r3, [pc, #264]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e6e:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e72:	3304      	adds	r3, #4
 8003e74:	2202      	movs	r2, #2
 8003e76:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][2] = 0;
 8003e78:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e7a:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e7e:	3308      	adds	r3, #8
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
	graf_irany[11][25][3] = 1;
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e86:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][0] = 1;
 8003e90:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e92:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][1] = 2;
 8003e9a:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003e9c:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][2] = 0;
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003ea8:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003eac:	3308      	adds	r3, #8
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
	graf_irany[11][27][3] = 2;
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003eb4:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8003eb8:	330c      	adds	r3, #12
 8003eba:	2202      	movs	r2, #2
 8003ebc:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][0] = 0;
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003ec0:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][1] = 0;
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003eca:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
	graf_irany[12][4][2] = 1;
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003ed6:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8003eda:	3308      	adds	r3, #8
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][0] = 0;
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003ee2:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
	graf_irany[12][6][1] = 2;
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003eec:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	601a      	str	r2, [r3, #0]
	graf_irany[12][8][0] = 2; 	// F csucs kesz
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003ef8:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 8003efc:	2202      	movs	r2, #2
 8003efe:	601a      	str	r2, [r3, #0]
	graf_irany[13][12][0] = 1;
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f02:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8003f06:	3320      	adds	r3, #32
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][0] = 1;
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f0e:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8003f12:	3320      	adds	r3, #32
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
	graf_irany[14][17][1] = 0;
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f1a:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8003f1e:	3324      	adds	r3, #36	; 0x24
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][0] = 1;
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f26:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003f2a:	3320      	adds	r3, #32
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
	graf_irany[14][19][1] = 2;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f32:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	2202      	movs	r2, #2
 8003f3a:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][0] = 1;
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f3e:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
	graf_irany[15][21][1] = 1;
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f48:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][0] = 1;
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f54:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f58:	3340      	adds	r3, #64	; 0x40
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][1] = 0;
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f60:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f64:	3344      	adds	r3, #68	; 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
	graf_irany[15][23][2] = 0;
 8003f6a:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <Graf_irany_feltolt+0x308>)
 8003f6c:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
 8003f70:	3348      	adds	r3, #72	; 0x48
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e001      	b.n	8003f7c <Graf_irany_feltolt+0x30c>
 8003f78:	2000173c 	.word	0x2000173c
	graf_irany[15][25][0] = 1;
 8003f7c:	4bbc      	ldr	r3, [pc, #752]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003f7e:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][1] = 0;
 8003f86:	4bba      	ldr	r3, [pc, #744]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003f88:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
	graf_irany[15][25][2] = 1;
 8003f92:	4bb7      	ldr	r3, [pc, #732]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003f94:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003f98:	3308      	adds	r3, #8
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][0] = 1;
 8003f9e:	4bb4      	ldr	r3, [pc, #720]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003fa0:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003fa4:	3340      	adds	r3, #64	; 0x40
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][1] = 0;
 8003faa:	4bb1      	ldr	r3, [pc, #708]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003fac:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003fb0:	3344      	adds	r3, #68	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
	graf_irany[15][27][2] = 2;
 8003fb6:	4bae      	ldr	r3, [pc, #696]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003fb8:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8003fbc:	3348      	adds	r3, #72	; 0x48
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	601a      	str	r2, [r3, #0]
	graf_irany[16][12][0] = 1;
 8003fc2:	4bab      	ldr	r3, [pc, #684]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003fc4:	f503 4387 	add.w	r3, r3, #17280	; 0x4380
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
	graf_irany[17][21][0] = 2;		// vagy kozep, fura keresztezodes
 8003fcc:	4ba8      	ldr	r3, [pc, #672]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003fce:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8003fd2:	3340      	adds	r3, #64	; 0x40
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][0] = 0;
 8003fd8:	4ba5      	ldr	r3, [pc, #660]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003fda:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
	graf_irany[17][23][1] = 0;
 8003fe2:	4ba3      	ldr	r3, [pc, #652]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003fe4:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][0] = 0;
 8003fee:	4ba0      	ldr	r3, [pc, #640]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003ff0:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
	graf_irany[17][25][1] = 1;
 8003ffa:	4b9d      	ldr	r3, [pc, #628]	; (8004270 <Graf_irany_feltolt+0x600>)
 8003ffc:	f503 4392 	add.w	r3, r3, #18688	; 0x4900
 8004000:	3344      	adds	r3, #68	; 0x44
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][0] = 0;
 8004006:	4b9a      	ldr	r3, [pc, #616]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004008:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
	graf_irany[17][27][1] = 2;
 8004010:	4b97      	ldr	r3, [pc, #604]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004012:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8004016:	3304      	adds	r3, #4
 8004018:	2202      	movs	r2, #2
 800401a:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][0] = 1;
 800401c:	4b94      	ldr	r3, [pc, #592]	; (8004270 <Graf_irany_feltolt+0x600>)
 800401e:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8004022:	3360      	adds	r3, #96	; 0x60
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]
	graf_irany[18][13][1] = 2;
 8004028:	4b91      	ldr	r3, [pc, #580]	; (8004270 <Graf_irany_feltolt+0x600>)
 800402a:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 800402e:	3364      	adds	r3, #100	; 0x64
 8004030:	2202      	movs	r2, #2
 8004032:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][0] = 1; 	// I csucs kesz
 8004034:	4b8e      	ldr	r3, [pc, #568]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004036:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
	graf_irany[18][10][1] = 0; 	// I csucs kesz
 800403e:	4b8c      	ldr	r3, [pc, #560]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004040:	f503 4397 	add.w	r3, r3, #19328	; 0x4b80
 8004044:	3304      	adds	r3, #4
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
	graf_irany[19][23][0] = 0;
 800404a:	4b89      	ldr	r3, [pc, #548]	; (8004270 <Graf_irany_feltolt+0x600>)
 800404c:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
	graf_irany[19][25][0] = 1;
 8004056:	4b86      	ldr	r3, [pc, #536]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004058:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]
	graf_irany[19][27][0] = 2;
 8004060:	4b83      	ldr	r3, [pc, #524]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004062:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8004066:	3340      	adds	r3, #64	; 0x40
 8004068:	2202      	movs	r2, #2
 800406a:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][0] = 0;
 800406c:	4b80      	ldr	r3, [pc, #512]	; (8004270 <Graf_irany_feltolt+0x600>)
 800406e:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 8004072:	3340      	adds	r3, #64	; 0x40
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
	graf_irany[20][10][1] = 0;
 8004078:	4b7d      	ldr	r3, [pc, #500]	; (8004270 <Graf_irany_feltolt+0x600>)
 800407a:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 800407e:	3344      	adds	r3, #68	; 0x44
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][0] = 0;
 8004084:	4b7a      	ldr	r3, [pc, #488]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004086:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800408a:	3320      	adds	r3, #32
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
	graf_irany[20][13][1] = 2;
 8004090:	4b77      	ldr	r3, [pc, #476]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004092:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8004096:	3324      	adds	r3, #36	; 0x24
 8004098:	2202      	movs	r2, #2
 800409a:	601a      	str	r2, [r3, #0]
	graf_irany[21][23][0] = 0;
 800409c:	4b74      	ldr	r3, [pc, #464]	; (8004270 <Graf_irany_feltolt+0x600>)
 800409e:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	graf_irany[21][25][0] = 1;
 80040a6:	4b72      	ldr	r3, [pc, #456]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040a8:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 80040ac:	3340      	adds	r3, #64	; 0x40
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
	graf_irany[21][27][0] = 2;
 80040b2:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040b4:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80040b8:	2202      	movs	r2, #2
 80040ba:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][0] = 1;
 80040bc:	4b6c      	ldr	r3, [pc, #432]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040be:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80040c2:	3340      	adds	r3, #64	; 0x40
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][1] = 0;
 80040c8:	4b69      	ldr	r3, [pc, #420]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040ca:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80040ce:	3344      	adds	r3, #68	; 0x44
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
	graf_irany[22][12][2] = 1;
 80040d4:	4b66      	ldr	r3, [pc, #408]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040d6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80040da:	3348      	adds	r3, #72	; 0x48
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][0] = 1;
 80040e0:	4b63      	ldr	r3, [pc, #396]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040e2:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 80040e6:	3340      	adds	r3, #64	; 0x40
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
	graf_irany[22][16][1] = 2;
 80040ec:	4b60      	ldr	r3, [pc, #384]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040ee:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 80040f2:	3344      	adds	r3, #68	; 0x44
 80040f4:	2202      	movs	r2, #2
 80040f6:	601a      	str	r2, [r3, #0]
	graf_irany[22][18][0] = 0;
 80040f8:	4b5d      	ldr	r3, [pc, #372]	; (8004270 <Graf_irany_feltolt+0x600>)
 80040fa:	f503 43ba 	add.w	r3, r3, #23808	; 0x5d00
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][0] = 0;
 8004102:	4b5b      	ldr	r3, [pc, #364]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004104:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
	graf_irany[23][29][1] = 0;
 800410c:	4b58      	ldr	r3, [pc, #352]	; (8004270 <Graf_irany_feltolt+0x600>)
 800410e:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8004112:	3304      	adds	r3, #4
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][0] = 0;
 8004118:	4b55      	ldr	r3, [pc, #340]	; (8004270 <Graf_irany_feltolt+0x600>)
 800411a:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 800411e:	3360      	adds	r3, #96	; 0x60
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][1] = 2;
 8004124:	4b52      	ldr	r3, [pc, #328]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004126:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 800412a:	3364      	adds	r3, #100	; 0x64
 800412c:	2202      	movs	r2, #2
 800412e:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][2] = 0;
 8004130:	4b4f      	ldr	r3, [pc, #316]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004132:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8004136:	3368      	adds	r3, #104	; 0x68
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
	graf_irany[23][32][3] = 0;
 800413c:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <Graf_irany_feltolt+0x600>)
 800413e:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8004142:	336c      	adds	r3, #108	; 0x6c
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
	//graf_irany[23][32][4] = 0;
	//graf_irany[23][32][5] = 0;
	//graf_irany[23][32][6] = 0;
	graf_irany[24][12][0] = 2;
 8004148:	4b49      	ldr	r3, [pc, #292]	; (8004270 <Graf_irany_feltolt+0x600>)
 800414a:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 800414e:	2202      	movs	r2, #2
 8004150:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][1] = 2;
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004154:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8004158:	3304      	adds	r3, #4
 800415a:	2202      	movs	r2, #2
 800415c:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][2] = 0;
 800415e:	4b44      	ldr	r3, [pc, #272]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004160:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8004164:	3308      	adds	r3, #8
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
	graf_irany[24][12][3] = 1;
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <Graf_irany_feltolt+0x600>)
 800416c:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8004170:	330c      	adds	r3, #12
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][0] = 2;
 8004176:	4b3e      	ldr	r3, [pc, #248]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004178:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800417c:	2202      	movs	r2, #2
 800417e:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][1] = 2;
 8004180:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004182:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8004186:	3304      	adds	r3, #4
 8004188:	2202      	movs	r2, #2
 800418a:	601a      	str	r2, [r3, #0]
	graf_irany[24][16][2] = 2;
 800418c:	4b38      	ldr	r3, [pc, #224]	; (8004270 <Graf_irany_feltolt+0x600>)
 800418e:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 8004192:	3308      	adds	r3, #8
 8004194:	2202      	movs	r2, #2
 8004196:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][0] = 2;
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <Graf_irany_feltolt+0x600>)
 800419a:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 800419e:	3340      	adds	r3, #64	; 0x40
 80041a0:	2202      	movs	r2, #2
 80041a2:	601a      	str	r2, [r3, #0]
	graf_irany[24][18][1] = 0;
 80041a4:	4b32      	ldr	r3, [pc, #200]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041a6:	f503 43ca 	add.w	r3, r3, #25856	; 0x6500
 80041aa:	3344      	adds	r3, #68	; 0x44
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
	graf_irany[24][20][0] = 0;
 80041b0:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041b2:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
	graf_irany[24][22][0] = 1; 	// L csucs kesz
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041bc:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 80041c0:	3340      	adds	r3, #64	; 0x40
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][0] = 0;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041c8:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80041cc:	3340      	adds	r3, #64	; 0x40
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
	graf_irany[25][29][1] = 0;
 80041d2:	4b27      	ldr	r3, [pc, #156]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041d4:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80041d8:	3344      	adds	r3, #68	; 0x44
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][0] = 1;
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041e0:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041e4:	3320      	adds	r3, #32
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][1] = 2;
 80041ea:	4b21      	ldr	r3, [pc, #132]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041ec:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	2202      	movs	r2, #2
 80041f4:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][2] = 0;
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <Graf_irany_feltolt+0x600>)
 80041f8:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 80041fc:	3328      	adds	r3, #40	; 0x28
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
	graf_irany[25][32][3] = 0;
 8004202:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004204:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8004208:	332c      	adds	r3, #44	; 0x2c
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
	//graf_irany[25][32][4] = 0;
	//graf_irany[25][32][5] = 0;
	//graf_irany[25][32][6] = 0;
	graf_irany[26][12][0] = 2;
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004210:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 8004214:	3340      	adds	r3, #64	; 0x40
 8004216:	2202      	movs	r2, #2
 8004218:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][1] = 2;
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <Graf_irany_feltolt+0x600>)
 800421c:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 8004220:	3344      	adds	r3, #68	; 0x44
 8004222:	2202      	movs	r2, #2
 8004224:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][2] = 0;
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004228:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 800422c:	3348      	adds	r3, #72	; 0x48
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
	graf_irany[26][12][3] = 1;
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004234:	f503 43d9 	add.w	r3, r3, #27776	; 0x6c80
 8004238:	334c      	adds	r3, #76	; 0x4c
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][0] = 2;
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004240:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8004244:	3340      	adds	r3, #64	; 0x40
 8004246:	2202      	movs	r2, #2
 8004248:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][1] = 2;
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <Graf_irany_feltolt+0x600>)
 800424c:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8004250:	3344      	adds	r3, #68	; 0x44
 8004252:	2202      	movs	r2, #2
 8004254:	601a      	str	r2, [r3, #0]
	graf_irany[26][16][2] = 2;
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004258:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 800425c:	3348      	adds	r3, #72	; 0x48
 800425e:	2202      	movs	r2, #2
 8004260:	601a      	str	r2, [r3, #0]
	graf_irany[26][18][0] = 2;
 8004262:	4b03      	ldr	r3, [pc, #12]	; (8004270 <Graf_irany_feltolt+0x600>)
 8004264:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004268:	2202      	movs	r2, #2
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e002      	b.n	8004274 <Graf_irany_feltolt+0x604>
 800426e:	bf00      	nop
 8004270:	2000173c 	.word	0x2000173c
	graf_irany[26][18][1] = 0;
 8004274:	4b51      	ldr	r3, [pc, #324]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004276:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 800427a:	3304      	adds	r3, #4
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
	graf_irany[26][20][0] = 0;
 8004280:	4b4e      	ldr	r3, [pc, #312]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004282:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004286:	3340      	adds	r3, #64	; 0x40
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
	graf_irany[26][22][0] = 1;
 800428c:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800428e:	f503 43dc 	add.w	r3, r3, #28160	; 0x6e00
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][0] = 2;
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004298:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 800429c:	3340      	adds	r3, #64	; 0x40
 800429e:	2202      	movs	r2, #2
 80042a0:	601a      	str	r2, [r3, #0]
	graf_irany[27][31][1] = 2;
 80042a2:	4b46      	ldr	r3, [pc, #280]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042a4:	f503 43e6 	add.w	r3, r3, #29440	; 0x7300
 80042a8:	3344      	adds	r3, #68	; 0x44
 80042aa:	2202      	movs	r2, #2
 80042ac:	601a      	str	r2, [r3, #0]
	//graf_irany[27][31][2] = 2;
	//graf_irany[27][31][3] = 2;
	//graf_irany[27][31][4] = 2;
	graf_irany[28][12][0] = 2;
 80042ae:	4b43      	ldr	r3, [pc, #268]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042b0:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80042b4:	2202      	movs	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][1] = 2;
 80042b8:	4b40      	ldr	r3, [pc, #256]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042ba:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80042be:	3304      	adds	r3, #4
 80042c0:	2202      	movs	r2, #2
 80042c2:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][2] = 0;
 80042c4:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042c6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80042ca:	3308      	adds	r3, #8
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
	graf_irany[28][12][3] = 1;
 80042d0:	4b3a      	ldr	r3, [pc, #232]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042d2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80042d6:	330c      	adds	r3, #12
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][0] = 2;
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042de:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042e2:	2202      	movs	r2, #2
 80042e4:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][1] = 2;
 80042e6:	4b35      	ldr	r3, [pc, #212]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042e8:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042ec:	3304      	adds	r3, #4
 80042ee:	2202      	movs	r2, #2
 80042f0:	601a      	str	r2, [r3, #0]
	graf_irany[28][16][2] = 2;
 80042f2:	4b32      	ldr	r3, [pc, #200]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80042f4:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 80042f8:	3308      	adds	r3, #8
 80042fa:	2202      	movs	r2, #2
 80042fc:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][0] = 2;
 80042fe:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004300:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8004304:	3340      	adds	r3, #64	; 0x40
 8004306:	2202      	movs	r2, #2
 8004308:	601a      	str	r2, [r3, #0]
	graf_irany[28][18][1] = 0;
 800430a:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800430c:	f503 43eb 	add.w	r3, r3, #30080	; 0x7580
 8004310:	3344      	adds	r3, #68	; 0x44
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	graf_irany[28][20][0] = 0;
 8004316:	4b29      	ldr	r3, [pc, #164]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004318:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
	graf_irany[28][22][0] = 1;
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004322:	f503 43ec 	add.w	r3, r3, #30208	; 0x7600
 8004326:	3340      	adds	r3, #64	; 0x40
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][0] = 2;
 800432c:	4b23      	ldr	r3, [pc, #140]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800432e:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8004332:	3320      	adds	r3, #32
 8004334:	2202      	movs	r2, #2
 8004336:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][1] = 0;
 8004338:	4b20      	ldr	r3, [pc, #128]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800433a:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 800433e:	3324      	adds	r3, #36	; 0x24
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
	graf_irany[29][32][2] = 0;
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004346:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 800434a:	3328      	adds	r3, #40	; 0x28
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
	//graf_irany[29][32][3] = 0;
	//graf_irany[29][32][4] = 0;
	//graf_irany[29][32][5] = 0;
	graf_irany[30][29][0] = 0;
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004352:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
 8004356:	3360      	adds	r3, #96	; 0x60
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][0] = 2;
 800435c:	4b17      	ldr	r3, [pc, #92]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800435e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004362:	3340      	adds	r3, #64	; 0x40
 8004364:	2202      	movs	r2, #2
 8004366:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][1] = 0;
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800436a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800436e:	3344      	adds	r3, #68	; 0x44
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
	graf_irany[30][32][2] = 0;
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004376:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800437a:	3348      	adds	r3, #72	; 0x48
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
	//graf_irany[30][32][3] = 0;
	//graf_irany[30][32][4] = 0;
	//graf_irany[30][32][5] = 0;
	graf_irany[31][24][0] = 0;
 8004380:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <Graf_irany_feltolt+0x74c>)
 8004382:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8004386:	33e0      	adds	r3, #224	; 0xe0
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
	graf_irany[31][24][1] = 2;
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800438e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8004392:	33e4      	adds	r3, #228	; 0xe4
 8004394:	2202      	movs	r2, #2
 8004396:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][0] = 0;
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <Graf_irany_feltolt+0x74c>)
 800439a:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 800439e:	3320      	adds	r3, #32
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
	graf_irany[31][26][1] = 0;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <Graf_irany_feltolt+0x74c>)
 80043a6:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 80043aa:	3324      	adds	r3, #36	; 0x24
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
	// graf_irany[32][28][0] = -1;		egyenes ut vezet
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	2000173c 	.word	0x2000173c

080043c0 <Kapuk_letilt>:

void Kapuk_letilt(void) {
 80043c0:	b480      	push	{r7}
 80043c2:	b091      	sub	sp, #68	; 0x44
 80043c4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 6; i++) {
 80043c6:	2300      	movs	r3, #0
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ca:	e1a4      	b.n	8004716 <Kapuk_letilt+0x356>
		if			(kapuk[i] == 'a') {
 80043cc:	4a96      	ldr	r2, [pc, #600]	; (8004628 <Kapuk_letilt+0x268>)
 80043ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d0:	4413      	add	r3, r2
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b61      	cmp	r3, #97	; 0x61
 80043d6:	d115      	bne.n	8004404 <Kapuk_letilt+0x44>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043d8:	2301      	movs	r3, #1
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
 80043dc:	e00e      	b.n	80043fc <Kapuk_letilt+0x3c>
				graf_csucs[1][j] = 5000000;
 80043de:	4a93      	ldr	r2, [pc, #588]	; (800462c <Kapuk_letilt+0x26c>)
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	3321      	adds	r3, #33	; 0x21
 80043e4:	4992      	ldr	r1, [pc, #584]	; (8004630 <Kapuk_letilt+0x270>)
 80043e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[2][j] = 5000000;
 80043ea:	4a90      	ldr	r2, [pc, #576]	; (800462c <Kapuk_letilt+0x26c>)
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	3342      	adds	r3, #66	; 0x42
 80043f0:	498f      	ldr	r1, [pc, #572]	; (8004630 <Kapuk_letilt+0x270>)
 80043f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	3301      	adds	r3, #1
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	2b20      	cmp	r3, #32
 8004400:	dded      	ble.n	80043de <Kapuk_letilt+0x1e>
 8004402:	e185      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'b') {
 8004404:	4a88      	ldr	r2, [pc, #544]	; (8004628 <Kapuk_letilt+0x268>)
 8004406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004408:	4413      	add	r3, r2
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b62      	cmp	r3, #98	; 0x62
 800440e:	d115      	bne.n	800443c <Kapuk_letilt+0x7c>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004410:	2301      	movs	r3, #1
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
 8004414:	e00e      	b.n	8004434 <Kapuk_letilt+0x74>
				graf_csucs[3][j] = 5000000;
 8004416:	4a85      	ldr	r2, [pc, #532]	; (800462c <Kapuk_letilt+0x26c>)
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	3363      	adds	r3, #99	; 0x63
 800441c:	4984      	ldr	r1, [pc, #528]	; (8004630 <Kapuk_letilt+0x270>)
 800441e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[4][j] = 5000000;
 8004422:	4a82      	ldr	r2, [pc, #520]	; (800462c <Kapuk_letilt+0x26c>)
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	3384      	adds	r3, #132	; 0x84
 8004428:	4981      	ldr	r1, [pc, #516]	; (8004630 <Kapuk_letilt+0x270>)
 800442a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800442e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004430:	3301      	adds	r3, #1
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	2b20      	cmp	r3, #32
 8004438:	dded      	ble.n	8004416 <Kapuk_letilt+0x56>
 800443a:	e169      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'c') {
 800443c:	4a7a      	ldr	r2, [pc, #488]	; (8004628 <Kapuk_letilt+0x268>)
 800443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004440:	4413      	add	r3, r2
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b63      	cmp	r3, #99	; 0x63
 8004446:	d115      	bne.n	8004474 <Kapuk_letilt+0xb4>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004448:	2301      	movs	r3, #1
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
 800444c:	e00e      	b.n	800446c <Kapuk_letilt+0xac>
				graf_csucs[5][j] = 5000000;
 800444e:	4a77      	ldr	r2, [pc, #476]	; (800462c <Kapuk_letilt+0x26c>)
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	33a5      	adds	r3, #165	; 0xa5
 8004454:	4976      	ldr	r1, [pc, #472]	; (8004630 <Kapuk_letilt+0x270>)
 8004456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[6][j] = 5000000;
 800445a:	4a74      	ldr	r2, [pc, #464]	; (800462c <Kapuk_letilt+0x26c>)
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	33c6      	adds	r3, #198	; 0xc6
 8004460:	4973      	ldr	r1, [pc, #460]	; (8004630 <Kapuk_letilt+0x270>)
 8004462:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	3301      	adds	r3, #1
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2b20      	cmp	r3, #32
 8004470:	dded      	ble.n	800444e <Kapuk_letilt+0x8e>
 8004472:	e14d      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'd') {
 8004474:	4a6c      	ldr	r2, [pc, #432]	; (8004628 <Kapuk_letilt+0x268>)
 8004476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004478:	4413      	add	r3, r2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d116      	bne.n	80044ae <Kapuk_letilt+0xee>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004480:	2301      	movs	r3, #1
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004484:	e00f      	b.n	80044a6 <Kapuk_letilt+0xe6>
				graf_csucs[7][j] = 5000000;
 8004486:	4a69      	ldr	r2, [pc, #420]	; (800462c <Kapuk_letilt+0x26c>)
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	33e7      	adds	r3, #231	; 0xe7
 800448c:	4968      	ldr	r1, [pc, #416]	; (8004630 <Kapuk_letilt+0x270>)
 800448e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[8][j] = 5000000;
 8004492:	4a66      	ldr	r2, [pc, #408]	; (800462c <Kapuk_letilt+0x26c>)
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800449a:	4965      	ldr	r1, [pc, #404]	; (8004630 <Kapuk_letilt+0x270>)
 800449c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	3301      	adds	r3, #1
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	ddec      	ble.n	8004486 <Kapuk_letilt+0xc6>
 80044ac:	e130      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'e') {
 80044ae:	4a5e      	ldr	r2, [pc, #376]	; (8004628 <Kapuk_letilt+0x268>)
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	4413      	add	r3, r2
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b65      	cmp	r3, #101	; 0x65
 80044b8:	d117      	bne.n	80044ea <Kapuk_letilt+0x12a>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044ba:	2301      	movs	r3, #1
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044be:	e010      	b.n	80044e2 <Kapuk_letilt+0x122>
				graf_csucs[9][j] = 5000000;
 80044c0:	4a5a      	ldr	r2, [pc, #360]	; (800462c <Kapuk_letilt+0x26c>)
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	f203 1329 	addw	r3, r3, #297	; 0x129
 80044c8:	4959      	ldr	r1, [pc, #356]	; (8004630 <Kapuk_letilt+0x270>)
 80044ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[10][j] = 5000000;
 80044ce:	4a57      	ldr	r2, [pc, #348]	; (800462c <Kapuk_letilt+0x26c>)
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 80044d6:	4956      	ldr	r1, [pc, #344]	; (8004630 <Kapuk_letilt+0x270>)
 80044d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	3301      	adds	r3, #1
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	ddeb      	ble.n	80044c0 <Kapuk_letilt+0x100>
 80044e8:	e112      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'f') {
 80044ea:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <Kapuk_letilt+0x268>)
 80044ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b66      	cmp	r3, #102	; 0x66
 80044f4:	d117      	bne.n	8004526 <Kapuk_letilt+0x166>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80044f6:	2301      	movs	r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	e010      	b.n	800451e <Kapuk_letilt+0x15e>
				graf_csucs[11][j] = 5000000;
 80044fc:	4a4b      	ldr	r2, [pc, #300]	; (800462c <Kapuk_letilt+0x26c>)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004504:	494a      	ldr	r1, [pc, #296]	; (8004630 <Kapuk_letilt+0x270>)
 8004506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[12][j] = 5000000;
 800450a:	4a48      	ldr	r2, [pc, #288]	; (800462c <Kapuk_letilt+0x26c>)
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004512:	4947      	ldr	r1, [pc, #284]	; (8004630 <Kapuk_letilt+0x270>)
 8004514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2b20      	cmp	r3, #32
 8004522:	ddeb      	ble.n	80044fc <Kapuk_letilt+0x13c>
 8004524:	e0f4      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'g') {
 8004526:	4a40      	ldr	r2, [pc, #256]	; (8004628 <Kapuk_letilt+0x268>)
 8004528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b67      	cmp	r3, #103	; 0x67
 8004530:	d117      	bne.n	8004562 <Kapuk_letilt+0x1a2>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004532:	2301      	movs	r3, #1
 8004534:	623b      	str	r3, [r7, #32]
 8004536:	e010      	b.n	800455a <Kapuk_letilt+0x19a>
				graf_csucs[13][j] = 5000000;
 8004538:	4a3c      	ldr	r2, [pc, #240]	; (800462c <Kapuk_letilt+0x26c>)
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f203 13ad 	addw	r3, r3, #429	; 0x1ad
 8004540:	493b      	ldr	r1, [pc, #236]	; (8004630 <Kapuk_letilt+0x270>)
 8004542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[14][j] = 5000000;
 8004546:	4a39      	ldr	r2, [pc, #228]	; (800462c <Kapuk_letilt+0x26c>)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800454e:	4938      	ldr	r1, [pc, #224]	; (8004630 <Kapuk_letilt+0x270>)
 8004550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	3301      	adds	r3, #1
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2b20      	cmp	r3, #32
 800455e:	ddeb      	ble.n	8004538 <Kapuk_letilt+0x178>
 8004560:	e0d6      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'h') {
 8004562:	4a31      	ldr	r2, [pc, #196]	; (8004628 <Kapuk_letilt+0x268>)
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	4413      	add	r3, r2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b68      	cmp	r3, #104	; 0x68
 800456c:	d117      	bne.n	800459e <Kapuk_letilt+0x1de>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	e010      	b.n	8004596 <Kapuk_letilt+0x1d6>
				graf_csucs[15][j] = 5000000;
 8004574:	4a2d      	ldr	r2, [pc, #180]	; (800462c <Kapuk_letilt+0x26c>)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 800457c:	492c      	ldr	r1, [pc, #176]	; (8004630 <Kapuk_letilt+0x270>)
 800457e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[16][j] = 5000000;
 8004582:	4a2a      	ldr	r2, [pc, #168]	; (800462c <Kapuk_letilt+0x26c>)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800458a:	4929      	ldr	r1, [pc, #164]	; (8004630 <Kapuk_letilt+0x270>)
 800458c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3301      	adds	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b20      	cmp	r3, #32
 800459a:	ddeb      	ble.n	8004574 <Kapuk_letilt+0x1b4>
 800459c:	e0b8      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'i') {
 800459e:	4a22      	ldr	r2, [pc, #136]	; (8004628 <Kapuk_letilt+0x268>)
 80045a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a2:	4413      	add	r3, r2
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b69      	cmp	r3, #105	; 0x69
 80045a8:	d117      	bne.n	80045da <Kapuk_letilt+0x21a>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045aa:	2301      	movs	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e010      	b.n	80045d2 <Kapuk_letilt+0x212>
				graf_csucs[17][j] = 5000000;
 80045b0:	4a1e      	ldr	r2, [pc, #120]	; (800462c <Kapuk_letilt+0x26c>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f203 2331 	addw	r3, r3, #561	; 0x231
 80045b8:	491d      	ldr	r1, [pc, #116]	; (8004630 <Kapuk_letilt+0x270>)
 80045ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[18][j] = 5000000;
 80045be:	4a1b      	ldr	r2, [pc, #108]	; (800462c <Kapuk_letilt+0x26c>)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f203 2352 	addw	r3, r3, #594	; 0x252
 80045c6:	491a      	ldr	r1, [pc, #104]	; (8004630 <Kapuk_letilt+0x270>)
 80045c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	ddeb      	ble.n	80045b0 <Kapuk_letilt+0x1f0>
 80045d8:	e09a      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'j') {
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <Kapuk_letilt+0x268>)
 80045dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045de:	4413      	add	r3, r2
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b6a      	cmp	r3, #106	; 0x6a
 80045e4:	d117      	bne.n	8004616 <Kapuk_letilt+0x256>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80045e6:	2301      	movs	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e010      	b.n	800460e <Kapuk_letilt+0x24e>
				graf_csucs[19][j] = 5000000;
 80045ec:	4a0f      	ldr	r2, [pc, #60]	; (800462c <Kapuk_letilt+0x26c>)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f203 2373 	addw	r3, r3, #627	; 0x273
 80045f4:	490e      	ldr	r1, [pc, #56]	; (8004630 <Kapuk_letilt+0x270>)
 80045f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[20][j] = 5000000;
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <Kapuk_letilt+0x26c>)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004602:	490b      	ldr	r1, [pc, #44]	; (8004630 <Kapuk_letilt+0x270>)
 8004604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	3301      	adds	r3, #1
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b20      	cmp	r3, #32
 8004612:	ddeb      	ble.n	80045ec <Kapuk_letilt+0x22c>
 8004614:	e07c      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'k') {
 8004616:	4a04      	ldr	r2, [pc, #16]	; (8004628 <Kapuk_letilt+0x268>)
 8004618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461a:	4413      	add	r3, r2
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b6b      	cmp	r3, #107	; 0x6b
 8004620:	d11d      	bne.n	800465e <Kapuk_letilt+0x29e>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004622:	2301      	movs	r3, #1
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e016      	b.n	8004656 <Kapuk_letilt+0x296>
 8004628:	20000158 	.word	0x20000158
 800462c:	200004c8 	.word	0x200004c8
 8004630:	004c4b40 	.word	0x004c4b40
				graf_csucs[21][j] = 5000000;
 8004634:	4a3d      	ldr	r2, [pc, #244]	; (800472c <Kapuk_letilt+0x36c>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f203 23b5 	addw	r3, r3, #693	; 0x2b5
 800463c:	493c      	ldr	r1, [pc, #240]	; (8004730 <Kapuk_letilt+0x370>)
 800463e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[22][j] = 5000000;
 8004642:	4a3a      	ldr	r2, [pc, #232]	; (800472c <Kapuk_letilt+0x36c>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 800464a:	4939      	ldr	r1, [pc, #228]	; (8004730 <Kapuk_letilt+0x370>)
 800464c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3301      	adds	r3, #1
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b20      	cmp	r3, #32
 800465a:	ddeb      	ble.n	8004634 <Kapuk_letilt+0x274>
 800465c:	e058      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'l') {
 800465e:	4a35      	ldr	r2, [pc, #212]	; (8004734 <Kapuk_letilt+0x374>)
 8004660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004662:	4413      	add	r3, r2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b6c      	cmp	r3, #108	; 0x6c
 8004668:	d117      	bne.n	800469a <Kapuk_letilt+0x2da>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800466a:	2301      	movs	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e010      	b.n	8004692 <Kapuk_letilt+0x2d2>
				graf_csucs[23][j] = 5000000;
 8004670:	4a2e      	ldr	r2, [pc, #184]	; (800472c <Kapuk_letilt+0x36c>)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f203 23f7 	addw	r3, r3, #759	; 0x2f7
 8004678:	492d      	ldr	r1, [pc, #180]	; (8004730 <Kapuk_letilt+0x370>)
 800467a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[24][j] = 5000000;
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <Kapuk_letilt+0x36c>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004686:	492a      	ldr	r1, [pc, #168]	; (8004730 <Kapuk_letilt+0x370>)
 8004688:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3301      	adds	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b20      	cmp	r3, #32
 8004696:	ddeb      	ble.n	8004670 <Kapuk_letilt+0x2b0>
 8004698:	e03a      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'm') {
 800469a:	4a26      	ldr	r2, [pc, #152]	; (8004734 <Kapuk_letilt+0x374>)
 800469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b6d      	cmp	r3, #109	; 0x6d
 80046a4:	d117      	bne.n	80046d6 <Kapuk_letilt+0x316>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80046a6:	2301      	movs	r3, #1
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	e010      	b.n	80046ce <Kapuk_letilt+0x30e>
				graf_csucs[25][j] = 5000000;
 80046ac:	4a1f      	ldr	r2, [pc, #124]	; (800472c <Kapuk_letilt+0x36c>)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f203 3339 	addw	r3, r3, #825	; 0x339
 80046b4:	491e      	ldr	r1, [pc, #120]	; (8004730 <Kapuk_letilt+0x370>)
 80046b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[26][j] = 5000000;
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <Kapuk_letilt+0x36c>)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f203 335a 	addw	r3, r3, #858	; 0x35a
 80046c2:	491b      	ldr	r1, [pc, #108]	; (8004730 <Kapuk_letilt+0x370>)
 80046c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	ddeb      	ble.n	80046ac <Kapuk_letilt+0x2ec>
 80046d4:	e01c      	b.n	8004710 <Kapuk_letilt+0x350>
			}
		} else if	(kapuk[i] == 'n') {
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <Kapuk_letilt+0x374>)
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b6e      	cmp	r3, #110	; 0x6e
 80046e0:	d116      	bne.n	8004710 <Kapuk_letilt+0x350>
			for(int j = 1; j < CSUCS_SZAM; j++) {
 80046e2:	2301      	movs	r3, #1
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	e010      	b.n	800470a <Kapuk_letilt+0x34a>
				graf_csucs[27][j] = 5000000;
 80046e8:	4a10      	ldr	r2, [pc, #64]	; (800472c <Kapuk_letilt+0x36c>)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f203 337b 	addw	r3, r3, #891	; 0x37b
 80046f0:	490f      	ldr	r1, [pc, #60]	; (8004730 <Kapuk_letilt+0x370>)
 80046f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				graf_csucs[28][j] = 5000000;
 80046f6:	4a0d      	ldr	r2, [pc, #52]	; (800472c <Kapuk_letilt+0x36c>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80046fe:	490c      	ldr	r1, [pc, #48]	; (8004730 <Kapuk_letilt+0x370>)
 8004700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 1; j < CSUCS_SZAM; j++) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3301      	adds	r3, #1
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b20      	cmp	r3, #32
 800470e:	ddeb      	ble.n	80046e8 <Kapuk_letilt+0x328>
	for(int i = 0; i < 6; i++) {
 8004710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004712:	3301      	adds	r3, #1
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	2b05      	cmp	r3, #5
 800471a:	f77f ae57 	ble.w	80043cc <Kapuk_letilt+0xc>
			}
		}
	}
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	3744      	adds	r7, #68	; 0x44
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	200004c8 	.word	0x200004c8
 8004730:	004c4b40 	.word	0x004c4b40
 8004734:	20000158 	.word	0x20000158

08004738 <Iranyok_torlo>:

void Iranyok_torlo(void) {
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++) {
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	e007      	b.n	8004754 <Iranyok_torlo+0x1c>
		iranyok[i] = 9;				// 9: nem igazi iranyt jelol
 8004744:	4a08      	ldr	r2, [pc, #32]	; (8004768 <Iranyok_torlo+0x30>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	2209      	movs	r2, #9
 800474c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3301      	adds	r3, #1
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b63      	cmp	r3, #99	; 0x63
 8004758:	ddf4      	ble.n	8004744 <Iranyok_torlo+0xc>
	}
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20000278 	.word	0x20000278

0800476c <Iranyok_osszeallito>:

void Iranyok_osszeallito(void) {
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
	iranyok_elem = 0;
 8004772:	4b31      	ldr	r3, [pc, #196]	; (8004838 <Iranyok_osszeallito+0xcc>)
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
	for(int i = 19; 0 < i; i--) {
 8004778:	2313      	movs	r3, #19
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	e050      	b.n	8004820 <Iranyok_osszeallito+0xb4>
		if(road[i] != -1) {
 800477e:	4a2f      	ldr	r2, [pc, #188]	; (800483c <Iranyok_osszeallito+0xd0>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d046      	beq.n	800481a <Iranyok_osszeallito+0xae>
			if(road[i] == 29) {
 800478c:	4a2b      	ldr	r2, [pc, #172]	; (800483c <Iranyok_osszeallito+0xd0>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004794:	2b1d      	cmp	r3, #29
 8004796:	d102      	bne.n	800479e <Iranyok_osszeallito+0x32>
				tolatas = true;
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <Iranyok_osszeallito+0xd4>)
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
			}
			for(int j = 0; j < 8; j++) {
 800479e:	2300      	movs	r3, #0
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	e037      	b.n	8004814 <Iranyok_osszeallito+0xa8>
				// road[i]-bol road[i-1]-be "0 2 0" beirni az iranyokba
				if(graf_irany[ road[i] ] [ road[i-1] ] [ j ]  != -1) {
 80047a4:	4a25      	ldr	r2, [pc, #148]	; (800483c <Iranyok_osszeallito+0xd0>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	4922      	ldr	r1, [pc, #136]	; (800483c <Iranyok_osszeallito+0xd0>)
 80047b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047b6:	4823      	ldr	r0, [pc, #140]	; (8004844 <Iranyok_osszeallito+0xd8>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	015b      	lsls	r3, r3, #5
 80047bc:	4413      	add	r3, r2
 80047be:	440b      	add	r3, r1
 80047c0:	00da      	lsls	r2, r3, #3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	4413      	add	r3, r2
 80047c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d01e      	beq.n	800480e <Iranyok_osszeallito+0xa2>
					iranyok[iranyok_elem] = graf_irany[ road[i] ] [ road[i-1] ] [ j ];
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <Iranyok_osszeallito+0xd0>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	4917      	ldr	r1, [pc, #92]	; (800483c <Iranyok_osszeallito+0xd0>)
 80047de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047e2:	4818      	ldr	r0, [pc, #96]	; (8004844 <Iranyok_osszeallito+0xd8>)
 80047e4:	4613      	mov	r3, r2
 80047e6:	015b      	lsls	r3, r3, #5
 80047e8:	4413      	add	r3, r2
 80047ea:	440b      	add	r3, r1
 80047ec:	00da      	lsls	r2, r3, #3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <Iranyok_osszeallito+0xcc>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	b2c9      	uxtb	r1, r1
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <Iranyok_osszeallito+0xdc>)
 8004800:	5499      	strb	r1, [r3, r2]
					iranyok_elem++;
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <Iranyok_osszeallito+0xcc>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	3301      	adds	r3, #1
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <Iranyok_osszeallito+0xcc>)
 800480c:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 8; j++) {
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b07      	cmp	r3, #7
 8004818:	ddc4      	ble.n	80047a4 <Iranyok_osszeallito+0x38>
	for(int i = 19; 0 < i; i--) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3b01      	subs	r3, #1
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	dcab      	bgt.n	800477e <Iranyok_osszeallito+0x12>
				}
			}
		}
	}
	keresztezodes_szam = 0;
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <Iranyok_osszeallito+0xe0>)
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20000263 	.word	0x20000263
 800483c:	20000160 	.word	0x20000160
 8004840:	2000024c 	.word	0x2000024c
 8004844:	2000173c 	.word	0x2000173c
 8004848:	20000278 	.word	0x20000278
 800484c:	20000248 	.word	0x20000248

08004850 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004860:	d109      	bne.n	8004876 <HAL_GPIO_EXTI_Callback+0x26>
		btnEnable = !btnEnable;
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_GPIO_EXTI_Callback+0x34>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_GPIO_EXTI_Callback+0x34>)
 8004874:	701a      	strb	r2, [r3, #0]
		/*szervoSzog += 90;
		if(szervoSzog > 200)
			szervoSzog = 0;
		SERVO_MoveTo(SZERVO, szervoSzog);*/
	}
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	200001e8 	.word	0x200001e8

08004888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800488c:	b672      	cpsid	i
}
 800488e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004890:	e7fe      	b.n	8004890 <Error_Handler+0x8>

08004892 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <HAL_MspInit+0x4c>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	4a0f      	ldr	r2, [pc, #60]	; (80048f4 <HAL_MspInit+0x4c>)
 80048b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048bc:	6453      	str	r3, [r2, #68]	; 0x44
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <HAL_MspInit+0x4c>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_MspInit+0x4c>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <HAL_MspInit+0x4c>)
 80048d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6413      	str	r3, [r2, #64]	; 0x40
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_MspInit+0x4c>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80048e6:	2006      	movs	r0, #6
 80048e8:	f000 fda0 	bl	800542c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40023800 	.word	0x40023800

080048f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a19      	ldr	r2, [pc, #100]	; (800497c <HAL_I2C_MspInit+0x84>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d12c      	bne.n	8004974 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	4b18      	ldr	r3, [pc, #96]	; (8004980 <HAL_I2C_MspInit+0x88>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_I2C_MspInit+0x88>)
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	6313      	str	r3, [r2, #48]	; 0x30
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_I2C_MspInit+0x88>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800493a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800493c:	2312      	movs	r3, #18
 800493e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004944:	2303      	movs	r3, #3
 8004946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004948:	2304      	movs	r3, #4
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	4619      	mov	r1, r3
 8004952:	480c      	ldr	r0, [pc, #48]	; (8004984 <HAL_I2C_MspInit+0x8c>)
 8004954:	f001 fac4 	bl	8005ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_I2C_MspInit+0x88>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_I2C_MspInit+0x88>)
 8004962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004966:	6413      	str	r3, [r2, #64]	; 0x40
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_I2C_MspInit+0x88>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004974:	bf00      	nop
 8004976:	3728      	adds	r7, #40	; 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40005400 	.word	0x40005400
 8004980:	40023800 	.word	0x40023800
 8004984:	40020400 	.word	0x40020400

08004988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b090      	sub	sp, #64	; 0x40
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a98      	ldr	r2, [pc, #608]	; (8004c08 <HAL_SPI_MspInit+0x280>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d12c      	bne.n	8004a04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ae:	4b97      	ldr	r3, [pc, #604]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	4a96      	ldr	r2, [pc, #600]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 80049b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049b8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ba:	4b94      	ldr	r3, [pc, #592]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	4b90      	ldr	r3, [pc, #576]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	4a8f      	ldr	r2, [pc, #572]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
 80049d6:	4b8d      	ldr	r3, [pc, #564]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80049e2:	23e0      	movs	r3, #224	; 0xe0
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ee:	2303      	movs	r3, #3
 80049f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80049f2:	2305      	movs	r3, #5
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049fa:	4619      	mov	r1, r3
 80049fc:	4884      	ldr	r0, [pc, #528]	; (8004c10 <HAL_SPI_MspInit+0x288>)
 80049fe:	f001 fa6f 	bl	8005ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004a02:	e0fd      	b.n	8004c00 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a82      	ldr	r2, [pc, #520]	; (8004c14 <HAL_SPI_MspInit+0x28c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d14b      	bne.n	8004aa6 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	4b7e      	ldr	r3, [pc, #504]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	4a7d      	ldr	r2, [pc, #500]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1e:	4b7b      	ldr	r3, [pc, #492]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	4b77      	ldr	r3, [pc, #476]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4a76      	ldr	r2, [pc, #472]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	4b74      	ldr	r3, [pc, #464]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	4b70      	ldr	r3, [pc, #448]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4a6f      	ldr	r2, [pc, #444]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	6313      	str	r3, [r2, #48]	; 0x30
 8004a56:	4b6d      	ldr	r3, [pc, #436]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004a62:	2302      	movs	r3, #2
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a66:	2302      	movs	r3, #2
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8004a72:	2307      	movs	r3, #7
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4866      	ldr	r0, [pc, #408]	; (8004c18 <HAL_SPI_MspInit+0x290>)
 8004a7e:	f001 fa2f 	bl	8005ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a90:	2303      	movs	r3, #3
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a94:	2305      	movs	r3, #5
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	485f      	ldr	r0, [pc, #380]	; (8004c1c <HAL_SPI_MspInit+0x294>)
 8004aa0:	f001 fa1e 	bl	8005ee0 <HAL_GPIO_Init>
}
 8004aa4:	e0ac      	b.n	8004c00 <HAL_SPI_MspInit+0x278>
  else if(hspi->Instance==SPI3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a5d      	ldr	r2, [pc, #372]	; (8004c20 <HAL_SPI_MspInit+0x298>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	f040 80a7 	bne.w	8004c00 <HAL_SPI_MspInit+0x278>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	4b55      	ldr	r3, [pc, #340]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a54      	ldr	r2, [pc, #336]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b52      	ldr	r3, [pc, #328]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a4d      	ldr	r2, [pc, #308]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004ad8:	f043 0302 	orr.w	r3, r3, #2
 8004adc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ade:	4b4b      	ldr	r3, [pc, #300]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a46      	ldr	r2, [pc, #280]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
 8004afa:	4b44      	ldr	r3, [pc, #272]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004b10:	f043 0304 	orr.w	r3, r3, #4
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_SPI_MspInit+0x284>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b22:	2301      	movs	r3, #1
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b26:	2302      	movs	r3, #2
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004b32:	2307      	movs	r3, #7
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4837      	ldr	r0, [pc, #220]	; (8004c1c <HAL_SPI_MspInit+0x294>)
 8004b3e:	f001 f9cf 	bl	8005ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b50:	2303      	movs	r3, #3
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b54:	2306      	movs	r3, #6
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	482c      	ldr	r0, [pc, #176]	; (8004c10 <HAL_SPI_MspInit+0x288>)
 8004b60:	f001 f9be 	bl	8005ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b72:	2303      	movs	r3, #3
 8004b74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b76:	2306      	movs	r3, #6
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4825      	ldr	r0, [pc, #148]	; (8004c18 <HAL_SPI_MspInit+0x290>)
 8004b82:	f001 f9ad 	bl	8005ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004b86:	2310      	movs	r3, #16
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b92:	2303      	movs	r3, #3
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b96:	2306      	movs	r3, #6
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	481e      	ldr	r0, [pc, #120]	; (8004c1c <HAL_SPI_MspInit+0x294>)
 8004ba2:	f001 f99d 	bl	8005ee0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8004ba6:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_SPI_MspInit+0x2a0>)
 8004baa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb2:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bb4:	2240      	movs	r2, #64	; 0x40
 8004bb6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bbe:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bc6:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bcc:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004bd2:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004be4:	480f      	ldr	r0, [pc, #60]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004be6:	f000 fc91 	bl	800550c <HAL_DMA_Init>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8004bf0:	f7ff fe4a 	bl	8004888 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bf8:	649a      	str	r2, [r3, #72]	; 0x48
 8004bfa:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <HAL_SPI_MspInit+0x29c>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004c00:	bf00      	nop
 8004c02:	3740      	adds	r7, #64	; 0x40
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40013000 	.word	0x40013000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40020000 	.word	0x40020000
 8004c14:	40003800 	.word	0x40003800
 8004c18:	40020800 	.word	0x40020800
 8004c1c:	40020400 	.word	0x40020400
 8004c20:	40003c00 	.word	0x40003c00
 8004c24:	200003dc 	.word	0x200003dc
 8004c28:	40026088 	.word	0x40026088

08004c2c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c34:	f107 0314 	add.w	r3, r7, #20
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	60da      	str	r2, [r3, #12]
 8004c42:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <HAL_TIM_IC_MspInit+0x94>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d134      	bne.n	8004cb8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <HAL_TIM_IC_MspInit+0x98>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <HAL_TIM_IC_MspInit+0x98>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c5e:	4b19      	ldr	r3, [pc, #100]	; (8004cc4 <HAL_TIM_IC_MspInit+0x98>)
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <HAL_TIM_IC_MspInit+0x98>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <HAL_TIM_IC_MspInit+0x98>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_TIM_IC_MspInit+0x98>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c94:	2300      	movs	r3, #0
 8004c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4809      	ldr	r0, [pc, #36]	; (8004cc8 <HAL_TIM_IC_MspInit+0x9c>)
 8004ca4:	f001 f91c 	bl	8005ee0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2100      	movs	r1, #0
 8004cac:	201b      	movs	r0, #27
 8004cae:	f000 fbdd 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004cb2:	201b      	movs	r0, #27
 8004cb4:	f000 fc06 	bl	80054c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004cb8:	bf00      	nop
 8004cba:	3728      	adds	r7, #40	; 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40020000 	.word	0x40020000

08004ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d116      	bne.n	8004d0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
 8004cee:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	201c      	movs	r0, #28
 8004d00:	f000 fbb4 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d04:	201c      	movs	r0, #28
 8004d06:	f000 fbdd 	bl	80054c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004d0a:	e02e      	b.n	8004d6a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <HAL_TIM_Base_MspInit+0xac>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d116      	bne.n	8004d44 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	4b16      	ldr	r3, [pc, #88]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	6453      	str	r3, [r2, #68]	; 0x44
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004d32:	2200      	movs	r2, #0
 8004d34:	2100      	movs	r1, #0
 8004d36:	202e      	movs	r0, #46	; 0x2e
 8004d38:	f000 fb98 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004d3c:	202e      	movs	r0, #46	; 0x2e
 8004d3e:	f000 fbc1 	bl	80054c4 <HAL_NVIC_EnableIRQ>
}
 8004d42:	e012      	b.n	8004d6a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM12)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <HAL_TIM_Base_MspInit+0xb0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10d      	bne.n	8004d6a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_TIM_Base_MspInit+0xa8>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
}
 8004d6a:	bf00      	nop
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40010400 	.word	0x40010400
 8004d7c:	40001800 	.word	0x40001800

08004d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d88:	f107 0314 	add.w	r3, r7, #20
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	605a      	str	r2, [r3, #4]
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a25      	ldr	r2, [pc, #148]	; (8004e34 <HAL_TIM_MspPostInit+0xb4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d11f      	bne.n	8004de2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <HAL_TIM_MspPostInit+0xb8>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <HAL_TIM_MspPostInit+0xb8>)
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	6313      	str	r3, [r2, #48]	; 0x30
 8004db2:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <HAL_TIM_MspPostInit+0xb8>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004dbe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4818      	ldr	r0, [pc, #96]	; (8004e3c <HAL_TIM_MspPostInit+0xbc>)
 8004ddc:	f001 f880 	bl	8005ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004de0:	e023      	b.n	8004e2a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <HAL_TIM_MspPostInit+0xc0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d11e      	bne.n	8004e2a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_TIM_MspPostInit+0xb8>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <HAL_TIM_MspPostInit+0xb8>)
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <HAL_TIM_MspPostInit+0xb8>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004e08:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e16:	2300      	movs	r3, #0
 8004e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004e1a:	2309      	movs	r3, #9
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1e:	f107 0314 	add.w	r3, r7, #20
 8004e22:	4619      	mov	r1, r3
 8004e24:	4807      	ldr	r0, [pc, #28]	; (8004e44 <HAL_TIM_MspPostInit+0xc4>)
 8004e26:	f001 f85b 	bl	8005ee0 <HAL_GPIO_Init>
}
 8004e2a:	bf00      	nop
 8004e2c:	3728      	adds	r7, #40	; 0x28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	40020800 	.word	0x40020800
 8004e40:	40001800 	.word	0x40001800
 8004e44:	40020400 	.word	0x40020400

08004e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08e      	sub	sp, #56	; 0x38
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	60da      	str	r2, [r3, #12]
 8004e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a63      	ldr	r2, [pc, #396]	; (8004ff4 <HAL_UART_MspInit+0x1ac>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d153      	bne.n	8004f12 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	623b      	str	r3, [r7, #32]
 8004e6e:	4b62      	ldr	r3, [pc, #392]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	4a61      	ldr	r2, [pc, #388]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e78:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7a:	4b5f      	ldr	r3, [pc, #380]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e82:	623b      	str	r3, [r7, #32]
 8004e84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	4b5b      	ldr	r3, [pc, #364]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a5a      	ldr	r2, [pc, #360]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b58      	ldr	r3, [pc, #352]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	4b54      	ldr	r3, [pc, #336]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	4a53      	ldr	r2, [pc, #332]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004eac:	f043 0304 	orr.w	r3, r3, #4
 8004eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb2:	4b51      	ldr	r3, [pc, #324]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ece:	2308      	movs	r3, #8
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4848      	ldr	r0, [pc, #288]	; (8004ffc <HAL_UART_MspInit+0x1b4>)
 8004eda:	f001 f801 	bl	8005ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eec:	2303      	movs	r3, #3
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4841      	ldr	r0, [pc, #260]	; (8005000 <HAL_UART_MspInit+0x1b8>)
 8004efc:	f000 fff0 	bl	8005ee0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 2);
 8004f00:	2202      	movs	r2, #2
 8004f02:	2101      	movs	r1, #1
 8004f04:	2034      	movs	r0, #52	; 0x34
 8004f06:	f000 fab1 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004f0a:	2034      	movs	r0, #52	; 0x34
 8004f0c:	f000 fada 	bl	80054c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f10:	e06b      	b.n	8004fea <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3b      	ldr	r2, [pc, #236]	; (8005004 <HAL_UART_MspInit+0x1bc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d135      	bne.n	8004f88 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	4a34      	ldr	r2, [pc, #208]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f26:	f043 0310 	orr.w	r3, r3, #16
 8004f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2c:	4b32      	ldr	r3, [pc, #200]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6313      	str	r3, [r2, #48]	; 0x30
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004f54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f62:	2303      	movs	r3, #3
 8004f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f66:	2307      	movs	r3, #7
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4822      	ldr	r0, [pc, #136]	; (8004ffc <HAL_UART_MspInit+0x1b4>)
 8004f72:	f000 ffb5 	bl	8005ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	2025      	movs	r0, #37	; 0x25
 8004f7c:	f000 fa76 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f80:	2025      	movs	r0, #37	; 0x25
 8004f82:	f000 fa9f 	bl	80054c4 <HAL_NVIC_EnableIRQ>
}
 8004f86:	e030      	b.n	8004fea <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <HAL_UART_MspInit+0x1c0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d12b      	bne.n	8004fea <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <HAL_UART_MspInit+0x1b0>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004fca:	230c      	movs	r3, #12
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fda:	2307      	movs	r3, #7
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4805      	ldr	r0, [pc, #20]	; (8004ffc <HAL_UART_MspInit+0x1b4>)
 8004fe6:	f000 ff7b 	bl	8005ee0 <HAL_GPIO_Init>
}
 8004fea:	bf00      	nop
 8004fec:	3738      	adds	r7, #56	; 0x38
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40004c00 	.word	0x40004c00
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40020000 	.word	0x40020000
 8005000:	40020800 	.word	0x40020800
 8005004:	40011000 	.word	0x40011000
 8005008:	40004400 	.word	0x40004400

0800500c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005010:	e7fe      	b.n	8005010 <NMI_Handler+0x4>

08005012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005012:	b480      	push	{r7}
 8005014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005016:	e7fe      	b.n	8005016 <HardFault_Handler+0x4>

08005018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800501c:	e7fe      	b.n	800501c <MemManage_Handler+0x4>

0800501e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005022:	e7fe      	b.n	8005022 <BusFault_Handler+0x4>

08005024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005028:	e7fe      	b.n	8005028 <UsageFault_Handler+0x4>

0800502a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005046:	b480      	push	{r7}
 8005048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005058:	f000 f8d4 	bl	8005204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800505c:	bf00      	nop
 800505e:	bd80      	pop	{r7, pc}

08005060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <DMA1_Stream5_IRQHandler+0x10>)
 8005066:	f000 fcff 	bl	8005a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	200003dc 	.word	0x200003dc

08005074 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005078:	4802      	ldr	r0, [pc, #8]	; (8005084 <TIM1_CC_IRQHandler+0x10>)
 800507a:	f004 f985 	bl	8009388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000480 	.word	0x20000480

08005088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800508c:	4802      	ldr	r0, [pc, #8]	; (8005098 <TIM2_IRQHandler+0x10>)
 800508e:	f004 f97b 	bl	8009388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20001668 	.word	0x20001668

0800509c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <USART1_IRQHandler+0x10>)
 80050a2:	f006 fa9b 	bl	800b5dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	2000043c 	.word	0x2000043c

080050b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80050b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80050b8:	f001 fa68 	bl	800658c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80050bc:	bf00      	nop
 80050be:	bd80      	pop	{r7, pc}

080050c0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80050c4:	4802      	ldr	r0, [pc, #8]	; (80050d0 <TIM8_CC_IRQHandler+0x10>)
 80050c6:	f004 f95f 	bl	8009388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80050ca:	bf00      	nop
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200002e8 	.word	0x200002e8

080050d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80050d8:	4802      	ldr	r0, [pc, #8]	; (80050e4 <UART4_IRQHandler+0x10>)
 80050da:	f006 fa7f 	bl	800b5dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	200015cc 	.word	0x200015cc

080050e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <SystemInit+0x20>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <SystemInit+0x20>)
 80050f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800510c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005110:	480d      	ldr	r0, [pc, #52]	; (8005148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005112:	490e      	ldr	r1, [pc, #56]	; (800514c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005114:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005118:	e002      	b.n	8005120 <LoopCopyDataInit>

0800511a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800511a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800511c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800511e:	3304      	adds	r3, #4

08005120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005124:	d3f9      	bcc.n	800511a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005126:	4a0b      	ldr	r2, [pc, #44]	; (8005154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005128:	4c0b      	ldr	r4, [pc, #44]	; (8005158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800512a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800512c:	e001      	b.n	8005132 <LoopFillZerobss>

0800512e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800512e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005130:	3204      	adds	r2, #4

08005132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005134:	d3fb      	bcc.n	800512e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005136:	f7ff ffd7 	bl	80050e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800513a:	f007 fa99 	bl	800c670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800513e:	f7fc fa0f 	bl	8001560 <main>
  bx  lr    
 8005142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800514c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8005150:	0800c99c 	.word	0x0800c99c
  ldr r2, =_sbss
 8005154:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8005158:	20009f60 	.word	0x20009f60

0800515c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800515c:	e7fe      	b.n	800515c <ADC_IRQHandler>
	...

08005160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <HAL_Init+0x40>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <HAL_Init+0x40>)
 800516a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800516e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_Init+0x40>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <HAL_Init+0x40>)
 8005176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800517a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800517c:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <HAL_Init+0x40>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <HAL_Init+0x40>)
 8005182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005188:	2003      	movs	r0, #3
 800518a:	f000 f94f 	bl	800542c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800518e:	2000      	movs	r0, #0
 8005190:	f000 f808 	bl	80051a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005194:	f7ff fb88 	bl	80048a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40023c00 	.word	0x40023c00

080051a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051ac:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <HAL_InitTick+0x54>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_InitTick+0x58>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f996 	bl	80054f4 <HAL_SYSTICK_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e00e      	b.n	80051f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d80a      	bhi.n	80051ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051d8:	2200      	movs	r2, #0
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	f000 f944 	bl	800546c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051e4:	4a06      	ldr	r2, [pc, #24]	; (8005200 <HAL_InitTick+0x5c>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200001bc 	.word	0x200001bc
 80051fc:	200001c4 	.word	0x200001c4
 8005200:	200001c0 	.word	0x200001c0

08005204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_IncTick+0x20>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_IncTick+0x24>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4413      	add	r3, r2
 8005214:	4a04      	ldr	r2, [pc, #16]	; (8005228 <HAL_IncTick+0x24>)
 8005216:	6013      	str	r3, [r2, #0]
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	200001c4 	.word	0x200001c4
 8005228:	20009f5c 	.word	0x20009f5c

0800522c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return uwTick;
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_GetTick+0x14>)
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20009f5c 	.word	0x20009f5c

08005244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800524c:	f7ff ffee 	bl	800522c <HAL_GetTick>
 8005250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d005      	beq.n	800526a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <HAL_Delay+0x44>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800526a:	bf00      	nop
 800526c:	f7ff ffde 	bl	800522c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	429a      	cmp	r2, r3
 800527a:	d8f7      	bhi.n	800526c <HAL_Delay+0x28>
  {
  }
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	200001c4 	.word	0x200001c4

0800528c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <__NVIC_SetPriorityGrouping+0x44>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052a8:	4013      	ands	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052be:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <__NVIC_SetPriorityGrouping+0x44>)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	60d3      	str	r3, [r2, #12]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000ed00 	.word	0xe000ed00

080052d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <__NVIC_GetPriorityGrouping+0x18>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	f003 0307 	and.w	r3, r3, #7
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	e000ed00 	.word	0xe000ed00

080052f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	db0b      	blt.n	800531a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	f003 021f 	and.w	r2, r3, #31
 8005308:	4907      	ldr	r1, [pc, #28]	; (8005328 <__NVIC_EnableIRQ+0x38>)
 800530a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	2001      	movs	r0, #1
 8005312:	fa00 f202 	lsl.w	r2, r0, r2
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000e100 	.word	0xe000e100

0800532c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	6039      	str	r1, [r7, #0]
 8005336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db0a      	blt.n	8005356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	490c      	ldr	r1, [pc, #48]	; (8005378 <__NVIC_SetPriority+0x4c>)
 8005346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534a:	0112      	lsls	r2, r2, #4
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	440b      	add	r3, r1
 8005350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005354:	e00a      	b.n	800536c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	4908      	ldr	r1, [pc, #32]	; (800537c <__NVIC_SetPriority+0x50>)
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	3b04      	subs	r3, #4
 8005364:	0112      	lsls	r2, r2, #4
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	440b      	add	r3, r1
 800536a:	761a      	strb	r2, [r3, #24]
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	e000e100 	.word	0xe000e100
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	; 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f1c3 0307 	rsb	r3, r3, #7
 800539a:	2b04      	cmp	r3, #4
 800539c:	bf28      	it	cs
 800539e:	2304      	movcs	r3, #4
 80053a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d902      	bls.n	80053b0 <NVIC_EncodePriority+0x30>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3b03      	subs	r3, #3
 80053ae:	e000      	b.n	80053b2 <NVIC_EncodePriority+0x32>
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	401a      	ands	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053c8:	f04f 31ff 	mov.w	r1, #4294967295
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	43d9      	mvns	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	4313      	orrs	r3, r2
         );
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053f8:	d301      	bcc.n	80053fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053fa:	2301      	movs	r3, #1
 80053fc:	e00f      	b.n	800541e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <SysTick_Config+0x40>)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3b01      	subs	r3, #1
 8005404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005406:	210f      	movs	r1, #15
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	f7ff ff8e 	bl	800532c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <SysTick_Config+0x40>)
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005416:	4b04      	ldr	r3, [pc, #16]	; (8005428 <SysTick_Config+0x40>)
 8005418:	2207      	movs	r2, #7
 800541a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	e000e010 	.word	0xe000e010

0800542c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b07      	cmp	r3, #7
 8005438:	d00f      	beq.n	800545a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b06      	cmp	r3, #6
 800543e:	d00c      	beq.n	800545a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b05      	cmp	r3, #5
 8005444:	d009      	beq.n	800545a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b04      	cmp	r3, #4
 800544a:	d006      	beq.n	800545a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b03      	cmp	r3, #3
 8005450:	d003      	beq.n	800545a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005452:	2192      	movs	r1, #146	; 0x92
 8005454:	4804      	ldr	r0, [pc, #16]	; (8005468 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005456:	f7ff fa1c 	bl	8004892 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff ff16 	bl	800528c <__NVIC_SetPriorityGrouping>
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	0800c6e0 	.word	0x0800c6e0

0800546c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d903      	bls.n	800548c <HAL_NVIC_SetPriority+0x20>
 8005484:	21aa      	movs	r1, #170	; 0xaa
 8005486:	480e      	ldr	r0, [pc, #56]	; (80054c0 <HAL_NVIC_SetPriority+0x54>)
 8005488:	f7ff fa03 	bl	8004892 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b0f      	cmp	r3, #15
 8005490:	d903      	bls.n	800549a <HAL_NVIC_SetPriority+0x2e>
 8005492:	21ab      	movs	r1, #171	; 0xab
 8005494:	480a      	ldr	r0, [pc, #40]	; (80054c0 <HAL_NVIC_SetPriority+0x54>)
 8005496:	f7ff f9fc 	bl	8004892 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800549a:	f7ff ff1b 	bl	80052d4 <__NVIC_GetPriorityGrouping>
 800549e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	6978      	ldr	r0, [r7, #20]
 80054a6:	f7ff ff6b 	bl	8005380 <NVIC_EncodePriority>
 80054aa:	4602      	mov	r2, r0
 80054ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b0:	4611      	mov	r1, r2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ff3a 	bl	800532c <__NVIC_SetPriority>
}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	0800c6e0 	.word	0x0800c6e0

080054c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da03      	bge.n	80054de <HAL_NVIC_EnableIRQ+0x1a>
 80054d6:	21be      	movs	r1, #190	; 0xbe
 80054d8:	4805      	ldr	r0, [pc, #20]	; (80054f0 <HAL_NVIC_EnableIRQ+0x2c>)
 80054da:	f7ff f9da 	bl	8004892 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff ff04 	bl	80052f0 <__NVIC_EnableIRQ>
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	0800c6e0 	.word	0x0800c6e0

080054f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff73 	bl	80053e8 <SysTick_Config>
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005518:	f7ff fe88 	bl	800522c <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e204      	b.n	8005932 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a97      	ldr	r2, [pc, #604]	; (800578c <HAL_DMA_Init+0x280>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d04e      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a96      	ldr	r2, [pc, #600]	; (8005790 <HAL_DMA_Init+0x284>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d049      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a94      	ldr	r2, [pc, #592]	; (8005794 <HAL_DMA_Init+0x288>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d044      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a93      	ldr	r2, [pc, #588]	; (8005798 <HAL_DMA_Init+0x28c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d03f      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a91      	ldr	r2, [pc, #580]	; (800579c <HAL_DMA_Init+0x290>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d03a      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a90      	ldr	r2, [pc, #576]	; (80057a0 <HAL_DMA_Init+0x294>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d035      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a8e      	ldr	r2, [pc, #568]	; (80057a4 <HAL_DMA_Init+0x298>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d030      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a8d      	ldr	r2, [pc, #564]	; (80057a8 <HAL_DMA_Init+0x29c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d02b      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a8b      	ldr	r2, [pc, #556]	; (80057ac <HAL_DMA_Init+0x2a0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d026      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a8a      	ldr	r2, [pc, #552]	; (80057b0 <HAL_DMA_Init+0x2a4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d021      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a88      	ldr	r2, [pc, #544]	; (80057b4 <HAL_DMA_Init+0x2a8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01c      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a87      	ldr	r2, [pc, #540]	; (80057b8 <HAL_DMA_Init+0x2ac>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d017      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a85      	ldr	r2, [pc, #532]	; (80057bc <HAL_DMA_Init+0x2b0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d012      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a84      	ldr	r2, [pc, #528]	; (80057c0 <HAL_DMA_Init+0x2b4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00d      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a82      	ldr	r2, [pc, #520]	; (80057c4 <HAL_DMA_Init+0x2b8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d008      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a81      	ldr	r2, [pc, #516]	; (80057c8 <HAL_DMA_Init+0x2bc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <HAL_DMA_Init+0xc4>
 80055c8:	21b8      	movs	r1, #184	; 0xb8
 80055ca:	4880      	ldr	r0, [pc, #512]	; (80057cc <HAL_DMA_Init+0x2c0>)
 80055cc:	f7ff f961 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d026      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e0:	d021      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ea:	d01c      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80055f4:	d017      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fe:	d012      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005608:	d00d      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005612:	d008      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800561c:	d003      	beq.n	8005626 <HAL_DMA_Init+0x11a>
 800561e:	21b9      	movs	r1, #185	; 0xb9
 8005620:	486a      	ldr	r0, [pc, #424]	; (80057cc <HAL_DMA_Init+0x2c0>)
 8005622:	f7ff f936 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_DMA_Init+0x13a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d007      	beq.n	8005646 <HAL_DMA_Init+0x13a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b80      	cmp	r3, #128	; 0x80
 800563c:	d003      	beq.n	8005646 <HAL_DMA_Init+0x13a>
 800563e:	21ba      	movs	r1, #186	; 0xba
 8005640:	4862      	ldr	r0, [pc, #392]	; (80057cc <HAL_DMA_Init+0x2c0>)
 8005642:	f7ff f926 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800564e:	d007      	beq.n	8005660 <HAL_DMA_Init+0x154>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_DMA_Init+0x154>
 8005658:	21bb      	movs	r1, #187	; 0xbb
 800565a:	485c      	ldr	r0, [pc, #368]	; (80057cc <HAL_DMA_Init+0x2c0>)
 800565c:	f7ff f919 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005668:	d007      	beq.n	800567a <HAL_DMA_Init+0x16e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_DMA_Init+0x16e>
 8005672:	21bc      	movs	r1, #188	; 0xbc
 8005674:	4855      	ldr	r0, [pc, #340]	; (80057cc <HAL_DMA_Init+0x2c0>)
 8005676:	f7ff f90c 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <HAL_DMA_Init+0x192>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568a:	d008      	beq.n	800569e <HAL_DMA_Init+0x192>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005694:	d003      	beq.n	800569e <HAL_DMA_Init+0x192>
 8005696:	21bd      	movs	r1, #189	; 0xbd
 8005698:	484c      	ldr	r0, [pc, #304]	; (80057cc <HAL_DMA_Init+0x2c0>)
 800569a:	f7ff f8fa 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00d      	beq.n	80056c2 <HAL_DMA_Init+0x1b6>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	d008      	beq.n	80056c2 <HAL_DMA_Init+0x1b6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b8:	d003      	beq.n	80056c2 <HAL_DMA_Init+0x1b6>
 80056ba:	21be      	movs	r1, #190	; 0xbe
 80056bc:	4843      	ldr	r0, [pc, #268]	; (80057cc <HAL_DMA_Init+0x2c0>)
 80056be:	f7ff f8e8 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_DMA_Init+0x1d8>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d2:	d007      	beq.n	80056e4 <HAL_DMA_Init+0x1d8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d003      	beq.n	80056e4 <HAL_DMA_Init+0x1d8>
 80056dc:	21bf      	movs	r1, #191	; 0xbf
 80056de:	483b      	ldr	r0, [pc, #236]	; (80057cc <HAL_DMA_Init+0x2c0>)
 80056e0:	f7ff f8d7 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d012      	beq.n	8005712 <HAL_DMA_Init+0x206>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d00d      	beq.n	8005712 <HAL_DMA_Init+0x206>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056fe:	d008      	beq.n	8005712 <HAL_DMA_Init+0x206>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005708:	d003      	beq.n	8005712 <HAL_DMA_Init+0x206>
 800570a:	21c0      	movs	r1, #192	; 0xc0
 800570c:	482f      	ldr	r0, [pc, #188]	; (80057cc <HAL_DMA_Init+0x2c0>)
 800570e:	f7ff f8c0 	bl	8004892 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d007      	beq.n	800572a <HAL_DMA_Init+0x21e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2b04      	cmp	r3, #4
 8005720:	d003      	beq.n	800572a <HAL_DMA_Init+0x21e>
 8005722:	21c1      	movs	r1, #193	; 0xc1
 8005724:	4829      	ldr	r0, [pc, #164]	; (80057cc <HAL_DMA_Init+0x2c0>)
 8005726:	f7ff f8b4 	bl	8004892 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	2b00      	cmp	r3, #0
 8005730:	d065      	beq.n	80057fe <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00f      	beq.n	800575a <HAL_DMA_Init+0x24e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	2b01      	cmp	r3, #1
 8005740:	d00b      	beq.n	800575a <HAL_DMA_Init+0x24e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	2b02      	cmp	r3, #2
 8005748:	d007      	beq.n	800575a <HAL_DMA_Init+0x24e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	2b03      	cmp	r3, #3
 8005750:	d003      	beq.n	800575a <HAL_DMA_Init+0x24e>
 8005752:	21c6      	movs	r1, #198	; 0xc6
 8005754:	481d      	ldr	r0, [pc, #116]	; (80057cc <HAL_DMA_Init+0x2c0>)
 8005756:	f7ff f89c 	bl	8004892 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d036      	beq.n	80057d0 <HAL_DMA_Init+0x2c4>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800576a:	d031      	beq.n	80057d0 <HAL_DMA_Init+0x2c4>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005774:	d02c      	beq.n	80057d0 <HAL_DMA_Init+0x2c4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800577e:	d027      	beq.n	80057d0 <HAL_DMA_Init+0x2c4>
 8005780:	21c7      	movs	r1, #199	; 0xc7
 8005782:	4812      	ldr	r0, [pc, #72]	; (80057cc <HAL_DMA_Init+0x2c0>)
 8005784:	f7ff f885 	bl	8004892 <assert_failed>
 8005788:	e022      	b.n	80057d0 <HAL_DMA_Init+0x2c4>
 800578a:	bf00      	nop
 800578c:	40026010 	.word	0x40026010
 8005790:	40026028 	.word	0x40026028
 8005794:	40026040 	.word	0x40026040
 8005798:	40026058 	.word	0x40026058
 800579c:	40026070 	.word	0x40026070
 80057a0:	40026088 	.word	0x40026088
 80057a4:	400260a0 	.word	0x400260a0
 80057a8:	400260b8 	.word	0x400260b8
 80057ac:	40026410 	.word	0x40026410
 80057b0:	40026428 	.word	0x40026428
 80057b4:	40026440 	.word	0x40026440
 80057b8:	40026458 	.word	0x40026458
 80057bc:	40026470 	.word	0x40026470
 80057c0:	40026488 	.word	0x40026488
 80057c4:	400264a0 	.word	0x400264a0
 80057c8:	400264b8 	.word	0x400264b8
 80057cc:	0800c71c 	.word	0x0800c71c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d012      	beq.n	80057fe <HAL_DMA_Init+0x2f2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057e0:	d00d      	beq.n	80057fe <HAL_DMA_Init+0x2f2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ea:	d008      	beq.n	80057fe <HAL_DMA_Init+0x2f2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057f4:	d003      	beq.n	80057fe <HAL_DMA_Init+0x2f2>
 80057f6:	21c8      	movs	r1, #200	; 0xc8
 80057f8:	4850      	ldr	r0, [pc, #320]	; (800593c <HAL_DMA_Init+0x430>)
 80057fa:	f7ff f84a 	bl	8004892 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800581e:	e00f      	b.n	8005840 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005820:	f7ff fd04 	bl	800522c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b05      	cmp	r3, #5
 800582c:	d908      	bls.n	8005840 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2203      	movs	r2, #3
 8005838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e078      	b.n	8005932 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e8      	bne.n	8005820 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4b39      	ldr	r3, [pc, #228]	; (8005940 <HAL_DMA_Init+0x434>)
 800585a:	4013      	ands	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800586c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b04      	cmp	r3, #4
 8005898:	d107      	bne.n	80058aa <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4313      	orrs	r3, r2
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 0307 	bic.w	r3, r3, #7
 80058c0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d117      	bne.n	8005904 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00e      	beq.n	8005904 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa7e 	bl	8005de8 <DMA_CheckFifoParam>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2240      	movs	r2, #64	; 0x40
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005900:	2301      	movs	r3, #1
 8005902:	e016      	b.n	8005932 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fa35 	bl	8005d7c <DMA_CalcBaseAndBitshift>
 8005912:	4603      	mov	r3, r0
 8005914:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	223f      	movs	r2, #63	; 0x3f
 800591c:	409a      	lsls	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	0800c71c 	.word	0x0800c71c
 8005940:	f010803f 	.word	0xf010803f

08005944 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005952:	f7ff fc6b 	bl	800522c <HAL_GetTick>
 8005956:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d008      	beq.n	8005976 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2280      	movs	r2, #128	; 0x80
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e052      	b.n	8005a1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0216 	bic.w	r2, r2, #22
 8005984:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005994:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <HAL_DMA_Abort+0x62>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0208 	bic.w	r2, r2, #8
 80059b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059c6:	e013      	b.n	80059f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059c8:	f7ff fc30 	bl	800522c <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d90c      	bls.n	80059f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2203      	movs	r2, #3
 80059e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e015      	b.n	8005a1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e4      	bne.n	80059c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a02:	223f      	movs	r2, #63	; 0x3f
 8005a04:	409a      	lsls	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d004      	beq.n	8005a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2280      	movs	r2, #128	; 0x80
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e00c      	b.n	8005a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2205      	movs	r2, #5
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a74:	4b92      	ldr	r3, [pc, #584]	; (8005cc0 <HAL_DMA_IRQHandler+0x258>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a92      	ldr	r2, [pc, #584]	; (8005cc4 <HAL_DMA_IRQHandler+0x25c>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	0a9b      	lsrs	r3, r3, #10
 8005a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a92:	2208      	movs	r2, #8
 8005a94:	409a      	lsls	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	f043 0201 	orr.w	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	409a      	lsls	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d012      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	2201      	movs	r2, #1
 8005af8:	409a      	lsls	r2, r3
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	f043 0202 	orr.w	r2, r3, #2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0e:	2204      	movs	r2, #4
 8005b10:	409a      	lsls	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d012      	beq.n	8005b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	f043 0204 	orr.w	r2, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b44:	2210      	movs	r2, #16
 8005b46:	409a      	lsls	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d043      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d03c      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	2210      	movs	r2, #16
 8005b64:	409a      	lsls	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d108      	bne.n	8005b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d024      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
 8005b96:	e01f      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
 8005ba8:	e016      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d107      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0208 	bic.w	r2, r2, #8
 8005bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	2220      	movs	r2, #32
 8005bde:	409a      	lsls	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 808e 	beq.w	8005d06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8086 	beq.w	8005d06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	2220      	movs	r2, #32
 8005c00:	409a      	lsls	r2, r3
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d136      	bne.n	8005c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0216 	bic.w	r2, r2, #22
 8005c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <HAL_DMA_IRQHandler+0x1da>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0208 	bic.w	r2, r2, #8
 8005c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	223f      	movs	r2, #63	; 0x3f
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d07d      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
        }
        return;
 8005c7e:	e078      	b.n	8005d72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01c      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d108      	bne.n	8005cae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d030      	beq.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
 8005cac:	e02b      	b.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d027      	beq.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
 8005cbe:	e022      	b.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
 8005cc0:	200001bc 	.word	0x200001bc
 8005cc4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0210 	bic.w	r2, r2, #16
 8005ce4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d032      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d022      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2205      	movs	r2, #5
 8005d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d307      	bcc.n	8005d4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f2      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x2ca>
 8005d4c:	e000      	b.n	8005d50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d4e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
 8005d70:	e000      	b.n	8005d74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d72:	bf00      	nop
    }
  }
}
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	3b10      	subs	r3, #16
 8005d8c:	4a14      	ldr	r2, [pc, #80]	; (8005de0 <DMA_CalcBaseAndBitshift+0x64>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d96:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <DMA_CalcBaseAndBitshift+0x68>)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d909      	bls.n	8005dbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	1d1a      	adds	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	659a      	str	r2, [r3, #88]	; 0x58
 8005dbc:	e007      	b.n	8005dce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	aaaaaaab 	.word	0xaaaaaaab
 8005de4:	0800c95c 	.word	0x0800c95c

08005de8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d11f      	bne.n	8005e42 <DMA_CheckFifoParam+0x5a>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d856      	bhi.n	8005eb6 <DMA_CheckFifoParam+0xce>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <DMA_CheckFifoParam+0x28>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e33 	.word	0x08005e33
 8005e18:	08005e21 	.word	0x08005e21
 8005e1c:	08005eb7 	.word	0x08005eb7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d046      	beq.n	8005eba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e30:	e043      	b.n	8005eba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e3a:	d140      	bne.n	8005ebe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e40:	e03d      	b.n	8005ebe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4a:	d121      	bne.n	8005e90 <DMA_CheckFifoParam+0xa8>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d837      	bhi.n	8005ec2 <DMA_CheckFifoParam+0xda>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <DMA_CheckFifoParam+0x70>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e69 	.word	0x08005e69
 8005e5c:	08005e6f 	.word	0x08005e6f
 8005e60:	08005e69 	.word	0x08005e69
 8005e64:	08005e81 	.word	0x08005e81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e030      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d025      	beq.n	8005ec6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e7e:	e022      	b.n	8005ec6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e88:	d11f      	bne.n	8005eca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e8e:	e01c      	b.n	8005eca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d903      	bls.n	8005e9e <DMA_CheckFifoParam+0xb6>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d003      	beq.n	8005ea4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e9c:	e018      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea2:	e015      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00e      	beq.n	8005ece <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb4:	e00b      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e00a      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e008      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e006      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ec2:	bf00      	nop
 8005ec4:	e004      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ec6:	bf00      	nop
 8005ec8:	e002      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ece:	bf00      	nop
    }
  } 
  
  return status; 
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop

08005ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <HAL_GPIO_Init+0xf8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01f      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a36      	ldr	r2, [pc, #216]	; (8005fdc <HAL_GPIO_Init+0xfc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01b      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <HAL_GPIO_Init+0x100>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d017      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a34      	ldr	r2, [pc, #208]	; (8005fe4 <HAL_GPIO_Init+0x104>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a33      	ldr	r2, [pc, #204]	; (8005fe8 <HAL_GPIO_Init+0x108>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a32      	ldr	r2, [pc, #200]	; (8005fec <HAL_GPIO_Init+0x10c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a31      	ldr	r2, [pc, #196]	; (8005ff0 <HAL_GPIO_Init+0x110>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a30      	ldr	r2, [pc, #192]	; (8005ff4 <HAL_GPIO_Init+0x114>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x5e>
 8005f36:	21ac      	movs	r1, #172	; 0xac
 8005f38:	482f      	ldr	r0, [pc, #188]	; (8005ff8 <HAL_GPIO_Init+0x118>)
 8005f3a:	f7fe fcaa 	bl	8004892 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_GPIO_Init+0x74>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_GPIO_Init+0x7c>
 8005f54:	21ad      	movs	r1, #173	; 0xad
 8005f56:	4828      	ldr	r0, [pc, #160]	; (8005ff8 <HAL_GPIO_Init+0x118>)
 8005f58:	f7fe fc9b 	bl	8004892 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d035      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d031      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b11      	cmp	r3, #17
 8005f72:	d02d      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d029      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b12      	cmp	r3, #18
 8005f82:	d025      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005f8c:	d020      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005f96:	d01b      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005fa0:	d016      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005faa:	d011      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005fbe:	d007      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d003      	beq.n	8005fd0 <HAL_GPIO_Init+0xf0>
 8005fc8:	21ae      	movs	r1, #174	; 0xae
 8005fca:	480b      	ldr	r0, [pc, #44]	; (8005ff8 <HAL_GPIO_Init+0x118>)
 8005fcc:	f7fe fc61 	bl	8004892 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	e289      	b.n	80064ea <HAL_GPIO_Init+0x60a>
 8005fd6:	bf00      	nop
 8005fd8:	40020000 	.word	0x40020000
 8005fdc:	40020400 	.word	0x40020400
 8005fe0:	40020800 	.word	0x40020800
 8005fe4:	40020c00 	.word	0x40020c00
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40021400 	.word	0x40021400
 8005ff0:	40021800 	.word	0x40021800
 8005ff4:	40021c00 	.word	0x40021c00
 8005ff8:	0800c754 	.word	0x0800c754
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4013      	ands	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	429a      	cmp	r2, r3
 8006016:	f040 8265 	bne.w	80064e4 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d005      	beq.n	8006032 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800602e:	2b02      	cmp	r3, #2
 8006030:	d144      	bne.n	80060bc <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00f      	beq.n	800605a <HAL_GPIO_Init+0x17a>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d00b      	beq.n	800605a <HAL_GPIO_Init+0x17a>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d007      	beq.n	800605a <HAL_GPIO_Init+0x17a>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d003      	beq.n	800605a <HAL_GPIO_Init+0x17a>
 8006052:	21c0      	movs	r1, #192	; 0xc0
 8006054:	4831      	ldr	r0, [pc, #196]	; (800611c <HAL_GPIO_Init+0x23c>)
 8006056:	f7fe fc1c 	bl	8004892 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	2203      	movs	r2, #3
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4313      	orrs	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006090:	2201      	movs	r2, #1
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 0201 	and.w	r2, r3, #1
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d02b      	beq.n	8006120 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00b      	beq.n	80060e8 <HAL_GPIO_Init+0x208>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d007      	beq.n	80060e8 <HAL_GPIO_Init+0x208>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d003      	beq.n	80060e8 <HAL_GPIO_Init+0x208>
 80060e0:	21d1      	movs	r1, #209	; 0xd1
 80060e2:	480e      	ldr	r0, [pc, #56]	; (800611c <HAL_GPIO_Init+0x23c>)
 80060e4:	f7fe fbd5 	bl	8004892 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2203      	movs	r2, #3
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4313      	orrs	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	e002      	b.n	8006120 <HAL_GPIO_Init+0x240>
 800611a:	bf00      	nop
 800611c:	0800c754 	.word	0x0800c754
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b02      	cmp	r3, #2
 800612a:	f040 810c 	bne.w	8006346 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80e3 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b09      	cmp	r3, #9
 800613e:	f000 80de 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80d9 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80d4 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80cf 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80ca 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b01      	cmp	r3, #1
 8006170:	f000 80c5 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b01      	cmp	r3, #1
 800617a:	f000 80c0 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b02      	cmp	r3, #2
 8006184:	f000 80bb 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b02      	cmp	r3, #2
 800618e:	f000 80b6 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b02      	cmp	r3, #2
 8006198:	f000 80b1 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	f000 80ac 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	f000 80a7 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	f000 80a2 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b04      	cmp	r3, #4
 80061c0:	f000 809d 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	f000 8098 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	f000 8093 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b09      	cmp	r3, #9
 80061de:	f000 808e 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b06      	cmp	r3, #6
 80061e8:	f000 8089 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b09      	cmp	r3, #9
 80061f2:	f000 8084 	beq.w	80062fe <HAL_GPIO_Init+0x41e>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b07      	cmp	r3, #7
 80061fc:	d07f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b07      	cmp	r3, #7
 8006204:	d07b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b07      	cmp	r3, #7
 800620c:	d077      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b08      	cmp	r3, #8
 8006214:	d073      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b08      	cmp	r3, #8
 800621c:	d06f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b08      	cmp	r3, #8
 8006224:	d06b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b09      	cmp	r3, #9
 800622c:	d067      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b09      	cmp	r3, #9
 8006234:	d063      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b0a      	cmp	r3, #10
 800623c:	d05f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b0a      	cmp	r3, #10
 8006244:	d05b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b0b      	cmp	r3, #11
 800624c:	d057      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d053      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b0c      	cmp	r3, #12
 800625c:	d04f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b0d      	cmp	r3, #13
 8006264:	d04b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b0f      	cmp	r3, #15
 800626c:	d047      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b05      	cmp	r3, #5
 8006274:	d043      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b0c      	cmp	r3, #12
 800627c:	d03f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b06      	cmp	r3, #6
 8006284:	d03b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d037      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b04      	cmp	r3, #4
 8006294:	d033      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b05      	cmp	r3, #5
 800629c:	d02f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b06      	cmp	r3, #6
 80062a4:	d02b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d027      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b07      	cmp	r3, #7
 80062b4:	d023      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b07      	cmp	r3, #7
 80062bc:	d01f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b07      	cmp	r3, #7
 80062c4:	d01b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b07      	cmp	r3, #7
 80062cc:	d017      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d013      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d00f      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b09      	cmp	r3, #9
 80062e4:	d00b      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b0a      	cmp	r3, #10
 80062ec:	d007      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b0a      	cmp	r3, #10
 80062f4:	d003      	beq.n	80062fe <HAL_GPIO_Init+0x41e>
 80062f6:	21de      	movs	r1, #222	; 0xde
 80062f8:	4880      	ldr	r0, [pc, #512]	; (80064fc <HAL_GPIO_Init+0x61c>)
 80062fa:	f7fe faca 	bl	8004892 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	08da      	lsrs	r2, r3, #3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3208      	adds	r2, #8
 8006306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	220f      	movs	r2, #15
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	43db      	mvns	r3, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4013      	ands	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	08da      	lsrs	r2, r3, #3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3208      	adds	r2, #8
 8006340:	69b9      	ldr	r1, [r7, #24]
 8006342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	2203      	movs	r2, #3
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43db      	mvns	r3, r3
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	4013      	ands	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 0203 	and.w	r2, r3, #3
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4313      	orrs	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 80ae 	beq.w	80064e4 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <HAL_GPIO_Init+0x620>)
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	4a5b      	ldr	r2, [pc, #364]	; (8006500 <HAL_GPIO_Init+0x620>)
 8006392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006396:	6453      	str	r3, [r2, #68]	; 0x44
 8006398:	4b59      	ldr	r3, [pc, #356]	; (8006500 <HAL_GPIO_Init+0x620>)
 800639a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063a4:	4a57      	ldr	r2, [pc, #348]	; (8006504 <HAL_GPIO_Init+0x624>)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	089b      	lsrs	r3, r3, #2
 80063aa:	3302      	adds	r3, #2
 80063ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	220f      	movs	r2, #15
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4013      	ands	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a4f      	ldr	r2, [pc, #316]	; (8006508 <HAL_GPIO_Init+0x628>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d025      	beq.n	800641c <HAL_GPIO_Init+0x53c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a4e      	ldr	r2, [pc, #312]	; (800650c <HAL_GPIO_Init+0x62c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d01f      	beq.n	8006418 <HAL_GPIO_Init+0x538>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a4d      	ldr	r2, [pc, #308]	; (8006510 <HAL_GPIO_Init+0x630>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d019      	beq.n	8006414 <HAL_GPIO_Init+0x534>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a4c      	ldr	r2, [pc, #304]	; (8006514 <HAL_GPIO_Init+0x634>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <HAL_GPIO_Init+0x530>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a4b      	ldr	r2, [pc, #300]	; (8006518 <HAL_GPIO_Init+0x638>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00d      	beq.n	800640c <HAL_GPIO_Init+0x52c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a4a      	ldr	r2, [pc, #296]	; (800651c <HAL_GPIO_Init+0x63c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <HAL_GPIO_Init+0x528>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a49      	ldr	r2, [pc, #292]	; (8006520 <HAL_GPIO_Init+0x640>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d101      	bne.n	8006404 <HAL_GPIO_Init+0x524>
 8006400:	2306      	movs	r3, #6
 8006402:	e00c      	b.n	800641e <HAL_GPIO_Init+0x53e>
 8006404:	2307      	movs	r3, #7
 8006406:	e00a      	b.n	800641e <HAL_GPIO_Init+0x53e>
 8006408:	2305      	movs	r3, #5
 800640a:	e008      	b.n	800641e <HAL_GPIO_Init+0x53e>
 800640c:	2304      	movs	r3, #4
 800640e:	e006      	b.n	800641e <HAL_GPIO_Init+0x53e>
 8006410:	2303      	movs	r3, #3
 8006412:	e004      	b.n	800641e <HAL_GPIO_Init+0x53e>
 8006414:	2302      	movs	r3, #2
 8006416:	e002      	b.n	800641e <HAL_GPIO_Init+0x53e>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <HAL_GPIO_Init+0x53e>
 800641c:	2300      	movs	r3, #0
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	f002 0203 	and.w	r2, r2, #3
 8006424:	0092      	lsls	r2, r2, #2
 8006426:	4093      	lsls	r3, r2
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4313      	orrs	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800642e:	4935      	ldr	r1, [pc, #212]	; (8006504 <HAL_GPIO_Init+0x624>)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	3302      	adds	r3, #2
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800643c:	4b39      	ldr	r3, [pc, #228]	; (8006524 <HAL_GPIO_Init+0x644>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	43db      	mvns	r3, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4013      	ands	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006460:	4a30      	ldr	r2, [pc, #192]	; (8006524 <HAL_GPIO_Init+0x644>)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006466:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <HAL_GPIO_Init+0x644>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800648a:	4a26      	ldr	r2, [pc, #152]	; (8006524 <HAL_GPIO_Init+0x644>)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006490:	4b24      	ldr	r3, [pc, #144]	; (8006524 <HAL_GPIO_Init+0x644>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	43db      	mvns	r3, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4013      	ands	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064b4:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <HAL_GPIO_Init+0x644>)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <HAL_GPIO_Init+0x644>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	43db      	mvns	r3, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4013      	ands	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064de:	4a11      	ldr	r2, [pc, #68]	; (8006524 <HAL_GPIO_Init+0x644>)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	3301      	adds	r3, #1
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b0f      	cmp	r3, #15
 80064ee:	f67f ad85 	bls.w	8005ffc <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	0800c754 	.word	0x0800c754
 8006500:	40023800 	.word	0x40023800
 8006504:	40013800 	.word	0x40013800
 8006508:	40020000 	.word	0x40020000
 800650c:	40020400 	.word	0x40020400
 8006510:	40020800 	.word	0x40020800
 8006514:	40020c00 	.word	0x40020c00
 8006518:	40021000 	.word	0x40021000
 800651c:	40021400 	.word	0x40021400
 8006520:	40021800 	.word	0x40021800
 8006524:	40013c00 	.word	0x40013c00

08006528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
 8006534:	4613      	mov	r3, r2
 8006536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006538:	887b      	ldrh	r3, [r7, #2]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <HAL_GPIO_WritePin+0x20>
 800653e:	887b      	ldrh	r3, [r7, #2]
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <HAL_GPIO_WritePin+0x2a>
 8006548:	f240 119d 	movw	r1, #413	; 0x19d
 800654c:	480e      	ldr	r0, [pc, #56]	; (8006588 <HAL_GPIO_WritePin+0x60>)
 800654e:	f7fe f9a0 	bl	8004892 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006552:	787b      	ldrb	r3, [r7, #1]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <HAL_GPIO_WritePin+0x40>
 8006558:	787b      	ldrb	r3, [r7, #1]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d004      	beq.n	8006568 <HAL_GPIO_WritePin+0x40>
 800655e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006562:	4809      	ldr	r0, [pc, #36]	; (8006588 <HAL_GPIO_WritePin+0x60>)
 8006564:	f7fe f995 	bl	8004892 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006568:	787b      	ldrb	r3, [r7, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006574:	e003      	b.n	800657e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006576:	887b      	ldrh	r3, [r7, #2]
 8006578:	041a      	lsls	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	619a      	str	r2, [r3, #24]
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	0800c754 	.word	0x0800c754

0800658c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065a2:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065a8:	88fb      	ldrh	r3, [r7, #6]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe f950 	bl	8004850 <HAL_GPIO_EXTI_Callback>
  }
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40013c00 	.word	0x40013c00

080065bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e1be      	b.n	800694c <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a9f      	ldr	r2, [pc, #636]	; (8006850 <HAL_I2C_Init+0x294>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_I2C_Init+0x3a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a9d      	ldr	r2, [pc, #628]	; (8006854 <HAL_I2C_Init+0x298>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_I2C_Init+0x3a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a9c      	ldr	r2, [pc, #624]	; (8006858 <HAL_I2C_Init+0x29c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_I2C_Init+0x3a>
 80065ec:	f240 11bf 	movw	r1, #447	; 0x1bf
 80065f0:	489a      	ldr	r0, [pc, #616]	; (800685c <HAL_I2C_Init+0x2a0>)
 80065f2:	f7fe f94e 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <HAL_I2C_Init+0x4c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4a97      	ldr	r2, [pc, #604]	; (8006860 <HAL_I2C_Init+0x2a4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d904      	bls.n	8006612 <HAL_I2C_Init+0x56>
 8006608:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800660c:	4893      	ldr	r0, [pc, #588]	; (800685c <HAL_I2C_Init+0x2a0>)
 800660e:	f7fe f940 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_I2C_Init+0x72>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006622:	d004      	beq.n	800662e <HAL_I2C_Init+0x72>
 8006624:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006628:	488c      	ldr	r0, [pc, #560]	; (800685c <HAL_I2C_Init+0x2a0>)
 800662a:	f7fe f932 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <HAL_I2C_Init+0x8c>
 800663e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006642:	4886      	ldr	r0, [pc, #536]	; (800685c <HAL_I2C_Init+0x2a0>)
 8006644:	f7fe f925 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006650:	d009      	beq.n	8006666 <HAL_I2C_Init+0xaa>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800665a:	d004      	beq.n	8006666 <HAL_I2C_Init+0xaa>
 800665c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006660:	487e      	ldr	r0, [pc, #504]	; (800685c <HAL_I2C_Init+0x2a0>)
 8006662:	f7fe f916 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <HAL_I2C_Init+0xc4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d004      	beq.n	8006680 <HAL_I2C_Init+0xc4>
 8006676:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800667a:	4878      	ldr	r0, [pc, #480]	; (800685c <HAL_I2C_Init+0x2a0>)
 800667c:	f7fe f909 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <HAL_I2C_Init+0xda>
 800668c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006690:	4872      	ldr	r0, [pc, #456]	; (800685c <HAL_I2C_Init+0x2a0>)
 8006692:	f7fe f8fe 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <HAL_I2C_Init+0xf4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d004      	beq.n	80066b0 <HAL_I2C_Init+0xf4>
 80066a6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80066aa:	486c      	ldr	r0, [pc, #432]	; (800685c <HAL_I2C_Init+0x2a0>)
 80066ac:	f7fe f8f1 	bl	8004892 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <HAL_I2C_Init+0x10e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d004      	beq.n	80066ca <HAL_I2C_Init+0x10e>
 80066c0:	f240 11c7 	movw	r1, #455	; 0x1c7
 80066c4:	4865      	ldr	r0, [pc, #404]	; (800685c <HAL_I2C_Init+0x2a0>)
 80066c6:	f7fe f8e4 	bl	8004892 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fe f90a 	bl	80048f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2224      	movs	r2, #36	; 0x24
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800670a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800671a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800671c:	f000 fb1c 	bl	8006d58 <HAL_RCC_GetPCLK1Freq>
 8006720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4a4f      	ldr	r2, [pc, #316]	; (8006864 <HAL_I2C_Init+0x2a8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d807      	bhi.n	800673c <HAL_I2C_Init+0x180>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a4e      	ldr	r2, [pc, #312]	; (8006868 <HAL_I2C_Init+0x2ac>)
 8006730:	4293      	cmp	r3, r2
 8006732:	bf94      	ite	ls
 8006734:	2301      	movls	r3, #1
 8006736:	2300      	movhi	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e006      	b.n	800674a <HAL_I2C_Init+0x18e>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a4b      	ldr	r2, [pc, #300]	; (800686c <HAL_I2C_Init+0x2b0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	bf94      	ite	ls
 8006744:	2301      	movls	r3, #1
 8006746:	2300      	movhi	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e0fc      	b.n	800694c <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a46      	ldr	r2, [pc, #280]	; (8006870 <HAL_I2C_Init+0x2b4>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	0c9b      	lsrs	r3, r3, #18
 800675c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4a38      	ldr	r2, [pc, #224]	; (8006864 <HAL_I2C_Init+0x2a8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d802      	bhi.n	800678c <HAL_I2C_Init+0x1d0>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	3301      	adds	r3, #1
 800678a:	e009      	b.n	80067a0 <HAL_I2C_Init+0x1e4>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006792:	fb02 f303 	mul.w	r3, r2, r3
 8006796:	4a37      	ldr	r2, [pc, #220]	; (8006874 <HAL_I2C_Init+0x2b8>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	099b      	lsrs	r3, r3, #6
 800679e:	3301      	adds	r3, #1
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	430b      	orrs	r3, r1
 80067a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	492a      	ldr	r1, [pc, #168]	; (8006864 <HAL_I2C_Init+0x2a8>)
 80067bc:	428b      	cmp	r3, r1
 80067be:	d819      	bhi.n	80067f4 <HAL_I2C_Init+0x238>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	1e59      	subs	r1, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067d4:	400b      	ands	r3, r1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_I2C_Init+0x234>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1e59      	subs	r1, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80067e8:	3301      	adds	r3, #1
 80067ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ee:	e066      	b.n	80068be <HAL_I2C_Init+0x302>
 80067f0:	2304      	movs	r3, #4
 80067f2:	e064      	b.n	80068be <HAL_I2C_Init+0x302>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d111      	bne.n	8006820 <HAL_I2C_Init+0x264>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1e58      	subs	r0, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	440b      	add	r3, r1
 800680a:	fbb0 f3f3 	udiv	r3, r0, r3
 800680e:	3301      	adds	r3, #1
 8006810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf0c      	ite	eq
 8006818:	2301      	moveq	r3, #1
 800681a:	2300      	movne	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	e012      	b.n	8006846 <HAL_I2C_Init+0x28a>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	1e58      	subs	r0, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6859      	ldr	r1, [r3, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	0099      	lsls	r1, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	fbb0 f3f3 	udiv	r3, r0, r3
 8006836:	3301      	adds	r3, #1
 8006838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683c:	2b00      	cmp	r3, #0
 800683e:	bf0c      	ite	eq
 8006840:	2301      	moveq	r3, #1
 8006842:	2300      	movne	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_I2C_Init+0x2bc>
 800684a:	2301      	movs	r3, #1
 800684c:	e037      	b.n	80068be <HAL_I2C_Init+0x302>
 800684e:	bf00      	nop
 8006850:	40005400 	.word	0x40005400
 8006854:	40005800 	.word	0x40005800
 8006858:	40005c00 	.word	0x40005c00
 800685c:	0800c790 	.word	0x0800c790
 8006860:	00061a80 	.word	0x00061a80
 8006864:	000186a0 	.word	0x000186a0
 8006868:	001e847f 	.word	0x001e847f
 800686c:	003d08ff 	.word	0x003d08ff
 8006870:	431bde83 	.word	0x431bde83
 8006874:	10624dd3 	.word	0x10624dd3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10e      	bne.n	800689e <HAL_I2C_Init+0x2e2>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	1e58      	subs	r0, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	440b      	add	r3, r1
 800688e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006892:	3301      	adds	r3, #1
 8006894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689c:	e00f      	b.n	80068be <HAL_I2C_Init+0x302>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1e58      	subs	r0, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	0099      	lsls	r1, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80068b4:	3301      	adds	r3, #1
 80068b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	6809      	ldr	r1, [r1, #0]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6911      	ldr	r1, [r2, #16]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	68d2      	ldr	r2, [r2, #12]
 80068f8:	4311      	orrs	r1, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	430b      	orrs	r3, r1
 8006900:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800695e:	2300      	movs	r3, #0
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4b20      	ldr	r3, [pc, #128]	; (80069e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696c:	6413      	str	r3, [r2, #64]	; 0x40
 800696e:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800697a:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800697c:	2201      	movs	r2, #1
 800697e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006980:	f7fe fc54 	bl	800522c <HAL_GetTick>
 8006984:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006986:	e009      	b.n	800699c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006988:	f7fe fc50 	bl	800522c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006996:	d901      	bls.n	800699c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e01f      	b.n	80069dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800699c:	4b13      	ldr	r3, [pc, #76]	; (80069ec <HAL_PWREx_EnableOverDrive+0x98>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a8:	d1ee      	bne.n	8006988 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069b0:	f7fe fc3c 	bl	800522c <HAL_GetTick>
 80069b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069b6:	e009      	b.n	80069cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069b8:	f7fe fc38 	bl	800522c <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c6:	d901      	bls.n	80069cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e007      	b.n	80069dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069cc:	4b07      	ldr	r3, [pc, #28]	; (80069ec <HAL_PWREx_EnableOverDrive+0x98>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d8:	d1ee      	bne.n	80069b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	420e0040 	.word	0x420e0040
 80069ec:	40007000 	.word	0x40007000
 80069f0:	420e0044 	.word	0x420e0044

080069f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e18c      	b.n	8006d22 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x24>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b0f      	cmp	r3, #15
 8006a16:	d904      	bls.n	8006a22 <HAL_RCC_ClockConfig+0x2e>
 8006a18:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8006a1c:	4887      	ldr	r0, [pc, #540]	; (8006c3c <HAL_RCC_ClockConfig+0x248>)
 8006a1e:	f7fd ff38 	bl	8004892 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d031      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d02e      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d02b      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d028      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d025      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d022      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b06      	cmp	r3, #6
 8006a4a:	d01f      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b07      	cmp	r3, #7
 8006a50:	d01c      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d019      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2b09      	cmp	r3, #9
 8006a5c:	d016      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b0a      	cmp	r3, #10
 8006a62:	d013      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b0b      	cmp	r3, #11
 8006a68:	d010      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b0c      	cmp	r3, #12
 8006a6e:	d00d      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b0d      	cmp	r3, #13
 8006a74:	d00a      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b0e      	cmp	r3, #14
 8006a7a:	d007      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d004      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x98>
 8006a82:	f240 215d 	movw	r1, #605	; 0x25d
 8006a86:	486d      	ldr	r0, [pc, #436]	; (8006c3c <HAL_RCC_ClockConfig+0x248>)
 8006a88:	f7fd ff03 	bl	8004892 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a8c:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <HAL_RCC_ClockConfig+0x24c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d90c      	bls.n	8006ab4 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9a:	4b69      	ldr	r3, [pc, #420]	; (8006c40 <HAL_RCC_ClockConfig+0x24c>)
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa2:	4b67      	ldr	r3, [pc, #412]	; (8006c40 <HAL_RCC_ClockConfig+0x24c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d001      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e136      	b.n	8006d22 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d049      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006acc:	4b5d      	ldr	r3, [pc, #372]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	4a5c      	ldr	r2, [pc, #368]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ae4:	4b57      	ldr	r3, [pc, #348]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	4a56      	ldr	r2, [pc, #344]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d024      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b80      	cmp	r3, #128	; 0x80
 8006afe:	d020      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b90      	cmp	r3, #144	; 0x90
 8006b06:	d01c      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2ba0      	cmp	r3, #160	; 0xa0
 8006b0e:	d018      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2bb0      	cmp	r3, #176	; 0xb0
 8006b16:	d014      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2bc0      	cmp	r3, #192	; 0xc0
 8006b1e:	d010      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2bd0      	cmp	r3, #208	; 0xd0
 8006b26:	d00c      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2be0      	cmp	r3, #224	; 0xe0
 8006b2e:	d008      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2bf0      	cmp	r3, #240	; 0xf0
 8006b36:	d004      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x14e>
 8006b38:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006b3c:	483f      	ldr	r0, [pc, #252]	; (8006c3c <HAL_RCC_ClockConfig+0x248>)
 8006b3e:	f7fd fea8 	bl	8004892 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b42:	4b40      	ldr	r3, [pc, #256]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	493d      	ldr	r1, [pc, #244]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d059      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d010      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x196>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d00c      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x196>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d008      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x196>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d004      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x196>
 8006b80:	f240 2187 	movw	r1, #647	; 0x287
 8006b84:	482d      	ldr	r0, [pc, #180]	; (8006c3c <HAL_RCC_ClockConfig+0x248>)
 8006b86:	f7fd fe84 	bl	8004892 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b92:	4b2c      	ldr	r3, [pc, #176]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d119      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e0bf      	b.n	8006d22 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d003      	beq.n	8006bb2 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb2:	4b24      	ldr	r3, [pc, #144]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e0af      	b.n	8006d22 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc2:	4b20      	ldr	r3, [pc, #128]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e0a7      	b.n	8006d22 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bd2:	4b1c      	ldr	r3, [pc, #112]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f023 0203 	bic.w	r2, r3, #3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	4919      	ldr	r1, [pc, #100]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006be4:	f7fe fb22 	bl	800522c <HAL_GetTick>
 8006be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bea:	e00a      	b.n	8006c02 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bec:	f7fe fb1e 	bl	800522c <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e08f      	b.n	8006d22 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c02:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <HAL_RCC_ClockConfig+0x250>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 020c 	and.w	r2, r3, #12
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d1eb      	bne.n	8006bec <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <HAL_RCC_ClockConfig+0x24c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d212      	bcs.n	8006c48 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <HAL_RCC_ClockConfig+0x24c>)
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_RCC_ClockConfig+0x24c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d007      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e072      	b.n	8006d22 <HAL_RCC_ClockConfig+0x32e>
 8006c3c:	0800c7c8 	.word	0x0800c7c8
 8006c40:	40023c00 	.word	0x40023c00
 8006c44:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d025      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d018      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x29a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d013      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x29a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c6e:	d00e      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x29a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006c78:	d009      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x29a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006c82:	d004      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x29a>
 8006c84:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006c88:	4828      	ldr	r0, [pc, #160]	; (8006d2c <HAL_RCC_ClockConfig+0x338>)
 8006c8a:	f7fd fe02 	bl	8004892 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c8e:	4b28      	ldr	r3, [pc, #160]	; (8006d30 <HAL_RCC_ClockConfig+0x33c>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	4925      	ldr	r1, [pc, #148]	; (8006d30 <HAL_RCC_ClockConfig+0x33c>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d026      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d018      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x2f2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbc:	d013      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x2f2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x2f2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006cd0:	d009      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x2f2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006cda:	d004      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x2f2>
 8006cdc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8006ce0:	4812      	ldr	r0, [pc, #72]	; (8006d2c <HAL_RCC_ClockConfig+0x338>)
 8006ce2:	f7fd fdd6 	bl	8004892 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ce6:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <HAL_RCC_ClockConfig+0x33c>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	490e      	ldr	r1, [pc, #56]	; (8006d30 <HAL_RCC_ClockConfig+0x33c>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cfa:	f000 f855 	bl	8006da8 <HAL_RCC_GetSysClockFreq>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <HAL_RCC_ClockConfig+0x33c>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	091b      	lsrs	r3, r3, #4
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	490a      	ldr	r1, [pc, #40]	; (8006d34 <HAL_RCC_ClockConfig+0x340>)
 8006d0c:	5ccb      	ldrb	r3, [r1, r3]
 8006d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d12:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <HAL_RCC_ClockConfig+0x344>)
 8006d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <HAL_RCC_ClockConfig+0x348>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fa42 	bl	80051a4 <HAL_InitTick>

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	0800c7c8 	.word	0x0800c7c8
 8006d30:	40023800 	.word	0x40023800
 8006d34:	0800c944 	.word	0x0800c944
 8006d38:	200001bc 	.word	0x200001bc
 8006d3c:	200001c0 	.word	0x200001c0

08006d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d46:	681b      	ldr	r3, [r3, #0]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	200001bc 	.word	0x200001bc

08006d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d5c:	f7ff fff0 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 8006d60:	4602      	mov	r2, r0
 8006d62:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	0a9b      	lsrs	r3, r3, #10
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	4903      	ldr	r1, [pc, #12]	; (8006d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d6e:	5ccb      	ldrb	r3, [r1, r3]
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	0800c954 	.word	0x0800c954

08006d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d84:	f7ff ffdc 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	0b5b      	lsrs	r3, r3, #13
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	4903      	ldr	r1, [pc, #12]	; (8006da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d96:	5ccb      	ldrb	r3, [r1, r3]
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40023800 	.word	0x40023800
 8006da4:	0800c954 	.word	0x0800c954

08006da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dac:	b088      	sub	sp, #32
 8006dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dc4:	4bce      	ldr	r3, [pc, #824]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 030c 	and.w	r3, r3, #12
 8006dcc:	2b0c      	cmp	r3, #12
 8006dce:	f200 818d 	bhi.w	80070ec <HAL_RCC_GetSysClockFreq+0x344>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <HAL_RCC_GetSysClockFreq+0x30>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e0d 	.word	0x08006e0d
 8006ddc:	080070ed 	.word	0x080070ed
 8006de0:	080070ed 	.word	0x080070ed
 8006de4:	080070ed 	.word	0x080070ed
 8006de8:	08006e13 	.word	0x08006e13
 8006dec:	080070ed 	.word	0x080070ed
 8006df0:	080070ed 	.word	0x080070ed
 8006df4:	080070ed 	.word	0x080070ed
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	080070ed 	.word	0x080070ed
 8006e00:	080070ed 	.word	0x080070ed
 8006e04:	080070ed 	.word	0x080070ed
 8006e08:	08006f8d 	.word	0x08006f8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e0c:	4bbd      	ldr	r3, [pc, #756]	; (8007104 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006e0e:	61bb      	str	r3, [r7, #24]
       break;
 8006e10:	e16f      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e12:	4bbd      	ldr	r3, [pc, #756]	; (8007108 <HAL_RCC_GetSysClockFreq+0x360>)
 8006e14:	61bb      	str	r3, [r7, #24]
      break;
 8006e16:	e16c      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e18:	4bb9      	ldr	r3, [pc, #740]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e20:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e22:	4bb7      	ldr	r3, [pc, #732]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d053      	beq.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2e:	4bb4      	ldr	r3, [pc, #720]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	099b      	lsrs	r3, r3, #6
 8006e34:	461a      	mov	r2, r3
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	ea02 0400 	and.w	r4, r2, r0
 8006e46:	603c      	str	r4, [r7, #0]
 8006e48:	400b      	ands	r3, r1
 8006e4a:	607b      	str	r3, [r7, #4]
 8006e4c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e50:	4620      	mov	r0, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	014b      	lsls	r3, r1, #5
 8006e5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e62:	0142      	lsls	r2, r0, #5
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	4623      	mov	r3, r4
 8006e6a:	1ac0      	subs	r0, r0, r3
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	eb61 0103 	sbc.w	r1, r1, r3
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	018b      	lsls	r3, r1, #6
 8006e7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e80:	0182      	lsls	r2, r0, #6
 8006e82:	1a12      	subs	r2, r2, r0
 8006e84:	eb63 0301 	sbc.w	r3, r3, r1
 8006e88:	f04f 0000 	mov.w	r0, #0
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	00d9      	lsls	r1, r3, #3
 8006e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e96:	00d0      	lsls	r0, r2, #3
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	1852      	adds	r2, r2, r1
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	eb43 0101 	adc.w	r1, r3, r1
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	f04f 0000 	mov.w	r0, #0
 8006eac:	f04f 0100 	mov.w	r1, #0
 8006eb0:	0259      	lsls	r1, r3, #9
 8006eb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006eb6:	0250      	lsls	r0, r2, #9
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	f7f9 fe64 	bl	8000b94 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e04c      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed6:	4b8a      	ldr	r3, [pc, #552]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	099b      	lsrs	r3, r3, #6
 8006edc:	461a      	mov	r2, r3
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ee6:	f04f 0100 	mov.w	r1, #0
 8006eea:	ea02 0a00 	and.w	sl, r2, r0
 8006eee:	ea03 0b01 	and.w	fp, r3, r1
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	014b      	lsls	r3, r1, #5
 8006f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f04:	0142      	lsls	r2, r0, #5
 8006f06:	4610      	mov	r0, r2
 8006f08:	4619      	mov	r1, r3
 8006f0a:	ebb0 000a 	subs.w	r0, r0, sl
 8006f0e:	eb61 010b 	sbc.w	r1, r1, fp
 8006f12:	f04f 0200 	mov.w	r2, #0
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	018b      	lsls	r3, r1, #6
 8006f1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f20:	0182      	lsls	r2, r0, #6
 8006f22:	1a12      	subs	r2, r2, r0
 8006f24:	eb63 0301 	sbc.w	r3, r3, r1
 8006f28:	f04f 0000 	mov.w	r0, #0
 8006f2c:	f04f 0100 	mov.w	r1, #0
 8006f30:	00d9      	lsls	r1, r3, #3
 8006f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f36:	00d0      	lsls	r0, r2, #3
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	eb12 020a 	adds.w	r2, r2, sl
 8006f40:	eb43 030b 	adc.w	r3, r3, fp
 8006f44:	f04f 0000 	mov.w	r0, #0
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	0299      	lsls	r1, r3, #10
 8006f4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f52:	0290      	lsls	r0, r2, #10
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	f7f9 fe16 	bl	8000b94 <__aeabi_uldivmod>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f70:	4b63      	ldr	r3, [pc, #396]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006f80:	69fa      	ldr	r2, [r7, #28]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	61bb      	str	r3, [r7, #24]
      break;
 8006f8a:	e0b2      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f8c:	4b5c      	ldr	r3, [pc, #368]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f94:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f96:	4b5a      	ldr	r3, [pc, #360]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04d      	beq.n	800703e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fa2:	4b57      	ldr	r3, [pc, #348]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fb2:	f04f 0100 	mov.w	r1, #0
 8006fb6:	ea02 0800 	and.w	r8, r2, r0
 8006fba:	ea03 0901 	and.w	r9, r3, r1
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	014b      	lsls	r3, r1, #5
 8006fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fd0:	0142      	lsls	r2, r0, #5
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	ebb0 0008 	subs.w	r0, r0, r8
 8006fda:	eb61 0109 	sbc.w	r1, r1, r9
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	018b      	lsls	r3, r1, #6
 8006fe8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fec:	0182      	lsls	r2, r0, #6
 8006fee:	1a12      	subs	r2, r2, r0
 8006ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f04f 0100 	mov.w	r1, #0
 8006ffc:	00d9      	lsls	r1, r3, #3
 8006ffe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007002:	00d0      	lsls	r0, r2, #3
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	eb12 0208 	adds.w	r2, r2, r8
 800700c:	eb43 0309 	adc.w	r3, r3, r9
 8007010:	f04f 0000 	mov.w	r0, #0
 8007014:	f04f 0100 	mov.w	r1, #0
 8007018:	0259      	lsls	r1, r3, #9
 800701a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800701e:	0250      	lsls	r0, r2, #9
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	461a      	mov	r2, r3
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	f7f9 fdb0 	bl	8000b94 <__aeabi_uldivmod>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4613      	mov	r3, r2
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	e04a      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800703e:	4b30      	ldr	r3, [pc, #192]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	099b      	lsrs	r3, r3, #6
 8007044:	461a      	mov	r2, r3
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	ea02 0400 	and.w	r4, r2, r0
 8007056:	ea03 0501 	and.w	r5, r3, r1
 800705a:	4620      	mov	r0, r4
 800705c:	4629      	mov	r1, r5
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	014b      	lsls	r3, r1, #5
 8007068:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800706c:	0142      	lsls	r2, r0, #5
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	1b00      	subs	r0, r0, r4
 8007074:	eb61 0105 	sbc.w	r1, r1, r5
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	018b      	lsls	r3, r1, #6
 8007082:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007086:	0182      	lsls	r2, r0, #6
 8007088:	1a12      	subs	r2, r2, r0
 800708a:	eb63 0301 	sbc.w	r3, r3, r1
 800708e:	f04f 0000 	mov.w	r0, #0
 8007092:	f04f 0100 	mov.w	r1, #0
 8007096:	00d9      	lsls	r1, r3, #3
 8007098:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800709c:	00d0      	lsls	r0, r2, #3
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	1912      	adds	r2, r2, r4
 80070a4:	eb45 0303 	adc.w	r3, r5, r3
 80070a8:	f04f 0000 	mov.w	r0, #0
 80070ac:	f04f 0100 	mov.w	r1, #0
 80070b0:	0299      	lsls	r1, r3, #10
 80070b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070b6:	0290      	lsls	r0, r2, #10
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4610      	mov	r0, r2
 80070be:	4619      	mov	r1, r3
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	f7f9 fd64 	bl	8000b94 <__aeabi_uldivmod>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4613      	mov	r3, r2
 80070d2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <HAL_RCC_GetSysClockFreq+0x358>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	0f1b      	lsrs	r3, r3, #28
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	61bb      	str	r3, [r7, #24]
      break;
 80070ea:	e002      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <HAL_RCC_GetSysClockFreq+0x35c>)
 80070ee:	61bb      	str	r3, [r7, #24]
      break;
 80070f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070f2:	69bb      	ldr	r3, [r7, #24]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070fe:	bf00      	nop
 8007100:	40023800 	.word	0x40023800
 8007104:	00f42400 	.word	0x00f42400
 8007108:	007a1200 	.word	0x007a1200

0800710c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e34b      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b0f      	cmp	r3, #15
 8007124:	d904      	bls.n	8007130 <HAL_RCC_OscConfig+0x24>
 8007126:	f640 5112 	movw	r1, #3346	; 0xd12
 800712a:	48a5      	ldr	r0, [pc, #660]	; (80073c0 <HAL_RCC_OscConfig+0x2b4>)
 800712c:	f7fd fbb1 	bl	8004892 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8096 	beq.w	800726a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <HAL_RCC_OscConfig+0x58>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714e:	d009      	beq.n	8007164 <HAL_RCC_OscConfig+0x58>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007158:	d004      	beq.n	8007164 <HAL_RCC_OscConfig+0x58>
 800715a:	f640 5117 	movw	r1, #3351	; 0xd17
 800715e:	4898      	ldr	r0, [pc, #608]	; (80073c0 <HAL_RCC_OscConfig+0x2b4>)
 8007160:	f7fd fb97 	bl	8004892 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007164:	4b97      	ldr	r3, [pc, #604]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 030c 	and.w	r3, r3, #12
 800716c:	2b04      	cmp	r3, #4
 800716e:	d019      	beq.n	80071a4 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007170:	4b94      	ldr	r3, [pc, #592]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007178:	2b08      	cmp	r3, #8
 800717a:	d106      	bne.n	800718a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800717c:	4b91      	ldr	r3, [pc, #580]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007188:	d00c      	beq.n	80071a4 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800718a:	4b8e      	ldr	r3, [pc, #568]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007192:	2b0c      	cmp	r3, #12
 8007194:	d112      	bne.n	80071bc <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007196:	4b8b      	ldr	r3, [pc, #556]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800719e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071a2:	d10b      	bne.n	80071bc <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a4:	4b87      	ldr	r3, [pc, #540]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d05b      	beq.n	8007268 <HAL_RCC_OscConfig+0x15c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d157      	bne.n	8007268 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e2fc      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c4:	d106      	bne.n	80071d4 <HAL_RCC_OscConfig+0xc8>
 80071c6:	4b7f      	ldr	r3, [pc, #508]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7e      	ldr	r2, [pc, #504]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	e01d      	b.n	8007210 <HAL_RCC_OscConfig+0x104>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071dc:	d10c      	bne.n	80071f8 <HAL_RCC_OscConfig+0xec>
 80071de:	4b79      	ldr	r3, [pc, #484]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a78      	ldr	r2, [pc, #480]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	4b76      	ldr	r3, [pc, #472]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a75      	ldr	r2, [pc, #468]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	e00b      	b.n	8007210 <HAL_RCC_OscConfig+0x104>
 80071f8:	4b72      	ldr	r3, [pc, #456]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a71      	ldr	r2, [pc, #452]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80071fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	4b6f      	ldr	r3, [pc, #444]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a6e      	ldr	r2, [pc, #440]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 800720a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800720e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d013      	beq.n	8007240 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007218:	f7fe f808 	bl	800522c <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007220:	f7fe f804 	bl	800522c <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b64      	cmp	r3, #100	; 0x64
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e2c1      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007232:	4b64      	ldr	r3, [pc, #400]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCC_OscConfig+0x114>
 800723e:	e014      	b.n	800726a <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fd fff4 	bl	800522c <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007248:	f7fd fff0 	bl	800522c <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b64      	cmp	r3, #100	; 0x64
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e2ad      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800725a:	4b5a      	ldr	r3, [pc, #360]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x13c>
 8007266:	e000      	b.n	800726a <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 8086 	beq.w	8007384 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <HAL_RCC_OscConfig+0x186>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d004      	beq.n	8007292 <HAL_RCC_OscConfig+0x186>
 8007288:	f640 514f 	movw	r1, #3407	; 0xd4f
 800728c:	484c      	ldr	r0, [pc, #304]	; (80073c0 <HAL_RCC_OscConfig+0x2b4>)
 800728e:	f7fd fb00 	bl	8004892 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b1f      	cmp	r3, #31
 8007298:	d904      	bls.n	80072a4 <HAL_RCC_OscConfig+0x198>
 800729a:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 800729e:	4848      	ldr	r0, [pc, #288]	; (80073c0 <HAL_RCC_OscConfig+0x2b4>)
 80072a0:	f7fd faf7 	bl	8004892 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072a4:	4b47      	ldr	r3, [pc, #284]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 030c 	and.w	r3, r3, #12
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d017      	beq.n	80072e0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072b0:	4b44      	ldr	r3, [pc, #272]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d105      	bne.n	80072c8 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072bc:	4b41      	ldr	r3, [pc, #260]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072c8:	4b3e      	ldr	r3, [pc, #248]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072d0:	2b0c      	cmp	r3, #12
 80072d2:	d11c      	bne.n	800730e <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072d4:	4b3b      	ldr	r3, [pc, #236]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d116      	bne.n	800730e <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e0:	4b38      	ldr	r3, [pc, #224]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_OscConfig+0x1ec>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e25e      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f8:	4b32      	ldr	r3, [pc, #200]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	492f      	ldr	r1, [pc, #188]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007308:	4313      	orrs	r3, r2
 800730a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800730c:	e03a      	b.n	8007384 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d020      	beq.n	8007358 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007316:	4b2c      	ldr	r3, [pc, #176]	; (80073c8 <HAL_RCC_OscConfig+0x2bc>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fd ff86 	bl	800522c <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007324:	f7fd ff82 	bl	800522c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e23f      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f0      	beq.n	8007324 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007342:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	491c      	ldr	r1, [pc, #112]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 8007352:	4313      	orrs	r3, r2
 8007354:	600b      	str	r3, [r1, #0]
 8007356:	e015      	b.n	8007384 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007358:	4b1b      	ldr	r3, [pc, #108]	; (80073c8 <HAL_RCC_OscConfig+0x2bc>)
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735e:	f7fd ff65 	bl	800522c <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007366:	f7fd ff61 	bl	800522c <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e21e      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007378:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <HAL_RCC_OscConfig+0x2b8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f0      	bne.n	8007366 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d045      	beq.n	800741c <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <HAL_RCC_OscConfig+0x29e>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d004      	beq.n	80073aa <HAL_RCC_OscConfig+0x29e>
 80073a0:	f640 5196 	movw	r1, #3478	; 0xd96
 80073a4:	4806      	ldr	r0, [pc, #24]	; (80073c0 <HAL_RCC_OscConfig+0x2b4>)
 80073a6:	f7fd fa74 	bl	8004892 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01e      	beq.n	80073f0 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <HAL_RCC_OscConfig+0x2c0>)
 80073b4:	2201      	movs	r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b8:	f7fd ff38 	bl	800522c <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073be:	e010      	b.n	80073e2 <HAL_RCC_OscConfig+0x2d6>
 80073c0:	0800c800 	.word	0x0800c800
 80073c4:	40023800 	.word	0x40023800
 80073c8:	42470000 	.word	0x42470000
 80073cc:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d0:	f7fd ff2c 	bl	800522c <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e1e9      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073e2:	4ba4      	ldr	r3, [pc, #656]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80073e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0x2c4>
 80073ee:	e015      	b.n	800741c <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f0:	4ba1      	ldr	r3, [pc, #644]	; (8007678 <HAL_RCC_OscConfig+0x56c>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fd ff19 	bl	800522c <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073fe:	f7fd ff15 	bl	800522c <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e1d2      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007410:	4b98      	ldr	r3, [pc, #608]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f0      	bne.n	80073fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80a8 	beq.w	800757a <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00c      	beq.n	8007450 <HAL_RCC_OscConfig+0x344>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d008      	beq.n	8007450 <HAL_RCC_OscConfig+0x344>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b05      	cmp	r3, #5
 8007444:	d004      	beq.n	8007450 <HAL_RCC_OscConfig+0x344>
 8007446:	f640 51c2 	movw	r1, #3522	; 0xdc2
 800744a:	488c      	ldr	r0, [pc, #560]	; (800767c <HAL_RCC_OscConfig+0x570>)
 800744c:	f7fd fa21 	bl	8004892 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007450:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10f      	bne.n	800747c <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800745c:	2300      	movs	r3, #0
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	4b84      	ldr	r3, [pc, #528]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	4a83      	ldr	r2, [pc, #524]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746a:	6413      	str	r3, [r2, #64]	; 0x40
 800746c:	4b81      	ldr	r3, [pc, #516]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007474:	60bb      	str	r3, [r7, #8]
 8007476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007478:	2301      	movs	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800747c:	4b80      	ldr	r3, [pc, #512]	; (8007680 <HAL_RCC_OscConfig+0x574>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007484:	2b00      	cmp	r3, #0
 8007486:	d118      	bne.n	80074ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007488:	4b7d      	ldr	r3, [pc, #500]	; (8007680 <HAL_RCC_OscConfig+0x574>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a7c      	ldr	r2, [pc, #496]	; (8007680 <HAL_RCC_OscConfig+0x574>)
 800748e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007494:	f7fd feca 	bl	800522c <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749c:	f7fd fec6 	bl	800522c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e183      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ae:	4b74      	ldr	r3, [pc, #464]	; (8007680 <HAL_RCC_OscConfig+0x574>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d106      	bne.n	80074d0 <HAL_RCC_OscConfig+0x3c4>
 80074c2:	4b6c      	ldr	r3, [pc, #432]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	4a6b      	ldr	r2, [pc, #428]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	6713      	str	r3, [r2, #112]	; 0x70
 80074ce:	e01c      	b.n	800750a <HAL_RCC_OscConfig+0x3fe>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b05      	cmp	r3, #5
 80074d6:	d10c      	bne.n	80074f2 <HAL_RCC_OscConfig+0x3e6>
 80074d8:	4b66      	ldr	r3, [pc, #408]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	4a65      	ldr	r2, [pc, #404]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074de:	f043 0304 	orr.w	r3, r3, #4
 80074e2:	6713      	str	r3, [r2, #112]	; 0x70
 80074e4:	4b63      	ldr	r3, [pc, #396]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	4a62      	ldr	r2, [pc, #392]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	6713      	str	r3, [r2, #112]	; 0x70
 80074f0:	e00b      	b.n	800750a <HAL_RCC_OscConfig+0x3fe>
 80074f2:	4b60      	ldr	r3, [pc, #384]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	4a5f      	ldr	r2, [pc, #380]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80074f8:	f023 0301 	bic.w	r3, r3, #1
 80074fc:	6713      	str	r3, [r2, #112]	; 0x70
 80074fe:	4b5d      	ldr	r3, [pc, #372]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007502:	4a5c      	ldr	r2, [pc, #368]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007504:	f023 0304 	bic.w	r3, r3, #4
 8007508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d015      	beq.n	800753e <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007512:	f7fd fe8b 	bl	800522c <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007518:	e00a      	b.n	8007530 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800751a:	f7fd fe87 	bl	800522c <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	f241 3288 	movw	r2, #5000	; 0x1388
 8007528:	4293      	cmp	r3, r2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e142      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007530:	4b50      	ldr	r3, [pc, #320]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0ee      	beq.n	800751a <HAL_RCC_OscConfig+0x40e>
 800753c:	e014      	b.n	8007568 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800753e:	f7fd fe75 	bl	800522c <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007544:	e00a      	b.n	800755c <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007546:	f7fd fe71 	bl	800522c <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	f241 3288 	movw	r2, #5000	; 0x1388
 8007554:	4293      	cmp	r3, r2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e12c      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800755c:	4b45      	ldr	r3, [pc, #276]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1ee      	bne.n	8007546 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d105      	bne.n	800757a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800756e:	4b41      	ldr	r3, [pc, #260]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	4a40      	ldr	r2, [pc, #256]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 8007574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00c      	beq.n	800759c <HAL_RCC_OscConfig+0x490>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d008      	beq.n	800759c <HAL_RCC_OscConfig+0x490>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d004      	beq.n	800759c <HAL_RCC_OscConfig+0x490>
 8007592:	f640 6105 	movw	r1, #3589	; 0xe05
 8007596:	4839      	ldr	r0, [pc, #228]	; (800767c <HAL_RCC_OscConfig+0x570>)
 8007598:	f7fd f97b 	bl	8004892 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8107 	beq.w	80077b4 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075a6:	4b33      	ldr	r3, [pc, #204]	; (8007674 <HAL_RCC_OscConfig+0x568>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 030c 	and.w	r3, r3, #12
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	f000 80c0 	beq.w	8007734 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f040 80a4 	bne.w	8007706 <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d009      	beq.n	80075da <HAL_RCC_OscConfig+0x4ce>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ce:	d004      	beq.n	80075da <HAL_RCC_OscConfig+0x4ce>
 80075d0:	f640 610e 	movw	r1, #3598	; 0xe0e
 80075d4:	4829      	ldr	r0, [pc, #164]	; (800767c <HAL_RCC_OscConfig+0x570>)
 80075d6:	f7fd f95c 	bl	8004892 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	2b3f      	cmp	r3, #63	; 0x3f
 80075e0:	d904      	bls.n	80075ec <HAL_RCC_OscConfig+0x4e0>
 80075e2:	f640 610f 	movw	r1, #3599	; 0xe0f
 80075e6:	4825      	ldr	r0, [pc, #148]	; (800767c <HAL_RCC_OscConfig+0x570>)
 80075e8:	f7fd f953 	bl	8004892 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	2b31      	cmp	r3, #49	; 0x31
 80075f2:	d904      	bls.n	80075fe <HAL_RCC_OscConfig+0x4f2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80075fc:	d904      	bls.n	8007608 <HAL_RCC_OscConfig+0x4fc>
 80075fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007602:	481e      	ldr	r0, [pc, #120]	; (800767c <HAL_RCC_OscConfig+0x570>)
 8007604:	f7fd f945 	bl	8004892 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	2b02      	cmp	r3, #2
 800760e:	d010      	beq.n	8007632 <HAL_RCC_OscConfig+0x526>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	2b04      	cmp	r3, #4
 8007616:	d00c      	beq.n	8007632 <HAL_RCC_OscConfig+0x526>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	2b06      	cmp	r3, #6
 800761e:	d008      	beq.n	8007632 <HAL_RCC_OscConfig+0x526>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	2b08      	cmp	r3, #8
 8007626:	d004      	beq.n	8007632 <HAL_RCC_OscConfig+0x526>
 8007628:	f640 6111 	movw	r1, #3601	; 0xe11
 800762c:	4813      	ldr	r0, [pc, #76]	; (800767c <HAL_RCC_OscConfig+0x570>)
 800762e:	f7fd f930 	bl	8004892 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d903      	bls.n	8007642 <HAL_RCC_OscConfig+0x536>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	2b0f      	cmp	r3, #15
 8007640:	d904      	bls.n	800764c <HAL_RCC_OscConfig+0x540>
 8007642:	f640 6112 	movw	r1, #3602	; 0xe12
 8007646:	480d      	ldr	r0, [pc, #52]	; (800767c <HAL_RCC_OscConfig+0x570>)
 8007648:	f7fd f923 	bl	8004892 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	2b01      	cmp	r3, #1
 8007652:	d903      	bls.n	800765c <HAL_RCC_OscConfig+0x550>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	2b07      	cmp	r3, #7
 800765a:	d904      	bls.n	8007666 <HAL_RCC_OscConfig+0x55a>
 800765c:	f640 6113 	movw	r1, #3603	; 0xe13
 8007660:	4806      	ldr	r0, [pc, #24]	; (800767c <HAL_RCC_OscConfig+0x570>)
 8007662:	f7fd f916 	bl	8004892 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <HAL_RCC_OscConfig+0x578>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766c:	f7fd fdde 	bl	800522c <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007672:	e012      	b.n	800769a <HAL_RCC_OscConfig+0x58e>
 8007674:	40023800 	.word	0x40023800
 8007678:	42470e80 	.word	0x42470e80
 800767c:	0800c800 	.word	0x0800c800
 8007680:	40007000 	.word	0x40007000
 8007684:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007688:	f7fd fdd0 	bl	800522c <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e08d      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769a:	4b49      	ldr	r3, [pc, #292]	; (80077c0 <HAL_RCC_OscConfig+0x6b4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	019b      	lsls	r3, r3, #6
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	085b      	lsrs	r3, r3, #1
 80076be:	3b01      	subs	r3, #1
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	061b      	lsls	r3, r3, #24
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	071b      	lsls	r3, r3, #28
 80076d2:	493b      	ldr	r1, [pc, #236]	; (80077c0 <HAL_RCC_OscConfig+0x6b4>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076d8:	4b3a      	ldr	r3, [pc, #232]	; (80077c4 <HAL_RCC_OscConfig+0x6b8>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076de:	f7fd fda5 	bl	800522c <HAL_GetTick>
 80076e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e4:	e008      	b.n	80076f8 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e6:	f7fd fda1 	bl	800522c <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e05e      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f8:	4b31      	ldr	r3, [pc, #196]	; (80077c0 <HAL_RCC_OscConfig+0x6b4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f0      	beq.n	80076e6 <HAL_RCC_OscConfig+0x5da>
 8007704:	e056      	b.n	80077b4 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007706:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <HAL_RCC_OscConfig+0x6b8>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fd fd8e 	bl	800522c <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007714:	f7fd fd8a 	bl	800522c <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e047      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	4b26      	ldr	r3, [pc, #152]	; (80077c0 <HAL_RCC_OscConfig+0x6b4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x608>
 8007732:	e03f      	b.n	80077b4 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e03a      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007740:	4b1f      	ldr	r3, [pc, #124]	; (80077c0 <HAL_RCC_OscConfig+0x6b4>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d030      	beq.n	80077b0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007758:	429a      	cmp	r2, r3
 800775a:	d129      	bne.n	80077b0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007766:	429a      	cmp	r2, r3
 8007768:	d122      	bne.n	80077b0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007778:	4293      	cmp	r3, r2
 800777a:	d119      	bne.n	80077b0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	3b01      	subs	r3, #1
 800778a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800778c:	429a      	cmp	r2, r3
 800778e:	d10f      	bne.n	80077b0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800779c:	429a      	cmp	r2, r3
 800779e:	d107      	bne.n	80077b0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d001      	beq.n	80077b4 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40023800 	.word	0x40023800
 80077c4:	42470060 	.word	0x42470060

080077c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e184      	b.n	8007ae4 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a72      	ldr	r2, [pc, #456]	; (80079a8 <HAL_SPI_Init+0x1e0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <HAL_SPI_Init+0x44>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a70      	ldr	r2, [pc, #448]	; (80079ac <HAL_SPI_Init+0x1e4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_SPI_Init+0x44>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6f      	ldr	r2, [pc, #444]	; (80079b0 <HAL_SPI_Init+0x1e8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d009      	beq.n	800780c <HAL_SPI_Init+0x44>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a6d      	ldr	r2, [pc, #436]	; (80079b4 <HAL_SPI_Init+0x1ec>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_SPI_Init+0x44>
 8007802:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007806:	486c      	ldr	r0, [pc, #432]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 8007808:	f7fd f843 	bl	8004892 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <HAL_SPI_Init+0x60>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781c:	d004      	beq.n	8007828 <HAL_SPI_Init+0x60>
 800781e:	f240 1143 	movw	r1, #323	; 0x143
 8007822:	4865      	ldr	r0, [pc, #404]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 8007824:	f7fd f835 	bl	8004892 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00e      	beq.n	800784e <HAL_SPI_Init+0x86>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007838:	d009      	beq.n	800784e <HAL_SPI_Init+0x86>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007842:	d004      	beq.n	800784e <HAL_SPI_Init+0x86>
 8007844:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007848:	485b      	ldr	r0, [pc, #364]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 800784a:	f7fd f822 	bl	8004892 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007856:	d008      	beq.n	800786a <HAL_SPI_Init+0xa2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <HAL_SPI_Init+0xa2>
 8007860:	f240 1145 	movw	r1, #325	; 0x145
 8007864:	4854      	ldr	r0, [pc, #336]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 8007866:	f7fd f814 	bl	8004892 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007872:	d00d      	beq.n	8007890 <HAL_SPI_Init+0xc8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d009      	beq.n	8007890 <HAL_SPI_Init+0xc8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007884:	d004      	beq.n	8007890 <HAL_SPI_Init+0xc8>
 8007886:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800788a:	484b      	ldr	r0, [pc, #300]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 800788c:	f7fd f801 	bl	8004892 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <HAL_SPI_Init+0x112>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d01c      	beq.n	80078da <HAL_SPI_Init+0x112>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d018      	beq.n	80078da <HAL_SPI_Init+0x112>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	2b18      	cmp	r3, #24
 80078ae:	d014      	beq.n	80078da <HAL_SPI_Init+0x112>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d010      	beq.n	80078da <HAL_SPI_Init+0x112>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	2b28      	cmp	r3, #40	; 0x28
 80078be:	d00c      	beq.n	80078da <HAL_SPI_Init+0x112>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	2b30      	cmp	r3, #48	; 0x30
 80078c6:	d008      	beq.n	80078da <HAL_SPI_Init+0x112>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	2b38      	cmp	r3, #56	; 0x38
 80078ce:	d004      	beq.n	80078da <HAL_SPI_Init+0x112>
 80078d0:	f240 1147 	movw	r1, #327	; 0x147
 80078d4:	4838      	ldr	r0, [pc, #224]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 80078d6:	f7fc ffdc 	bl	8004892 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d008      	beq.n	80078f4 <HAL_SPI_Init+0x12c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	2b80      	cmp	r3, #128	; 0x80
 80078e8:	d004      	beq.n	80078f4 <HAL_SPI_Init+0x12c>
 80078ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80078ee:	4832      	ldr	r0, [pc, #200]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 80078f0:	f7fc ffcf 	bl	8004892 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <HAL_SPI_Init+0x146>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b10      	cmp	r3, #16
 8007902:	d004      	beq.n	800790e <HAL_SPI_Init+0x146>
 8007904:	f240 1149 	movw	r1, #329	; 0x149
 8007908:	482b      	ldr	r0, [pc, #172]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 800790a:	f7fc ffc2 	bl	8004892 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	2b00      	cmp	r3, #0
 8007914:	d152      	bne.n	80079bc <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <HAL_SPI_Init+0x168>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d004      	beq.n	8007930 <HAL_SPI_Init+0x168>
 8007926:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800792a:	4823      	ldr	r0, [pc, #140]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 800792c:	f7fc ffb1 	bl	8004892 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <HAL_SPI_Init+0x182>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d004      	beq.n	800794a <HAL_SPI_Init+0x182>
 8007940:	f240 114d 	movw	r1, #333	; 0x14d
 8007944:	481c      	ldr	r0, [pc, #112]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 8007946:	f7fc ffa4 	bl	8004892 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007952:	d125      	bne.n	80079a0 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d05a      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	2b08      	cmp	r3, #8
 8007962:	d056      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b10      	cmp	r3, #16
 800796a:	d052      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	2b18      	cmp	r3, #24
 8007972:	d04e      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	2b20      	cmp	r3, #32
 800797a:	d04a      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	2b28      	cmp	r3, #40	; 0x28
 8007982:	d046      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	2b30      	cmp	r3, #48	; 0x30
 800798a:	d042      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	2b38      	cmp	r3, #56	; 0x38
 8007992:	d03e      	beq.n	8007a12 <HAL_SPI_Init+0x24a>
 8007994:	f240 1151 	movw	r1, #337	; 0x151
 8007998:	4807      	ldr	r0, [pc, #28]	; (80079b8 <HAL_SPI_Init+0x1f0>)
 800799a:	f7fc ff7a 	bl	8004892 <assert_failed>
 800799e:	e038      	b.n	8007a12 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	61da      	str	r2, [r3, #28]
 80079a6:	e034      	b.n	8007a12 <HAL_SPI_Init+0x24a>
 80079a8:	40013000 	.word	0x40013000
 80079ac:	40003800 	.word	0x40003800
 80079b0:	40003c00 	.word	0x40003c00
 80079b4:	40013400 	.word	0x40013400
 80079b8:	0800c83c 	.word	0x0800c83c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d020      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d01c      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d018      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	2b18      	cmp	r3, #24
 80079da:	d014      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d010      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	2b28      	cmp	r3, #40	; 0x28
 80079ea:	d00c      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	2b30      	cmp	r3, #48	; 0x30
 80079f2:	d008      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	2b38      	cmp	r3, #56	; 0x38
 80079fa:	d004      	beq.n	8007a06 <HAL_SPI_Init+0x23e>
 80079fc:	f240 115b 	movw	r1, #347	; 0x15b
 8007a00:	483a      	ldr	r0, [pc, #232]	; (8007aec <HAL_SPI_Init+0x324>)
 8007a02:	f7fc ff46 	bl	8004892 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7fc ffab 	bl	8004988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2202      	movs	r2, #2
 8007a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a96:	ea42 0103 	orr.w	r1, r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	f003 0104 	and.w	r1, r3, #4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	f003 0210 	and.w	r2, r3, #16
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69da      	ldr	r2, [r3, #28]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ad2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	0800c83c 	.word	0x0800c83c

08007af0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <HAL_SPI_Transmit+0x30>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b14:	d004      	beq.n	8007b20 <HAL_SPI_Transmit+0x30>
 8007b16:	f240 310a 	movw	r1, #778	; 0x30a
 8007b1a:	4893      	ldr	r0, [pc, #588]	; (8007d68 <HAL_SPI_Transmit+0x278>)
 8007b1c:	f7fc feb9 	bl	8004892 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d101      	bne.n	8007b2e <HAL_SPI_Transmit+0x3e>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e128      	b.n	8007d80 <HAL_SPI_Transmit+0x290>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b36:	f7fd fb79 	bl	800522c <HAL_GetTick>
 8007b3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d002      	beq.n	8007b52 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b50:	e10d      	b.n	8007d6e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_SPI_Transmit+0x6e>
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b62:	e104      	b.n	8007d6e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2203      	movs	r2, #3
 8007b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	88fa      	ldrh	r2, [r7, #6]
 8007b7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007baa:	d10f      	bne.n	8007bcc <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b40      	cmp	r3, #64	; 0x40
 8007bd8:	d007      	beq.n	8007bea <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf2:	d14b      	bne.n	8007c8c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_SPI_Transmit+0x112>
 8007bfc:	8afb      	ldrh	r3, [r7, #22]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d13e      	bne.n	8007c80 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	881a      	ldrh	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	1c9a      	adds	r2, r3, #2
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007c26:	e02b      	b.n	8007c80 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d112      	bne.n	8007c5c <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	881a      	ldrh	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	1c9a      	adds	r2, r3, #2
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c5a:	e011      	b.n	8007c80 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c5c:	f7fd fae6 	bl	800522c <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d803      	bhi.n	8007c74 <HAL_SPI_Transmit+0x184>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d102      	bne.n	8007c7a <HAL_SPI_Transmit+0x18a>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c7e:	e076      	b.n	8007d6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1ce      	bne.n	8007c28 <HAL_SPI_Transmit+0x138>
 8007c8a:	e04c      	b.n	8007d26 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_SPI_Transmit+0x1aa>
 8007c94:	8afb      	ldrh	r3, [r7, #22]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d140      	bne.n	8007d1c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	7812      	ldrb	r2, [r2, #0]
 8007ca6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007cc0:	e02c      	b.n	8007d1c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d113      	bne.n	8007cf8 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007cf6:	e011      	b.n	8007d1c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cf8:	f7fd fa98 	bl	800522c <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d803      	bhi.n	8007d10 <HAL_SPI_Transmit+0x220>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d102      	bne.n	8007d16 <HAL_SPI_Transmit+0x226>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d1a:	e028      	b.n	8007d6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1cd      	bne.n	8007cc2 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fbda 	bl	80084e4 <SPI_EndRxTxTransaction>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d44:	2300      	movs	r3, #0
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	77fb      	strb	r3, [r7, #31]
 8007d66:	e002      	b.n	8007d6e <HAL_SPI_Transmit+0x27e>
 8007d68:	0800c83c 	.word	0x0800c83c
  }

error:
 8007d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4613      	mov	r3, r2
 8007d96:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da4:	d112      	bne.n	8007dcc <HAL_SPI_Receive+0x44>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10e      	bne.n	8007dcc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2204      	movs	r2, #4
 8007db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007db6:	88fa      	ldrh	r2, [r7, #6]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f8f2 	bl	8007fac <HAL_SPI_TransmitReceive>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	e0ea      	b.n	8007fa2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_SPI_Receive+0x52>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e0e3      	b.n	8007fa2 <HAL_SPI_Receive+0x21a>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007de2:	f7fd fa23 	bl	800522c <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d002      	beq.n	8007dfa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
 8007df6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007df8:	e0ca      	b.n	8007f90 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <HAL_SPI_Receive+0x7e>
 8007e00:	88fb      	ldrh	r3, [r7, #6]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e0a:	e0c1      	b.n	8007f90 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2204      	movs	r2, #4
 8007e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	88fa      	ldrh	r2, [r7, #6]
 8007e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	88fa      	ldrh	r2, [r7, #6]
 8007e2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e52:	d10f      	bne.n	8007e74 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d007      	beq.n	8007e92 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d162      	bne.n	8007f60 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007e9a:	e02e      	b.n	8007efa <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d115      	bne.n	8007ed6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f103 020c 	add.w	r2, r3, #12
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ed4:	e011      	b.n	8007efa <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ed6:	f7fd f9a9 	bl	800522c <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d803      	bhi.n	8007eee <HAL_SPI_Receive+0x166>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d102      	bne.n	8007ef4 <HAL_SPI_Receive+0x16c>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ef8:	e04a      	b.n	8007f90 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1cb      	bne.n	8007e9c <HAL_SPI_Receive+0x114>
 8007f04:	e031      	b.n	8007f6a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d113      	bne.n	8007f3c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	1c9a      	adds	r2, r3, #2
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f3a:	e011      	b.n	8007f60 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f3c:	f7fd f976 	bl	800522c <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d803      	bhi.n	8007f54 <HAL_SPI_Receive+0x1cc>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d102      	bne.n	8007f5a <HAL_SPI_Receive+0x1d2>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d102      	bne.n	8007f60 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007f5e:	e017      	b.n	8007f90 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1cd      	bne.n	8007f06 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 fa52 	bl	8008418 <SPI_EndRxTransaction>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	75fb      	strb	r3, [r7, #23]
 8007f8c:	e000      	b.n	8007f90 <HAL_SPI_Receive+0x208>
  }

error :
 8007f8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	; 0x30
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <HAL_SPI_TransmitReceive+0x2a>
 8007fcc:	f240 417e 	movw	r1, #1150	; 0x47e
 8007fd0:	4884      	ldr	r0, [pc, #528]	; (80081e4 <HAL_SPI_TransmitReceive+0x238>)
 8007fd2:	f7fc fc5e 	bl	8004892 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_SPI_TransmitReceive+0x38>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e18d      	b.n	8008300 <HAL_SPI_TransmitReceive+0x354>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fec:	f7fd f91e 	bl	800522c <HAL_GetTick>
 8007ff0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800800a:	2b01      	cmp	r3, #1
 800800c:	d00f      	beq.n	800802e <HAL_SPI_TransmitReceive+0x82>
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008014:	d107      	bne.n	8008026 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <HAL_SPI_TransmitReceive+0x7a>
 800801e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008022:	2b04      	cmp	r3, #4
 8008024:	d003      	beq.n	800802e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008026:	2302      	movs	r3, #2
 8008028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800802c:	e15e      	b.n	80082ec <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_SPI_TransmitReceive+0x94>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_SPI_TransmitReceive+0x94>
 800803a:	887b      	ldrh	r3, [r7, #2]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d103      	bne.n	8008048 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008046:	e151      	b.n	80082ec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b04      	cmp	r3, #4
 8008052:	d003      	beq.n	800805c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2205      	movs	r2, #5
 8008058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	887a      	ldrh	r2, [r7, #2]
 800806c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	887a      	ldrh	r2, [r7, #2]
 8008072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	887a      	ldrh	r2, [r7, #2]
 800807e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	887a      	ldrh	r2, [r7, #2]
 8008084:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b40      	cmp	r3, #64	; 0x40
 800809e:	d007      	beq.n	80080b0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b8:	d178      	bne.n	80081ac <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <HAL_SPI_TransmitReceive+0x11c>
 80080c2:	8b7b      	ldrh	r3, [r7, #26]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d166      	bne.n	8008196 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	881a      	ldrh	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d8:	1c9a      	adds	r2, r3, #2
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ec:	e053      	b.n	8008196 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d11b      	bne.n	8008134 <HAL_SPI_TransmitReceive+0x188>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008100:	b29b      	uxth	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d016      	beq.n	8008134 <HAL_SPI_TransmitReceive+0x188>
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d113      	bne.n	8008134 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	881a      	ldrh	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	1c9a      	adds	r2, r3, #2
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b01      	cmp	r3, #1
 8008140:	d119      	bne.n	8008176 <HAL_SPI_TransmitReceive+0x1ca>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d014      	beq.n	8008176 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	b292      	uxth	r2, r2
 8008158:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	1c9a      	adds	r2, r3, #2
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008168:	b29b      	uxth	r3, r3
 800816a:	3b01      	subs	r3, #1
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008172:	2301      	movs	r3, #1
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008176:	f7fd f859 	bl	800522c <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008182:	429a      	cmp	r2, r3
 8008184:	d807      	bhi.n	8008196 <HAL_SPI_TransmitReceive+0x1ea>
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d003      	beq.n	8008196 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008194:	e0aa      	b.n	80082ec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1a6      	bne.n	80080ee <HAL_SPI_TransmitReceive+0x142>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1a1      	bne.n	80080ee <HAL_SPI_TransmitReceive+0x142>
 80081aa:	e07f      	b.n	80082ac <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_SPI_TransmitReceive+0x20e>
 80081b4:	8b7b      	ldrh	r3, [r7, #26]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d16e      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	7812      	ldrb	r2, [r2, #0]
 80081c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	3b01      	subs	r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081e0:	e05a      	b.n	8008298 <HAL_SPI_TransmitReceive+0x2ec>
 80081e2:	bf00      	nop
 80081e4:	0800c83c 	.word	0x0800c83c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d11c      	bne.n	8008230 <HAL_SPI_TransmitReceive+0x284>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d017      	beq.n	8008230 <HAL_SPI_TransmitReceive+0x284>
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	2b01      	cmp	r3, #1
 8008204:	d114      	bne.n	8008230 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	7812      	ldrb	r2, [r2, #0]
 8008212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b01      	cmp	r3, #1
 800823c:	d119      	bne.n	8008272 <HAL_SPI_TransmitReceive+0x2c6>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d014      	beq.n	8008272 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800826e:	2301      	movs	r3, #1
 8008270:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008272:	f7fc ffdb 	bl	800522c <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800827e:	429a      	cmp	r2, r3
 8008280:	d803      	bhi.n	800828a <HAL_SPI_TransmitReceive+0x2de>
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d102      	bne.n	8008290 <HAL_SPI_TransmitReceive+0x2e4>
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008296:	e029      	b.n	80082ec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1a2      	bne.n	80081e8 <HAL_SPI_TransmitReceive+0x23c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d19d      	bne.n	80081e8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f917 	bl	80084e4 <SPI_EndRxTxTransaction>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d006      	beq.n	80082ca <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2220      	movs	r2, #32
 80082c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80082c8:	e010      	b.n	80082ec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10b      	bne.n	80082ea <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	e000      	b.n	80082ec <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80082ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008300:	4618      	mov	r0, r3
 8008302:	3730      	adds	r7, #48	; 0x30
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008318:	f7fc ff88 	bl	800522c <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	4413      	add	r3, r2
 8008326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008328:	f7fc ff80 	bl	800522c <HAL_GetTick>
 800832c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800832e:	4b39      	ldr	r3, [pc, #228]	; (8008414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	015b      	lsls	r3, r3, #5
 8008334:	0d1b      	lsrs	r3, r3, #20
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	fb02 f303 	mul.w	r3, r2, r3
 800833c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800833e:	e054      	b.n	80083ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d050      	beq.n	80083ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008348:	f7fc ff70 	bl	800522c <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	429a      	cmp	r2, r3
 8008356:	d902      	bls.n	800835e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d13d      	bne.n	80083da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800836c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008376:	d111      	bne.n	800839c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008380:	d004      	beq.n	800838c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800838a:	d107      	bne.n	800839c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800839a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083a4:	d10f      	bne.n	80083c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e017      	b.n	800840a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4013      	ands	r3, r2
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	bf0c      	ite	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	2300      	movne	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	429a      	cmp	r2, r3
 8008406:	d19b      	bne.n	8008340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	200001bc 	.word	0x200001bc

08008418 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800842c:	d111      	bne.n	8008452 <SPI_EndRxTransaction+0x3a>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008436:	d004      	beq.n	8008442 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008440:	d107      	bne.n	8008452 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008450:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800845a:	d12a      	bne.n	80084b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008464:	d012      	beq.n	800848c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2200      	movs	r2, #0
 800846e:	2180      	movs	r1, #128	; 0x80
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7ff ff49 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d02d      	beq.n	80084d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	f043 0220 	orr.w	r2, r3, #32
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e026      	b.n	80084da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2200      	movs	r2, #0
 8008494:	2101      	movs	r1, #1
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7ff ff36 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01a      	beq.n	80084d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a6:	f043 0220 	orr.w	r2, r3, #32
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e013      	b.n	80084da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2200      	movs	r2, #0
 80084ba:	2101      	movs	r1, #1
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff ff23 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084cc:	f043 0220 	orr.w	r2, r3, #32
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e000      	b.n	80084da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084f0:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <SPI_EndRxTxTransaction+0x7c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a1b      	ldr	r2, [pc, #108]	; (8008564 <SPI_EndRxTxTransaction+0x80>)
 80084f6:	fba2 2303 	umull	r2, r3, r2, r3
 80084fa:	0d5b      	lsrs	r3, r3, #21
 80084fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008500:	fb02 f303 	mul.w	r3, r2, r3
 8008504:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800850e:	d112      	bne.n	8008536 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	2180      	movs	r1, #128	; 0x80
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fef4 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d016      	beq.n	8008554 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852a:	f043 0220 	orr.w	r2, r3, #32
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e00f      	b.n	8008556 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00a      	beq.n	8008552 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	3b01      	subs	r3, #1
 8008540:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854c:	2b80      	cmp	r3, #128	; 0x80
 800854e:	d0f2      	beq.n	8008536 <SPI_EndRxTxTransaction+0x52>
 8008550:	e000      	b.n	8008554 <SPI_EndRxTxTransaction+0x70>
        break;
 8008552:	bf00      	nop
  }

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	200001bc 	.word	0x200001bc
 8008564:	165e9f81 	.word	0x165e9f81

08008568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e0c5      	b.n	8008706 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a64      	ldr	r2, [pc, #400]	; (8008710 <HAL_TIM_Base_Init+0x1a8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d045      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858c:	d040      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a60      	ldr	r2, [pc, #384]	; (8008714 <HAL_TIM_Base_Init+0x1ac>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d03b      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a5e      	ldr	r2, [pc, #376]	; (8008718 <HAL_TIM_Base_Init+0x1b0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d036      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a5d      	ldr	r2, [pc, #372]	; (800871c <HAL_TIM_Base_Init+0x1b4>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d031      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a5b      	ldr	r2, [pc, #364]	; (8008720 <HAL_TIM_Base_Init+0x1b8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d02c      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a5a      	ldr	r2, [pc, #360]	; (8008724 <HAL_TIM_Base_Init+0x1bc>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d027      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a58      	ldr	r2, [pc, #352]	; (8008728 <HAL_TIM_Base_Init+0x1c0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d022      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a57      	ldr	r2, [pc, #348]	; (800872c <HAL_TIM_Base_Init+0x1c4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d01d      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a55      	ldr	r2, [pc, #340]	; (8008730 <HAL_TIM_Base_Init+0x1c8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d018      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a54      	ldr	r2, [pc, #336]	; (8008734 <HAL_TIM_Base_Init+0x1cc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d013      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a52      	ldr	r2, [pc, #328]	; (8008738 <HAL_TIM_Base_Init+0x1d0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00e      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a51      	ldr	r2, [pc, #324]	; (800873c <HAL_TIM_Base_Init+0x1d4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a4f      	ldr	r2, [pc, #316]	; (8008740 <HAL_TIM_Base_Init+0x1d8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_TIM_Base_Init+0xa8>
 8008606:	f240 1113 	movw	r1, #275	; 0x113
 800860a:	484e      	ldr	r0, [pc, #312]	; (8008744 <HAL_TIM_Base_Init+0x1dc>)
 800860c:	f7fc f941 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d014      	beq.n	8008642 <HAL_TIM_Base_Init+0xda>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b10      	cmp	r3, #16
 800861e:	d010      	beq.n	8008642 <HAL_TIM_Base_Init+0xda>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b20      	cmp	r3, #32
 8008626:	d00c      	beq.n	8008642 <HAL_TIM_Base_Init+0xda>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d008      	beq.n	8008642 <HAL_TIM_Base_Init+0xda>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	2b60      	cmp	r3, #96	; 0x60
 8008636:	d004      	beq.n	8008642 <HAL_TIM_Base_Init+0xda>
 8008638:	f44f 718a 	mov.w	r1, #276	; 0x114
 800863c:	4841      	ldr	r0, [pc, #260]	; (8008744 <HAL_TIM_Base_Init+0x1dc>)
 800863e:	f7fc f928 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00e      	beq.n	8008668 <HAL_TIM_Base_Init+0x100>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d009      	beq.n	8008668 <HAL_TIM_Base_Init+0x100>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800865c:	d004      	beq.n	8008668 <HAL_TIM_Base_Init+0x100>
 800865e:	f240 1115 	movw	r1, #277	; 0x115
 8008662:	4838      	ldr	r0, [pc, #224]	; (8008744 <HAL_TIM_Base_Init+0x1dc>)
 8008664:	f7fc f915 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_TIM_Base_Init+0x11a>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d004      	beq.n	8008682 <HAL_TIM_Base_Init+0x11a>
 8008678:	f44f 718b 	mov.w	r1, #278	; 0x116
 800867c:	4831      	ldr	r0, [pc, #196]	; (8008744 <HAL_TIM_Base_Init+0x1dc>)
 800867e:	f7fc f908 	bl	8004892 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7fc fb18 	bl	8004ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4619      	mov	r1, r3
 80086ae:	4610      	mov	r0, r2
 80086b0:	f001 ffaa 	bl	800a608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40010000 	.word	0x40010000
 8008714:	40000400 	.word	0x40000400
 8008718:	40000800 	.word	0x40000800
 800871c:	40000c00 	.word	0x40000c00
 8008720:	40001000 	.word	0x40001000
 8008724:	40001400 	.word	0x40001400
 8008728:	40010400 	.word	0x40010400
 800872c:	40014000 	.word	0x40014000
 8008730:	40014400 	.word	0x40014400
 8008734:	40014800 	.word	0x40014800
 8008738:	40001800 	.word	0x40001800
 800873c:	40001c00 	.word	0x40001c00
 8008740:	40002000 	.word	0x40002000
 8008744:	0800c874 	.word	0x0800c874

08008748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a51      	ldr	r2, [pc, #324]	; (800889c <HAL_TIM_Base_Start_IT+0x154>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d045      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008762:	d040      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a4d      	ldr	r2, [pc, #308]	; (80088a0 <HAL_TIM_Base_Start_IT+0x158>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d03b      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a4c      	ldr	r2, [pc, #304]	; (80088a4 <HAL_TIM_Base_Start_IT+0x15c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d036      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a4a      	ldr	r2, [pc, #296]	; (80088a8 <HAL_TIM_Base_Start_IT+0x160>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d031      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a49      	ldr	r2, [pc, #292]	; (80088ac <HAL_TIM_Base_Start_IT+0x164>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d02c      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a47      	ldr	r2, [pc, #284]	; (80088b0 <HAL_TIM_Base_Start_IT+0x168>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d027      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a46      	ldr	r2, [pc, #280]	; (80088b4 <HAL_TIM_Base_Start_IT+0x16c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d022      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a44      	ldr	r2, [pc, #272]	; (80088b8 <HAL_TIM_Base_Start_IT+0x170>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01d      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a43      	ldr	r2, [pc, #268]	; (80088bc <HAL_TIM_Base_Start_IT+0x174>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d018      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a41      	ldr	r2, [pc, #260]	; (80088c0 <HAL_TIM_Base_Start_IT+0x178>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a40      	ldr	r2, [pc, #256]	; (80088c4 <HAL_TIM_Base_Start_IT+0x17c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00e      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a3e      	ldr	r2, [pc, #248]	; (80088c8 <HAL_TIM_Base_Start_IT+0x180>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d009      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a3d      	ldr	r2, [pc, #244]	; (80088cc <HAL_TIM_Base_Start_IT+0x184>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <HAL_TIM_Base_Start_IT+0x9e>
 80087dc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80087e0:	483b      	ldr	r0, [pc, #236]	; (80088d0 <HAL_TIM_Base_Start_IT+0x188>)
 80087e2:	f7fc f856 	bl	8004892 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d001      	beq.n	80087f6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e04e      	b.n	8008894 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2202      	movs	r2, #2
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f042 0201 	orr.w	r2, r2, #1
 800880c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a22      	ldr	r2, [pc, #136]	; (800889c <HAL_TIM_Base_Start_IT+0x154>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d022      	beq.n	800885e <HAL_TIM_Base_Start_IT+0x116>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008820:	d01d      	beq.n	800885e <HAL_TIM_Base_Start_IT+0x116>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1e      	ldr	r2, [pc, #120]	; (80088a0 <HAL_TIM_Base_Start_IT+0x158>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d018      	beq.n	800885e <HAL_TIM_Base_Start_IT+0x116>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1c      	ldr	r2, [pc, #112]	; (80088a4 <HAL_TIM_Base_Start_IT+0x15c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d013      	beq.n	800885e <HAL_TIM_Base_Start_IT+0x116>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1b      	ldr	r2, [pc, #108]	; (80088a8 <HAL_TIM_Base_Start_IT+0x160>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00e      	beq.n	800885e <HAL_TIM_Base_Start_IT+0x116>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1b      	ldr	r2, [pc, #108]	; (80088b4 <HAL_TIM_Base_Start_IT+0x16c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d009      	beq.n	800885e <HAL_TIM_Base_Start_IT+0x116>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1a      	ldr	r2, [pc, #104]	; (80088b8 <HAL_TIM_Base_Start_IT+0x170>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d004      	beq.n	800885e <HAL_TIM_Base_Start_IT+0x116>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <HAL_TIM_Base_Start_IT+0x17c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d111      	bne.n	8008882 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b06      	cmp	r3, #6
 800886e:	d010      	beq.n	8008892 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0201 	orr.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008880:	e007      	b.n	8008892 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f042 0201 	orr.w	r2, r2, #1
 8008890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40001000 	.word	0x40001000
 80088b0:	40001400 	.word	0x40001400
 80088b4:	40010400 	.word	0x40010400
 80088b8:	40014000 	.word	0x40014000
 80088bc:	40014400 	.word	0x40014400
 80088c0:	40014800 	.word	0x40014800
 80088c4:	40001800 	.word	0x40001800
 80088c8:	40001c00 	.word	0x40001c00
 80088cc:	40002000 	.word	0x40002000
 80088d0:	0800c874 	.word	0x0800c874

080088d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e0c5      	b.n	8008a72 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a64      	ldr	r2, [pc, #400]	; (8008a7c <HAL_TIM_PWM_Init+0x1a8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d045      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f8:	d040      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a60      	ldr	r2, [pc, #384]	; (8008a80 <HAL_TIM_PWM_Init+0x1ac>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d03b      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a5e      	ldr	r2, [pc, #376]	; (8008a84 <HAL_TIM_PWM_Init+0x1b0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d036      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a5d      	ldr	r2, [pc, #372]	; (8008a88 <HAL_TIM_PWM_Init+0x1b4>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d031      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a5b      	ldr	r2, [pc, #364]	; (8008a8c <HAL_TIM_PWM_Init+0x1b8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d02c      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a5a      	ldr	r2, [pc, #360]	; (8008a90 <HAL_TIM_PWM_Init+0x1bc>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d027      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a58      	ldr	r2, [pc, #352]	; (8008a94 <HAL_TIM_PWM_Init+0x1c0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d022      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a57      	ldr	r2, [pc, #348]	; (8008a98 <HAL_TIM_PWM_Init+0x1c4>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d01d      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a55      	ldr	r2, [pc, #340]	; (8008a9c <HAL_TIM_PWM_Init+0x1c8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d018      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a54      	ldr	r2, [pc, #336]	; (8008aa0 <HAL_TIM_PWM_Init+0x1cc>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d013      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a52      	ldr	r2, [pc, #328]	; (8008aa4 <HAL_TIM_PWM_Init+0x1d0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00e      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a51      	ldr	r2, [pc, #324]	; (8008aa8 <HAL_TIM_PWM_Init+0x1d4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d009      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a4f      	ldr	r2, [pc, #316]	; (8008aac <HAL_TIM_PWM_Init+0x1d8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <HAL_TIM_PWM_Init+0xa8>
 8008972:	f240 5129 	movw	r1, #1321	; 0x529
 8008976:	484e      	ldr	r0, [pc, #312]	; (8008ab0 <HAL_TIM_PWM_Init+0x1dc>)
 8008978:	f7fb ff8b 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d014      	beq.n	80089ae <HAL_TIM_PWM_Init+0xda>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b10      	cmp	r3, #16
 800898a:	d010      	beq.n	80089ae <HAL_TIM_PWM_Init+0xda>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	2b20      	cmp	r3, #32
 8008992:	d00c      	beq.n	80089ae <HAL_TIM_PWM_Init+0xda>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b40      	cmp	r3, #64	; 0x40
 800899a:	d008      	beq.n	80089ae <HAL_TIM_PWM_Init+0xda>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2b60      	cmp	r3, #96	; 0x60
 80089a2:	d004      	beq.n	80089ae <HAL_TIM_PWM_Init+0xda>
 80089a4:	f240 512a 	movw	r1, #1322	; 0x52a
 80089a8:	4841      	ldr	r0, [pc, #260]	; (8008ab0 <HAL_TIM_PWM_Init+0x1dc>)
 80089aa:	f7fb ff72 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <HAL_TIM_PWM_Init+0x100>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089be:	d009      	beq.n	80089d4 <HAL_TIM_PWM_Init+0x100>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c8:	d004      	beq.n	80089d4 <HAL_TIM_PWM_Init+0x100>
 80089ca:	f240 512b 	movw	r1, #1323	; 0x52b
 80089ce:	4838      	ldr	r0, [pc, #224]	; (8008ab0 <HAL_TIM_PWM_Init+0x1dc>)
 80089d0:	f7fb ff5f 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <HAL_TIM_PWM_Init+0x11a>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	2b80      	cmp	r3, #128	; 0x80
 80089e2:	d004      	beq.n	80089ee <HAL_TIM_PWM_Init+0x11a>
 80089e4:	f240 512c 	movw	r1, #1324	; 0x52c
 80089e8:	4831      	ldr	r0, [pc, #196]	; (8008ab0 <HAL_TIM_PWM_Init+0x1dc>)
 80089ea:	f7fb ff52 	bl	8004892 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d106      	bne.n	8008a08 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f856 	bl	8008ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f001 fdf4 	bl	800a608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40000400 	.word	0x40000400
 8008a84:	40000800 	.word	0x40000800
 8008a88:	40000c00 	.word	0x40000c00
 8008a8c:	40001000 	.word	0x40001000
 8008a90:	40001400 	.word	0x40001400
 8008a94:	40010400 	.word	0x40010400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400
 8008aa0:	40014800 	.word	0x40014800
 8008aa4:	40001800 	.word	0x40001800
 8008aa8:	40001c00 	.word	0x40001c00
 8008aac:	40002000 	.word	0x40002000
 8008ab0:	0800c874 	.word	0x0800c874

08008ab4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a84      	ldr	r2, [pc, #528]	; (8008ce8 <HAL_TIM_PWM_Start+0x220>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d10f      	bne.n	8008afc <HAL_TIM_PWM_Start+0x34>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 809f 	beq.w	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	f000 809b 	beq.w	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	f000 8097 	beq.w	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b0c      	cmp	r3, #12
 8008af8:	f000 8093 	beq.w	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b04:	d10e      	bne.n	8008b24 <HAL_TIM_PWM_Start+0x5c>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 808a 	beq.w	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	f000 8086 	beq.w	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	f000 8082 	beq.w	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b0c      	cmp	r3, #12
 8008b22:	d07e      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a70      	ldr	r2, [pc, #448]	; (8008cec <HAL_TIM_PWM_Start+0x224>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d10b      	bne.n	8008b46 <HAL_TIM_PWM_Start+0x7e>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d076      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d073      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d070      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b0c      	cmp	r3, #12
 8008b44:	d06d      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a69      	ldr	r2, [pc, #420]	; (8008cf0 <HAL_TIM_PWM_Start+0x228>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d10b      	bne.n	8008b68 <HAL_TIM_PWM_Start+0xa0>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d065      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d062      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d05f      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b0c      	cmp	r3, #12
 8008b66:	d05c      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a61      	ldr	r2, [pc, #388]	; (8008cf4 <HAL_TIM_PWM_Start+0x22c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d10b      	bne.n	8008b8a <HAL_TIM_PWM_Start+0xc2>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d054      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d051      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d04e      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b0c      	cmp	r3, #12
 8008b88:	d04b      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a5a      	ldr	r2, [pc, #360]	; (8008cf8 <HAL_TIM_PWM_Start+0x230>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d10b      	bne.n	8008bac <HAL_TIM_PWM_Start+0xe4>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d043      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d040      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d03d      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b0c      	cmp	r3, #12
 8008baa:	d03a      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a52      	ldr	r2, [pc, #328]	; (8008cfc <HAL_TIM_PWM_Start+0x234>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d105      	bne.n	8008bc2 <HAL_TIM_PWM_Start+0xfa>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d032      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d02f      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a4e      	ldr	r2, [pc, #312]	; (8008d00 <HAL_TIM_PWM_Start+0x238>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d102      	bne.n	8008bd2 <HAL_TIM_PWM_Start+0x10a>
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d027      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a4b      	ldr	r2, [pc, #300]	; (8008d04 <HAL_TIM_PWM_Start+0x23c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d102      	bne.n	8008be2 <HAL_TIM_PWM_Start+0x11a>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01f      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a48      	ldr	r2, [pc, #288]	; (8008d08 <HAL_TIM_PWM_Start+0x240>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d105      	bne.n	8008bf8 <HAL_TIM_PWM_Start+0x130>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d017      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d014      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a43      	ldr	r2, [pc, #268]	; (8008d0c <HAL_TIM_PWM_Start+0x244>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d102      	bne.n	8008c08 <HAL_TIM_PWM_Start+0x140>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00c      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a40      	ldr	r2, [pc, #256]	; (8008d10 <HAL_TIM_PWM_Start+0x248>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d102      	bne.n	8008c18 <HAL_TIM_PWM_Start+0x150>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d004      	beq.n	8008c22 <HAL_TIM_PWM_Start+0x15a>
 8008c18:	f240 51af 	movw	r1, #1455	; 0x5af
 8008c1c:	483d      	ldr	r0, [pc, #244]	; (8008d14 <HAL_TIM_PWM_Start+0x24c>)
 8008c1e:	f7fb fe38 	bl	8004892 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d109      	bne.n	8008c3c <HAL_TIM_PWM_Start+0x174>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	bf14      	ite	ne
 8008c34:	2301      	movne	r3, #1
 8008c36:	2300      	moveq	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	e022      	b.n	8008c82 <HAL_TIM_PWM_Start+0x1ba>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d109      	bne.n	8008c56 <HAL_TIM_PWM_Start+0x18e>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	bf14      	ite	ne
 8008c4e:	2301      	movne	r3, #1
 8008c50:	2300      	moveq	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	e015      	b.n	8008c82 <HAL_TIM_PWM_Start+0x1ba>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d109      	bne.n	8008c70 <HAL_TIM_PWM_Start+0x1a8>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	bf14      	ite	ne
 8008c68:	2301      	movne	r3, #1
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	e008      	b.n	8008c82 <HAL_TIM_PWM_Start+0x1ba>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	bf14      	ite	ne
 8008c7c:	2301      	movne	r3, #1
 8008c7e:	2300      	moveq	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e094      	b.n	8008db4 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIM_PWM_Start+0x1d2>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c98:	e013      	b.n	8008cc2 <HAL_TIM_PWM_Start+0x1fa>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d104      	bne.n	8008caa <HAL_TIM_PWM_Start+0x1e2>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ca8:	e00b      	b.n	8008cc2 <HAL_TIM_PWM_Start+0x1fa>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d104      	bne.n	8008cba <HAL_TIM_PWM_Start+0x1f2>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cb8:	e003      	b.n	8008cc2 <HAL_TIM_PWM_Start+0x1fa>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 f93a 	bl	800af44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a04      	ldr	r2, [pc, #16]	; (8008ce8 <HAL_TIM_PWM_Start+0x220>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d004      	beq.n	8008ce4 <HAL_TIM_PWM_Start+0x21c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a06      	ldr	r2, [pc, #24]	; (8008cf8 <HAL_TIM_PWM_Start+0x230>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d119      	bne.n	8008d18 <HAL_TIM_PWM_Start+0x250>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e018      	b.n	8008d1a <HAL_TIM_PWM_Start+0x252>
 8008ce8:	40010000 	.word	0x40010000
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800
 8008cf4:	40000c00 	.word	0x40000c00
 8008cf8:	40010400 	.word	0x40010400
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40014400 	.word	0x40014400
 8008d04:	40014800 	.word	0x40014800
 8008d08:	40001800 	.word	0x40001800
 8008d0c:	40001c00 	.word	0x40001c00
 8008d10:	40002000 	.word	0x40002000
 8008d14:	0800c874 	.word	0x0800c874
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a22      	ldr	r2, [pc, #136]	; (8008dbc <HAL_TIM_PWM_Start+0x2f4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d022      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x2b6>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d40:	d01d      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x2b6>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a1e      	ldr	r2, [pc, #120]	; (8008dc0 <HAL_TIM_PWM_Start+0x2f8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d018      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x2b6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a1c      	ldr	r2, [pc, #112]	; (8008dc4 <HAL_TIM_PWM_Start+0x2fc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d013      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x2b6>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <HAL_TIM_PWM_Start+0x300>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00e      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x2b6>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a19      	ldr	r2, [pc, #100]	; (8008dcc <HAL_TIM_PWM_Start+0x304>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d009      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x2b6>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a18      	ldr	r2, [pc, #96]	; (8008dd0 <HAL_TIM_PWM_Start+0x308>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d004      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x2b6>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a16      	ldr	r2, [pc, #88]	; (8008dd4 <HAL_TIM_PWM_Start+0x30c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d111      	bne.n	8008da2 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b06      	cmp	r3, #6
 8008d8e:	d010      	beq.n	8008db2 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da0:	e007      	b.n	8008db2 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 0201 	orr.w	r2, r2, #1
 8008db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	40010000 	.word	0x40010000
 8008dc0:	40000400 	.word	0x40000400
 8008dc4:	40000800 	.word	0x40000800
 8008dc8:	40000c00 	.word	0x40000c00
 8008dcc:	40010400 	.word	0x40010400
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40001800 	.word	0x40001800

08008dd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e0c5      	b.n	8008f76 <HAL_TIM_IC_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a64      	ldr	r2, [pc, #400]	; (8008f80 <HAL_TIM_IC_Init+0x1a8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d045      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfc:	d040      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a60      	ldr	r2, [pc, #384]	; (8008f84 <HAL_TIM_IC_Init+0x1ac>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d03b      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a5e      	ldr	r2, [pc, #376]	; (8008f88 <HAL_TIM_IC_Init+0x1b0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d036      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a5d      	ldr	r2, [pc, #372]	; (8008f8c <HAL_TIM_IC_Init+0x1b4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d031      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a5b      	ldr	r2, [pc, #364]	; (8008f90 <HAL_TIM_IC_Init+0x1b8>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d02c      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a5a      	ldr	r2, [pc, #360]	; (8008f94 <HAL_TIM_IC_Init+0x1bc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d027      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a58      	ldr	r2, [pc, #352]	; (8008f98 <HAL_TIM_IC_Init+0x1c0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d022      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a57      	ldr	r2, [pc, #348]	; (8008f9c <HAL_TIM_IC_Init+0x1c4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d01d      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a55      	ldr	r2, [pc, #340]	; (8008fa0 <HAL_TIM_IC_Init+0x1c8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d018      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a54      	ldr	r2, [pc, #336]	; (8008fa4 <HAL_TIM_IC_Init+0x1cc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d013      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a52      	ldr	r2, [pc, #328]	; (8008fa8 <HAL_TIM_IC_Init+0x1d0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00e      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a51      	ldr	r2, [pc, #324]	; (8008fac <HAL_TIM_IC_Init+0x1d4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d009      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a4f      	ldr	r2, [pc, #316]	; (8008fb0 <HAL_TIM_IC_Init+0x1d8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d004      	beq.n	8008e80 <HAL_TIM_IC_Init+0xa8>
 8008e76:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8008e7a:	484e      	ldr	r0, [pc, #312]	; (8008fb4 <HAL_TIM_IC_Init+0x1dc>)
 8008e7c:	f7fb fd09 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d014      	beq.n	8008eb2 <HAL_TIM_IC_Init+0xda>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b10      	cmp	r3, #16
 8008e8e:	d010      	beq.n	8008eb2 <HAL_TIM_IC_Init+0xda>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d00c      	beq.n	8008eb2 <HAL_TIM_IC_Init+0xda>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b40      	cmp	r3, #64	; 0x40
 8008e9e:	d008      	beq.n	8008eb2 <HAL_TIM_IC_Init+0xda>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	2b60      	cmp	r3, #96	; 0x60
 8008ea6:	d004      	beq.n	8008eb2 <HAL_TIM_IC_Init+0xda>
 8008ea8:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8008eac:	4841      	ldr	r0, [pc, #260]	; (8008fb4 <HAL_TIM_IC_Init+0x1dc>)
 8008eae:	f7fb fcf0 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00e      	beq.n	8008ed8 <HAL_TIM_IC_Init+0x100>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec2:	d009      	beq.n	8008ed8 <HAL_TIM_IC_Init+0x100>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ecc:	d004      	beq.n	8008ed8 <HAL_TIM_IC_Init+0x100>
 8008ece:	f240 71c1 	movw	r1, #1985	; 0x7c1
 8008ed2:	4838      	ldr	r0, [pc, #224]	; (8008fb4 <HAL_TIM_IC_Init+0x1dc>)
 8008ed4:	f7fb fcdd 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <HAL_TIM_IC_Init+0x11a>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	2b80      	cmp	r3, #128	; 0x80
 8008ee6:	d004      	beq.n	8008ef2 <HAL_TIM_IC_Init+0x11a>
 8008ee8:	f240 71c2 	movw	r1, #1986	; 0x7c2
 8008eec:	4831      	ldr	r0, [pc, #196]	; (8008fb4 <HAL_TIM_IC_Init+0x1dc>)
 8008eee:	f7fb fcd0 	bl	8004892 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7fb fe90 	bl	8004c2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f001 fb72 	bl	800a608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	40010000 	.word	0x40010000
 8008f84:	40000400 	.word	0x40000400
 8008f88:	40000800 	.word	0x40000800
 8008f8c:	40000c00 	.word	0x40000c00
 8008f90:	40001000 	.word	0x40001000
 8008f94:	40001400 	.word	0x40001400
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40014400 	.word	0x40014400
 8008fa4:	40014800 	.word	0x40014800
 8008fa8:	40001800 	.word	0x40001800
 8008fac:	40001c00 	.word	0x40001c00
 8008fb0:	40002000 	.word	0x40002000
 8008fb4:	0800c874 	.word	0x0800c874

08008fb8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_IC_Start_IT+0x1e>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	e013      	b.n	8008ffe <HAL_TIM_IC_Start_IT+0x46>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d104      	bne.n	8008fe6 <HAL_TIM_IC_Start_IT+0x2e>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	e00b      	b.n	8008ffe <HAL_TIM_IC_Start_IT+0x46>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d104      	bne.n	8008ff6 <HAL_TIM_IC_Start_IT+0x3e>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	e003      	b.n	8008ffe <HAL_TIM_IC_Start_IT+0x46>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d104      	bne.n	8009010 <HAL_TIM_IC_Start_IT+0x58>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800900c:	b2db      	uxtb	r3, r3
 800900e:	e013      	b.n	8009038 <HAL_TIM_IC_Start_IT+0x80>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b04      	cmp	r3, #4
 8009014:	d104      	bne.n	8009020 <HAL_TIM_IC_Start_IT+0x68>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800901c:	b2db      	uxtb	r3, r3
 800901e:	e00b      	b.n	8009038 <HAL_TIM_IC_Start_IT+0x80>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b08      	cmp	r3, #8
 8009024:	d104      	bne.n	8009030 <HAL_TIM_IC_Start_IT+0x78>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800902c:	b2db      	uxtb	r3, r3
 800902e:	e003      	b.n	8009038 <HAL_TIM_IC_Start_IT+0x80>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009036:	b2db      	uxtb	r3, r3
 8009038:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a95      	ldr	r2, [pc, #596]	; (8009294 <HAL_TIM_IC_Start_IT+0x2dc>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d10f      	bne.n	8009064 <HAL_TIM_IC_Start_IT+0xac>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 809f 	beq.w	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b04      	cmp	r3, #4
 8009050:	f000 809b 	beq.w	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b08      	cmp	r3, #8
 8009058:	f000 8097 	beq.w	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b0c      	cmp	r3, #12
 8009060:	f000 8093 	beq.w	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906c:	d10e      	bne.n	800908c <HAL_TIM_IC_Start_IT+0xd4>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 808a 	beq.w	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b04      	cmp	r3, #4
 800907a:	f000 8086 	beq.w	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b08      	cmp	r3, #8
 8009082:	f000 8082 	beq.w	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b0c      	cmp	r3, #12
 800908a:	d07e      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a81      	ldr	r2, [pc, #516]	; (8009298 <HAL_TIM_IC_Start_IT+0x2e0>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d10b      	bne.n	80090ae <HAL_TIM_IC_Start_IT+0xf6>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d076      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d073      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d070      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b0c      	cmp	r3, #12
 80090ac:	d06d      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a7a      	ldr	r2, [pc, #488]	; (800929c <HAL_TIM_IC_Start_IT+0x2e4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d10b      	bne.n	80090d0 <HAL_TIM_IC_Start_IT+0x118>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d065      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d062      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d05f      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b0c      	cmp	r3, #12
 80090ce:	d05c      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a72      	ldr	r2, [pc, #456]	; (80092a0 <HAL_TIM_IC_Start_IT+0x2e8>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d10b      	bne.n	80090f2 <HAL_TIM_IC_Start_IT+0x13a>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d054      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d051      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	d04e      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b0c      	cmp	r3, #12
 80090f0:	d04b      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a6b      	ldr	r2, [pc, #428]	; (80092a4 <HAL_TIM_IC_Start_IT+0x2ec>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d10b      	bne.n	8009114 <HAL_TIM_IC_Start_IT+0x15c>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d043      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b04      	cmp	r3, #4
 8009106:	d040      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b08      	cmp	r3, #8
 800910c:	d03d      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b0c      	cmp	r3, #12
 8009112:	d03a      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a63      	ldr	r2, [pc, #396]	; (80092a8 <HAL_TIM_IC_Start_IT+0x2f0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d105      	bne.n	800912a <HAL_TIM_IC_Start_IT+0x172>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d032      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b04      	cmp	r3, #4
 8009128:	d02f      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a5f      	ldr	r2, [pc, #380]	; (80092ac <HAL_TIM_IC_Start_IT+0x2f4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d102      	bne.n	800913a <HAL_TIM_IC_Start_IT+0x182>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d027      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a5c      	ldr	r2, [pc, #368]	; (80092b0 <HAL_TIM_IC_Start_IT+0x2f8>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d102      	bne.n	800914a <HAL_TIM_IC_Start_IT+0x192>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01f      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a59      	ldr	r2, [pc, #356]	; (80092b4 <HAL_TIM_IC_Start_IT+0x2fc>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d105      	bne.n	8009160 <HAL_TIM_IC_Start_IT+0x1a8>
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d017      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b04      	cmp	r3, #4
 800915e:	d014      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a54      	ldr	r2, [pc, #336]	; (80092b8 <HAL_TIM_IC_Start_IT+0x300>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d102      	bne.n	8009170 <HAL_TIM_IC_Start_IT+0x1b8>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00c      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a51      	ldr	r2, [pc, #324]	; (80092bc <HAL_TIM_IC_Start_IT+0x304>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d102      	bne.n	8009180 <HAL_TIM_IC_Start_IT+0x1c8>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x1d2>
 8009180:	f640 019b 	movw	r1, #2203	; 0x89b
 8009184:	484e      	ldr	r0, [pc, #312]	; (80092c0 <HAL_TIM_IC_Start_IT+0x308>)
 8009186:	f7fb fb84 	bl	8004892 <assert_failed>

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d102      	bne.n	8009196 <HAL_TIM_IC_Start_IT+0x1de>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009190:	7b7b      	ldrb	r3, [r7, #13]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d001      	beq.n	800919a <HAL_TIM_IC_Start_IT+0x1e2>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e0e4      	b.n	8009364 <HAL_TIM_IC_Start_IT+0x3ac>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <HAL_TIM_IC_Start_IT+0x1f2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091a8:	e013      	b.n	80091d2 <HAL_TIM_IC_Start_IT+0x21a>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d104      	bne.n	80091ba <HAL_TIM_IC_Start_IT+0x202>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091b8:	e00b      	b.n	80091d2 <HAL_TIM_IC_Start_IT+0x21a>
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d104      	bne.n	80091ca <HAL_TIM_IC_Start_IT+0x212>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091c8:	e003      	b.n	80091d2 <HAL_TIM_IC_Start_IT+0x21a>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2202      	movs	r2, #2
 80091ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <HAL_TIM_IC_Start_IT+0x22a>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091e0:	e013      	b.n	800920a <HAL_TIM_IC_Start_IT+0x252>
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	d104      	bne.n	80091f2 <HAL_TIM_IC_Start_IT+0x23a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091f0:	e00b      	b.n	800920a <HAL_TIM_IC_Start_IT+0x252>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d104      	bne.n	8009202 <HAL_TIM_IC_Start_IT+0x24a>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009200:	e003      	b.n	800920a <HAL_TIM_IC_Start_IT+0x252>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2202      	movs	r2, #2
 8009206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b0c      	cmp	r3, #12
 800920e:	d859      	bhi.n	80092c4 <HAL_TIM_IC_Start_IT+0x30c>
 8009210:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <HAL_TIM_IC_Start_IT+0x260>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	0800924d 	.word	0x0800924d
 800921c:	080092c5 	.word	0x080092c5
 8009220:	080092c5 	.word	0x080092c5
 8009224:	080092c5 	.word	0x080092c5
 8009228:	0800925f 	.word	0x0800925f
 800922c:	080092c5 	.word	0x080092c5
 8009230:	080092c5 	.word	0x080092c5
 8009234:	080092c5 	.word	0x080092c5
 8009238:	08009271 	.word	0x08009271
 800923c:	080092c5 	.word	0x080092c5
 8009240:	080092c5 	.word	0x080092c5
 8009244:	080092c5 	.word	0x080092c5
 8009248:	08009283 	.word	0x08009283
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0202 	orr.w	r2, r2, #2
 800925a:	60da      	str	r2, [r3, #12]
      break;
 800925c:	e035      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0204 	orr.w	r2, r2, #4
 800926c:	60da      	str	r2, [r3, #12]
      break;
 800926e:	e02c      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0208 	orr.w	r2, r2, #8
 800927e:	60da      	str	r2, [r3, #12]
      break;
 8009280:	e023      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x312>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0210 	orr.w	r2, r2, #16
 8009290:	60da      	str	r2, [r3, #12]
      break;
 8009292:	e01a      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x312>
 8009294:	40010000 	.word	0x40010000
 8009298:	40000400 	.word	0x40000400
 800929c:	40000800 	.word	0x40000800
 80092a0:	40000c00 	.word	0x40000c00
 80092a4:	40010400 	.word	0x40010400
 80092a8:	40014000 	.word	0x40014000
 80092ac:	40014400 	.word	0x40014400
 80092b0:	40014800 	.word	0x40014800
 80092b4:	40001800 	.word	0x40001800
 80092b8:	40001c00 	.word	0x40001c00
 80092bc:	40002000 	.word	0x40002000
 80092c0:	0800c874 	.word	0x0800c874
    }

    default:
      status = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
      break;
 80092c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d148      	bne.n	8009362 <HAL_TIM_IC_Start_IT+0x3aa>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2201      	movs	r2, #1
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	4618      	mov	r0, r3
 80092da:	f001 fe33 	bl	800af44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a22      	ldr	r2, [pc, #136]	; (800936c <HAL_TIM_IC_Start_IT+0x3b4>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d022      	beq.n	800932e <HAL_TIM_IC_Start_IT+0x376>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f0:	d01d      	beq.n	800932e <HAL_TIM_IC_Start_IT+0x376>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <HAL_TIM_IC_Start_IT+0x3b8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d018      	beq.n	800932e <HAL_TIM_IC_Start_IT+0x376>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a1c      	ldr	r2, [pc, #112]	; (8009374 <HAL_TIM_IC_Start_IT+0x3bc>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d013      	beq.n	800932e <HAL_TIM_IC_Start_IT+0x376>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a1b      	ldr	r2, [pc, #108]	; (8009378 <HAL_TIM_IC_Start_IT+0x3c0>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00e      	beq.n	800932e <HAL_TIM_IC_Start_IT+0x376>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a19      	ldr	r2, [pc, #100]	; (800937c <HAL_TIM_IC_Start_IT+0x3c4>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d009      	beq.n	800932e <HAL_TIM_IC_Start_IT+0x376>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a18      	ldr	r2, [pc, #96]	; (8009380 <HAL_TIM_IC_Start_IT+0x3c8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d004      	beq.n	800932e <HAL_TIM_IC_Start_IT+0x376>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a16      	ldr	r2, [pc, #88]	; (8009384 <HAL_TIM_IC_Start_IT+0x3cc>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d111      	bne.n	8009352 <HAL_TIM_IC_Start_IT+0x39a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b06      	cmp	r3, #6
 800933e:	d010      	beq.n	8009362 <HAL_TIM_IC_Start_IT+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009350:	e007      	b.n	8009362 <HAL_TIM_IC_Start_IT+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0201 	orr.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	40010000 	.word	0x40010000
 8009370:	40000400 	.word	0x40000400
 8009374:	40000800 	.word	0x40000800
 8009378:	40000c00 	.word	0x40000c00
 800937c:	40010400 	.word	0x40010400
 8009380:	40014000 	.word	0x40014000
 8009384:	40001800 	.word	0x40001800

08009388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b02      	cmp	r3, #2
 800939c:	d122      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d11b      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0202 	mvn.w	r2, #2
 80093b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7f8 f804 	bl	80013d8 <HAL_TIM_IC_CaptureCallback>
 80093d0:	e005      	b.n	80093de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 f8fa 	bl	800a5cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f901 	bl	800a5e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d122      	bne.n	8009438 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d11b      	bne.n	8009438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0204 	mvn.w	r2, #4
 8009408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2202      	movs	r2, #2
 800940e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7f7 ffda 	bl	80013d8 <HAL_TIM_IC_CaptureCallback>
 8009424:	e005      	b.n	8009432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 f8d0 	bl	800a5cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 f8d7 	bl	800a5e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0308 	and.w	r3, r3, #8
 8009442:	2b08      	cmp	r3, #8
 8009444:	d122      	bne.n	800948c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b08      	cmp	r3, #8
 8009452:	d11b      	bne.n	800948c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0208 	mvn.w	r2, #8
 800945c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2204      	movs	r2, #4
 8009462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7f7 ffb0 	bl	80013d8 <HAL_TIM_IC_CaptureCallback>
 8009478:	e005      	b.n	8009486 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f001 f8a6 	bl	800a5cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 f8ad 	bl	800a5e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0310 	and.w	r3, r3, #16
 8009496:	2b10      	cmp	r3, #16
 8009498:	d122      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0310 	and.w	r3, r3, #16
 80094a4:	2b10      	cmp	r3, #16
 80094a6:	d11b      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0210 	mvn.w	r2, #16
 80094b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2208      	movs	r2, #8
 80094b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f7 ff86 	bl	80013d8 <HAL_TIM_IC_CaptureCallback>
 80094cc:	e005      	b.n	80094da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 f87c 	bl	800a5cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 f883 	bl	800a5e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10e      	bne.n	800950c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d107      	bne.n	800950c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f06f 0201 	mvn.w	r2, #1
 8009504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7f7 ff08 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009516:	2b80      	cmp	r3, #128	; 0x80
 8009518:	d10e      	bne.n	8009538 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009524:	2b80      	cmp	r3, #128	; 0x80
 8009526:	d107      	bne.n	8009538 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 ff3e 	bl	800b3b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d10e      	bne.n	8009564 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009550:	2b40      	cmp	r3, #64	; 0x40
 8009552:	d107      	bne.n	8009564 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800955c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 f848 	bl	800a5f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b20      	cmp	r3, #32
 8009570:	d10e      	bne.n	8009590 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f003 0320 	and.w	r3, r3, #32
 800957c:	2b20      	cmp	r3, #32
 800957e:	d107      	bne.n	8009590 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f06f 0220 	mvn.w	r2, #32
 8009588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 ff08 	bl	800b3a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a7a      	ldr	r2, [pc, #488]	; (8009798 <HAL_TIM_IC_ConfigChannel+0x200>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d03b      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ba:	d036      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a76      	ldr	r2, [pc, #472]	; (800979c <HAL_TIM_IC_ConfigChannel+0x204>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d031      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a75      	ldr	r2, [pc, #468]	; (80097a0 <HAL_TIM_IC_ConfigChannel+0x208>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d02c      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a73      	ldr	r2, [pc, #460]	; (80097a4 <HAL_TIM_IC_ConfigChannel+0x20c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d027      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a72      	ldr	r2, [pc, #456]	; (80097a8 <HAL_TIM_IC_ConfigChannel+0x210>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d022      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a70      	ldr	r2, [pc, #448]	; (80097ac <HAL_TIM_IC_ConfigChannel+0x214>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d01d      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a6f      	ldr	r2, [pc, #444]	; (80097b0 <HAL_TIM_IC_ConfigChannel+0x218>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d018      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a6d      	ldr	r2, [pc, #436]	; (80097b4 <HAL_TIM_IC_ConfigChannel+0x21c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d013      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a6c      	ldr	r2, [pc, #432]	; (80097b8 <HAL_TIM_IC_ConfigChannel+0x220>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d00e      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a6a      	ldr	r2, [pc, #424]	; (80097bc <HAL_TIM_IC_ConfigChannel+0x224>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d009      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a69      	ldr	r2, [pc, #420]	; (80097c0 <HAL_TIM_IC_ConfigChannel+0x228>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d004      	beq.n	800962a <HAL_TIM_IC_ConfigChannel+0x92>
 8009620:	f241 0112 	movw	r1, #4114	; 0x1012
 8009624:	4867      	ldr	r0, [pc, #412]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x22c>)
 8009626:	f7fb f934 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00c      	beq.n	800964c <HAL_TIM_IC_ConfigChannel+0xb4>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d008      	beq.n	800964c <HAL_TIM_IC_ConfigChannel+0xb4>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b0a      	cmp	r3, #10
 8009640:	d004      	beq.n	800964c <HAL_TIM_IC_ConfigChannel+0xb4>
 8009642:	f241 0113 	movw	r1, #4115	; 0x1013
 8009646:	485f      	ldr	r0, [pc, #380]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x22c>)
 8009648:	f7fb f923 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d00c      	beq.n	800966e <HAL_TIM_IC_ConfigChannel+0xd6>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d008      	beq.n	800966e <HAL_TIM_IC_ConfigChannel+0xd6>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2b03      	cmp	r3, #3
 8009662:	d004      	beq.n	800966e <HAL_TIM_IC_ConfigChannel+0xd6>
 8009664:	f241 0114 	movw	r1, #4116	; 0x1014
 8009668:	4856      	ldr	r0, [pc, #344]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800966a:	f7fb f912 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d010      	beq.n	8009698 <HAL_TIM_IC_ConfigChannel+0x100>
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	2b04      	cmp	r3, #4
 800967c:	d00c      	beq.n	8009698 <HAL_TIM_IC_ConfigChannel+0x100>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b08      	cmp	r3, #8
 8009684:	d008      	beq.n	8009698 <HAL_TIM_IC_ConfigChannel+0x100>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	2b0c      	cmp	r3, #12
 800968c:	d004      	beq.n	8009698 <HAL_TIM_IC_ConfigChannel+0x100>
 800968e:	f241 0115 	movw	r1, #4117	; 0x1015
 8009692:	484c      	ldr	r0, [pc, #304]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x22c>)
 8009694:	f7fb f8fd 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	2b0f      	cmp	r3, #15
 800969e:	d904      	bls.n	80096aa <HAL_TIM_IC_ConfigChannel+0x112>
 80096a0:	f241 0116 	movw	r1, #4118	; 0x1016
 80096a4:	4847      	ldr	r0, [pc, #284]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x22c>)
 80096a6:	f7fb f8f4 	bl	8004892 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d101      	bne.n	80096b8 <HAL_TIM_IC_ConfigChannel+0x120>
 80096b4:	2302      	movs	r3, #2
 80096b6:	e113      	b.n	80098e0 <HAL_TIM_IC_ConfigChannel+0x348>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d11b      	bne.n	80096fe <HAL_TIM_IC_ConfigChannel+0x166>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6818      	ldr	r0, [r3, #0]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	6819      	ldr	r1, [r3, #0]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f001 fa71 	bl	800abbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f022 020c 	bic.w	r2, r2, #12
 80096e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6999      	ldr	r1, [r3, #24]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	619a      	str	r2, [r3, #24]
 80096fc:	e0eb      	b.n	80098d6 <HAL_TIM_IC_ConfigChannel+0x33e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b04      	cmp	r3, #4
 8009702:	d161      	bne.n	80097c8 <HAL_TIM_IC_ConfigChannel+0x230>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a23      	ldr	r2, [pc, #140]	; (8009798 <HAL_TIM_IC_ConfigChannel+0x200>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d027      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009716:	d022      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a1f      	ldr	r2, [pc, #124]	; (800979c <HAL_TIM_IC_ConfigChannel+0x204>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d01d      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a1e      	ldr	r2, [pc, #120]	; (80097a0 <HAL_TIM_IC_ConfigChannel+0x208>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d018      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a1c      	ldr	r2, [pc, #112]	; (80097a4 <HAL_TIM_IC_ConfigChannel+0x20c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d013      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a1b      	ldr	r2, [pc, #108]	; (80097a8 <HAL_TIM_IC_ConfigChannel+0x210>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d00e      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a19      	ldr	r2, [pc, #100]	; (80097ac <HAL_TIM_IC_ConfigChannel+0x214>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d009      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a1a      	ldr	r2, [pc, #104]	; (80097b8 <HAL_TIM_IC_ConfigChannel+0x220>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_TIM_IC_ConfigChannel+0x1c6>
 8009754:	f241 012c 	movw	r1, #4140	; 0x102c
 8009758:	481a      	ldr	r0, [pc, #104]	; (80097c4 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800975a:	f7fb f89a 	bl	8004892 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6819      	ldr	r1, [r3, #0]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f001 fac8 	bl	800ad02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	699a      	ldr	r2, [r3, #24]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009780:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6999      	ldr	r1, [r3, #24]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	021a      	lsls	r2, r3, #8
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	430a      	orrs	r2, r1
 8009794:	619a      	str	r2, [r3, #24]
 8009796:	e09e      	b.n	80098d6 <HAL_TIM_IC_ConfigChannel+0x33e>
 8009798:	40010000 	.word	0x40010000
 800979c:	40000400 	.word	0x40000400
 80097a0:	40000800 	.word	0x40000800
 80097a4:	40000c00 	.word	0x40000c00
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800
 80097b8:	40001800 	.word	0x40001800
 80097bc:	40001c00 	.word	0x40001c00
 80097c0:	40002000 	.word	0x40002000
 80097c4:	0800c874 	.word	0x0800c874
  }
  else if (Channel == TIM_CHANNEL_3)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	d13e      	bne.n	800984c <HAL_TIM_IC_ConfigChannel+0x2b4>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a45      	ldr	r2, [pc, #276]	; (80098e8 <HAL_TIM_IC_ConfigChannel+0x350>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d01d      	beq.n	8009814 <HAL_TIM_IC_ConfigChannel+0x27c>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e0:	d018      	beq.n	8009814 <HAL_TIM_IC_ConfigChannel+0x27c>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a41      	ldr	r2, [pc, #260]	; (80098ec <HAL_TIM_IC_ConfigChannel+0x354>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d013      	beq.n	8009814 <HAL_TIM_IC_ConfigChannel+0x27c>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a3f      	ldr	r2, [pc, #252]	; (80098f0 <HAL_TIM_IC_ConfigChannel+0x358>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00e      	beq.n	8009814 <HAL_TIM_IC_ConfigChannel+0x27c>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a3e      	ldr	r2, [pc, #248]	; (80098f4 <HAL_TIM_IC_ConfigChannel+0x35c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d009      	beq.n	8009814 <HAL_TIM_IC_ConfigChannel+0x27c>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a3c      	ldr	r2, [pc, #240]	; (80098f8 <HAL_TIM_IC_ConfigChannel+0x360>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d004      	beq.n	8009814 <HAL_TIM_IC_ConfigChannel+0x27c>
 800980a:	f241 013c 	movw	r1, #4156	; 0x103c
 800980e:	483b      	ldr	r0, [pc, #236]	; (80098fc <HAL_TIM_IC_ConfigChannel+0x364>)
 8009810:	f7fb f83f 	bl	8004892 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f001 fada 	bl	800addc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69da      	ldr	r2, [r3, #28]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 020c 	bic.w	r2, r2, #12
 8009836:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69d9      	ldr	r1, [r3, #28]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	61da      	str	r2, [r3, #28]
 800984a:	e044      	b.n	80098d6 <HAL_TIM_IC_ConfigChannel+0x33e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b0c      	cmp	r3, #12
 8009850:	d13f      	bne.n	80098d2 <HAL_TIM_IC_ConfigChannel+0x33a>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a24      	ldr	r2, [pc, #144]	; (80098e8 <HAL_TIM_IC_ConfigChannel+0x350>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d01d      	beq.n	8009898 <HAL_TIM_IC_ConfigChannel+0x300>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009864:	d018      	beq.n	8009898 <HAL_TIM_IC_ConfigChannel+0x300>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a20      	ldr	r2, [pc, #128]	; (80098ec <HAL_TIM_IC_ConfigChannel+0x354>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d013      	beq.n	8009898 <HAL_TIM_IC_ConfigChannel+0x300>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a1e      	ldr	r2, [pc, #120]	; (80098f0 <HAL_TIM_IC_ConfigChannel+0x358>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00e      	beq.n	8009898 <HAL_TIM_IC_ConfigChannel+0x300>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a1d      	ldr	r2, [pc, #116]	; (80098f4 <HAL_TIM_IC_ConfigChannel+0x35c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d009      	beq.n	8009898 <HAL_TIM_IC_ConfigChannel+0x300>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a1b      	ldr	r2, [pc, #108]	; (80098f8 <HAL_TIM_IC_ConfigChannel+0x360>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d004      	beq.n	8009898 <HAL_TIM_IC_ConfigChannel+0x300>
 800988e:	f241 014c 	movw	r1, #4172	; 0x104c
 8009892:	481a      	ldr	r0, [pc, #104]	; (80098fc <HAL_TIM_IC_ConfigChannel+0x364>)
 8009894:	f7fa fffd 	bl	8004892 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f001 fad4 	bl	800ae54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	69da      	ldr	r2, [r3, #28]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80098ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69d9      	ldr	r1, [r3, #28]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	021a      	lsls	r2, r3, #8
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	61da      	str	r2, [r3, #28]
 80098d0:	e001      	b.n	80098d6 <HAL_TIM_IC_ConfigChannel+0x33e>
  }
  else
  {
    status = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40000400 	.word	0x40000400
 80098f0:	40000800 	.word	0x40000800
 80098f4:	40000c00 	.word	0x40000c00
 80098f8:	40010400 	.word	0x40010400
 80098fc:	0800c874 	.word	0x0800c874

08009900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d010      	beq.n	8009938 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b04      	cmp	r3, #4
 800991a:	d00d      	beq.n	8009938 <HAL_TIM_PWM_ConfigChannel+0x38>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b08      	cmp	r3, #8
 8009920:	d00a      	beq.n	8009938 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b0c      	cmp	r3, #12
 8009926:	d007      	beq.n	8009938 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b3c      	cmp	r3, #60	; 0x3c
 800992c:	d004      	beq.n	8009938 <HAL_TIM_PWM_ConfigChannel+0x38>
 800992e:	f241 0177 	movw	r1, #4215	; 0x1077
 8009932:	4883      	ldr	r0, [pc, #524]	; (8009b40 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009934:	f7fa ffad 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b60      	cmp	r3, #96	; 0x60
 800993e:	d008      	beq.n	8009952 <HAL_TIM_PWM_ConfigChannel+0x52>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b70      	cmp	r3, #112	; 0x70
 8009946:	d004      	beq.n	8009952 <HAL_TIM_PWM_ConfigChannel+0x52>
 8009948:	f241 0178 	movw	r1, #4216	; 0x1078
 800994c:	487c      	ldr	r0, [pc, #496]	; (8009b40 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800994e:	f7fa ffa0 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <HAL_TIM_PWM_ConfigChannel+0x6c>
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d004      	beq.n	800996c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8009962:	f241 0179 	movw	r1, #4217	; 0x1079
 8009966:	4876      	ldr	r0, [pc, #472]	; (8009b40 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009968:	f7fa ff93 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d008      	beq.n	8009986 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b04      	cmp	r3, #4
 800997a:	d004      	beq.n	8009986 <HAL_TIM_PWM_ConfigChannel+0x86>
 800997c:	f241 017a 	movw	r1, #4218	; 0x107a
 8009980:	486f      	ldr	r0, [pc, #444]	; (8009b40 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009982:	f7fa ff86 	bl	8004892 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIM_PWM_ConfigChannel+0x94>
 8009990:	2302      	movs	r3, #2
 8009992:	e17c      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x38e>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b0c      	cmp	r3, #12
 80099a0:	f200 816d 	bhi.w	8009c7e <HAL_TIM_PWM_ConfigChannel+0x37e>
 80099a4:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <HAL_TIM_PWM_ConfigChannel+0xac>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	080099e1 	.word	0x080099e1
 80099b0:	08009c7f 	.word	0x08009c7f
 80099b4:	08009c7f 	.word	0x08009c7f
 80099b8:	08009c7f 	.word	0x08009c7f
 80099bc:	08009aa3 	.word	0x08009aa3
 80099c0:	08009c7f 	.word	0x08009c7f
 80099c4:	08009c7f 	.word	0x08009c7f
 80099c8:	08009c7f 	.word	0x08009c7f
 80099cc:	08009b71 	.word	0x08009b71
 80099d0:	08009c7f 	.word	0x08009c7f
 80099d4:	08009c7f 	.word	0x08009c7f
 80099d8:	08009c7f 	.word	0x08009c7f
 80099dc:	08009bf7 	.word	0x08009bf7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a57      	ldr	r2, [pc, #348]	; (8009b44 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d03b      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f2:	d036      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a53      	ldr	r2, [pc, #332]	; (8009b48 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d031      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a52      	ldr	r2, [pc, #328]	; (8009b4c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d02c      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a50      	ldr	r2, [pc, #320]	; (8009b50 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d027      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a4f      	ldr	r2, [pc, #316]	; (8009b54 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d022      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a4d      	ldr	r2, [pc, #308]	; (8009b58 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d01d      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a4c      	ldr	r2, [pc, #304]	; (8009b5c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d018      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a4a      	ldr	r2, [pc, #296]	; (8009b60 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d013      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a49      	ldr	r2, [pc, #292]	; (8009b64 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00e      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a47      	ldr	r2, [pc, #284]	; (8009b68 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d009      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a46      	ldr	r2, [pc, #280]	; (8009b6c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d004      	beq.n	8009a62 <HAL_TIM_PWM_ConfigChannel+0x162>
 8009a58:	f241 0184 	movw	r1, #4228	; 0x1084
 8009a5c:	4838      	ldr	r0, [pc, #224]	; (8009b40 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009a5e:	f7fa ff18 	bl	8004892 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68b9      	ldr	r1, [r7, #8]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 fe6d 	bl	800a748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f042 0208 	orr.w	r2, r2, #8
 8009a7c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	699a      	ldr	r2, [r3, #24]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0204 	bic.w	r2, r2, #4
 8009a8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6999      	ldr	r1, [r3, #24]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	691a      	ldr	r2, [r3, #16]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	619a      	str	r2, [r3, #24]
      break;
 8009aa0:	e0f0      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a27      	ldr	r2, [pc, #156]	; (8009b44 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d027      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab4:	d022      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a23      	ldr	r2, [pc, #140]	; (8009b48 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d01d      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a21      	ldr	r2, [pc, #132]	; (8009b4c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d018      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a20      	ldr	r2, [pc, #128]	; (8009b50 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d013      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a1e      	ldr	r2, [pc, #120]	; (8009b54 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00e      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a1d      	ldr	r2, [pc, #116]	; (8009b58 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d009      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d004      	beq.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8009af2:	f241 0195 	movw	r1, #4245	; 0x1095
 8009af6:	4812      	ldr	r0, [pc, #72]	; (8009b40 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8009af8:	f7fa fecb 	bl	8004892 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 feba 	bl	800a87c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	699a      	ldr	r2, [r3, #24]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6999      	ldr	r1, [r3, #24]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	021a      	lsls	r2, r3, #8
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	619a      	str	r2, [r3, #24]
      break;
 8009b3c:	e0a2      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x384>
 8009b3e:	bf00      	nop
 8009b40:	0800c874 	.word	0x0800c874
 8009b44:	40010000 	.word	0x40010000
 8009b48:	40000400 	.word	0x40000400
 8009b4c:	40000800 	.word	0x40000800
 8009b50:	40000c00 	.word	0x40000c00
 8009b54:	40010400 	.word	0x40010400
 8009b58:	40014000 	.word	0x40014000
 8009b5c:	40014400 	.word	0x40014400
 8009b60:	40014800 	.word	0x40014800
 8009b64:	40001800 	.word	0x40001800
 8009b68:	40001c00 	.word	0x40001c00
 8009b6c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a48      	ldr	r2, [pc, #288]	; (8009c98 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d01d      	beq.n	8009bb6 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b82:	d018      	beq.n	8009bb6 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a44      	ldr	r2, [pc, #272]	; (8009c9c <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d013      	beq.n	8009bb6 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a43      	ldr	r2, [pc, #268]	; (8009ca0 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00e      	beq.n	8009bb6 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a41      	ldr	r2, [pc, #260]	; (8009ca4 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d009      	beq.n	8009bb6 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a40      	ldr	r2, [pc, #256]	; (8009ca8 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d004      	beq.n	8009bb6 <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8009bac:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8009bb0:	483e      	ldr	r0, [pc, #248]	; (8009cac <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009bb2:	f7fa fe6e 	bl	8004892 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fefb 	bl	800a9b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69da      	ldr	r2, [r3, #28]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0208 	orr.w	r2, r2, #8
 8009bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69da      	ldr	r2, [r3, #28]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0204 	bic.w	r2, r2, #4
 8009be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69d9      	ldr	r1, [r3, #28]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	691a      	ldr	r2, [r3, #16]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	61da      	str	r2, [r3, #28]
      break;
 8009bf4:	e046      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a27      	ldr	r2, [pc, #156]	; (8009c98 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d01d      	beq.n	8009c3c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c08:	d018      	beq.n	8009c3c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a23      	ldr	r2, [pc, #140]	; (8009c9c <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d013      	beq.n	8009c3c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a21      	ldr	r2, [pc, #132]	; (8009ca0 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d00e      	beq.n	8009c3c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a20      	ldr	r2, [pc, #128]	; (8009ca4 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d009      	beq.n	8009c3c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d004      	beq.n	8009c3c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8009c32:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8009c36:	481d      	ldr	r0, [pc, #116]	; (8009cac <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009c38:	f7fa fe2b 	bl	8004892 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68b9      	ldr	r1, [r7, #8]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 ff56 	bl	800aaf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	69da      	ldr	r2, [r3, #28]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	69da      	ldr	r2, [r3, #28]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	69d9      	ldr	r1, [r3, #28]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	021a      	lsls	r2, r3, #8
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	61da      	str	r2, [r3, #28]
      break;
 8009c7c:	e002      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
      break;
 8009c82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	40010000 	.word	0x40010000
 8009c9c:	40000400 	.word	0x40000400
 8009ca0:	40000800 	.word	0x40000800
 8009ca4:	40000c00 	.word	0x40000c00
 8009ca8:	40010400 	.word	0x40010400
 8009cac:	0800c874 	.word	0x0800c874

08009cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d101      	bne.n	8009ccc <HAL_TIM_ConfigClockSource+0x1c>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e35c      	b.n	800a386 <HAL_TIM_ConfigClockSource+0x6d6>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce4:	d029      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cee:	d024      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d020      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b10      	cmp	r3, #16
 8009cfe:	d01c      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b20      	cmp	r3, #32
 8009d06:	d018      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b30      	cmp	r3, #48	; 0x30
 8009d0e:	d014      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b40      	cmp	r3, #64	; 0x40
 8009d16:	d010      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b50      	cmp	r3, #80	; 0x50
 8009d1e:	d00c      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b60      	cmp	r3, #96	; 0x60
 8009d26:	d008      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b70      	cmp	r3, #112	; 0x70
 8009d2e:	d004      	beq.n	8009d3a <HAL_TIM_ConfigClockSource+0x8a>
 8009d30:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8009d34:	4893      	ldr	r0, [pc, #588]	; (8009f84 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009d36:	f7fa fdac 	bl	8004892 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d50:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d62:	f000 812b 	beq.w	8009fbc <HAL_TIM_ConfigClockSource+0x30c>
 8009d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d6a:	f200 82ff 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d72:	d02e      	beq.n	8009dd2 <HAL_TIM_ConfigClockSource+0x122>
 8009d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d78:	f200 82f8 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009d7c:	2b70      	cmp	r3, #112	; 0x70
 8009d7e:	f000 8082 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1d6>
 8009d82:	2b70      	cmp	r3, #112	; 0x70
 8009d84:	f200 82f2 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009d88:	2b60      	cmp	r3, #96	; 0x60
 8009d8a:	f000 81e8 	beq.w	800a15e <HAL_TIM_ConfigClockSource+0x4ae>
 8009d8e:	2b60      	cmp	r3, #96	; 0x60
 8009d90:	f200 82ec 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009d94:	2b50      	cmp	r3, #80	; 0x50
 8009d96:	f000 8182 	beq.w	800a09e <HAL_TIM_ConfigClockSource+0x3ee>
 8009d9a:	2b50      	cmp	r3, #80	; 0x50
 8009d9c:	f200 82e6 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009da0:	2b40      	cmp	r3, #64	; 0x40
 8009da2:	f000 824d 	beq.w	800a240 <HAL_TIM_ConfigClockSource+0x590>
 8009da6:	2b40      	cmp	r3, #64	; 0x40
 8009da8:	f200 82e0 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009dac:	2b30      	cmp	r3, #48	; 0x30
 8009dae:	f000 82a7 	beq.w	800a300 <HAL_TIM_ConfigClockSource+0x650>
 8009db2:	2b30      	cmp	r3, #48	; 0x30
 8009db4:	f200 82da 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	f000 82a1 	beq.w	800a300 <HAL_TIM_ConfigClockSource+0x650>
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	f200 82d4 	bhi.w	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 829b 	beq.w	800a300 <HAL_TIM_ConfigClockSource+0x650>
 8009dca:	2b10      	cmp	r3, #16
 8009dcc:	f000 8298 	beq.w	800a300 <HAL_TIM_ConfigClockSource+0x650>
 8009dd0:	e2cc      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a6c      	ldr	r2, [pc, #432]	; (8009f88 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	f000 82ca 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de6:	f000 82c4 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a67      	ldr	r2, [pc, #412]	; (8009f8c <HAL_TIM_ConfigClockSource+0x2dc>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	f000 82be 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a65      	ldr	r2, [pc, #404]	; (8009f90 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	f000 82b8 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a63      	ldr	r2, [pc, #396]	; (8009f94 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	f000 82b2 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a61      	ldr	r2, [pc, #388]	; (8009f98 <HAL_TIM_ConfigClockSource+0x2e8>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	f000 82ac 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a5f      	ldr	r2, [pc, #380]	; (8009f9c <HAL_TIM_ConfigClockSource+0x2ec>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	f000 82a6 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a5d      	ldr	r2, [pc, #372]	; (8009fa0 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	f000 82a0 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a5b      	ldr	r2, [pc, #364]	; (8009fa4 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	f000 829a 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a59      	ldr	r2, [pc, #356]	; (8009fa8 <HAL_TIM_ConfigClockSource+0x2f8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	f000 8294 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a57      	ldr	r2, [pc, #348]	; (8009fac <HAL_TIM_ConfigClockSource+0x2fc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	f000 828e 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a55      	ldr	r2, [pc, #340]	; (8009fb0 <HAL_TIM_ConfigClockSource+0x300>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	f000 8288 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a53      	ldr	r2, [pc, #332]	; (8009fb4 <HAL_TIM_ConfigClockSource+0x304>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	f000 8282 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a51      	ldr	r2, [pc, #324]	; (8009fb8 <HAL_TIM_ConfigClockSource+0x308>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	f000 827c 	beq.w	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
 8009e7a:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8009e7e:	4841      	ldr	r0, [pc, #260]	; (8009f84 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009e80:	f7fa fd07 	bl	8004892 <assert_failed>
      break;
 8009e84:	e275      	b.n	800a372 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a3f      	ldr	r2, [pc, #252]	; (8009f88 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d027      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e98:	d022      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a3b      	ldr	r2, [pc, #236]	; (8009f8c <HAL_TIM_ConfigClockSource+0x2dc>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d01d      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a39      	ldr	r2, [pc, #228]	; (8009f90 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d018      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a38      	ldr	r2, [pc, #224]	; (8009f94 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d013      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a38      	ldr	r2, [pc, #224]	; (8009fa0 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d00e      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a37      	ldr	r2, [pc, #220]	; (8009fa4 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d009      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a37      	ldr	r2, [pc, #220]	; (8009fb0 <HAL_TIM_ConfigClockSource+0x300>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d004      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x230>
 8009ed6:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009eda:	482a      	ldr	r0, [pc, #168]	; (8009f84 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009edc:	f7fa fcd9 	bl	8004892 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d013      	beq.n	8009f10 <HAL_TIM_ConfigClockSource+0x260>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef0:	d00e      	beq.n	8009f10 <HAL_TIM_ConfigClockSource+0x260>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009efa:	d009      	beq.n	8009f10 <HAL_TIM_ConfigClockSource+0x260>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f04:	d004      	beq.n	8009f10 <HAL_TIM_ConfigClockSource+0x260>
 8009f06:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8009f0a:	481e      	ldr	r0, [pc, #120]	; (8009f84 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009f0c:	f7fa fcc1 	bl	8004892 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f18:	d014      	beq.n	8009f44 <HAL_TIM_ConfigClockSource+0x294>
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d010      	beq.n	8009f44 <HAL_TIM_ConfigClockSource+0x294>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00c      	beq.n	8009f44 <HAL_TIM_ConfigClockSource+0x294>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d008      	beq.n	8009f44 <HAL_TIM_ConfigClockSource+0x294>
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	2b0a      	cmp	r3, #10
 8009f38:	d004      	beq.n	8009f44 <HAL_TIM_ConfigClockSource+0x294>
 8009f3a:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8009f3e:	4811      	ldr	r0, [pc, #68]	; (8009f84 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009f40:	f7fa fca7 	bl	8004892 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b0f      	cmp	r3, #15
 8009f4a:	d904      	bls.n	8009f56 <HAL_TIM_ConfigClockSource+0x2a6>
 8009f4c:	f241 41d3 	movw	r1, #5331	; 0x14d3
 8009f50:	480c      	ldr	r0, [pc, #48]	; (8009f84 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009f52:	f7fa fc9e 	bl	8004892 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	6899      	ldr	r1, [r3, #8]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	f000 ffcd 	bl	800af04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	609a      	str	r2, [r3, #8]
      break;
 8009f82:	e1f7      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x6c4>
 8009f84:	0800c874 	.word	0x0800c874
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	40001000 	.word	0x40001000
 8009f9c:	40001400 	.word	0x40001400
 8009fa0:	40010400 	.word	0x40010400
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40014400 	.word	0x40014400
 8009fac:	40014800 	.word	0x40014800
 8009fb0:	40001800 	.word	0x40001800
 8009fb4:	40001c00 	.word	0x40001c00
 8009fb8:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a97      	ldr	r2, [pc, #604]	; (800a220 <HAL_TIM_ConfigClockSource+0x570>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d01d      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x352>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fce:	d018      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x352>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a93      	ldr	r2, [pc, #588]	; (800a224 <HAL_TIM_ConfigClockSource+0x574>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d013      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x352>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a92      	ldr	r2, [pc, #584]	; (800a228 <HAL_TIM_ConfigClockSource+0x578>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00e      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x352>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a90      	ldr	r2, [pc, #576]	; (800a22c <HAL_TIM_ConfigClockSource+0x57c>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d009      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x352>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a8f      	ldr	r2, [pc, #572]	; (800a230 <HAL_TIM_ConfigClockSource+0x580>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d004      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x352>
 8009ff8:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8009ffc:	488d      	ldr	r0, [pc, #564]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 8009ffe:	f7fa fc48 	bl	8004892 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d013      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x382>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a012:	d00e      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x382>
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a01c:	d009      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x382>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a026:	d004      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x382>
 800a028:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800a02c:	4881      	ldr	r0, [pc, #516]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a02e:	f7fa fc30 	bl	8004892 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a03a:	d014      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x3b6>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x3b6>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00c      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x3b6>
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	2b02      	cmp	r3, #2
 800a052:	d008      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x3b6>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	2b0a      	cmp	r3, #10
 800a05a:	d004      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0x3b6>
 800a05c:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800a060:	4874      	ldr	r0, [pc, #464]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a062:	f7fa fc16 	bl	8004892 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	d904      	bls.n	800a078 <HAL_TIM_ConfigClockSource+0x3c8>
 800a06e:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800a072:	4870      	ldr	r0, [pc, #448]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a074:	f7fa fc0d 	bl	8004892 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	6899      	ldr	r1, [r3, #8]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f000 ff3c 	bl	800af04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a09a:	609a      	str	r2, [r3, #8]
      break;
 800a09c:	e16a      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a5f      	ldr	r2, [pc, #380]	; (800a220 <HAL_TIM_ConfigClockSource+0x570>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d027      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b0:	d022      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a5b      	ldr	r2, [pc, #364]	; (800a224 <HAL_TIM_ConfigClockSource+0x574>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d01d      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a59      	ldr	r2, [pc, #356]	; (800a228 <HAL_TIM_ConfigClockSource+0x578>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d018      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a58      	ldr	r2, [pc, #352]	; (800a22c <HAL_TIM_ConfigClockSource+0x57c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d013      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a56      	ldr	r2, [pc, #344]	; (800a230 <HAL_TIM_ConfigClockSource+0x580>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00e      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a56      	ldr	r2, [pc, #344]	; (800a238 <HAL_TIM_ConfigClockSource+0x588>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d009      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a54      	ldr	r2, [pc, #336]	; (800a23c <HAL_TIM_ConfigClockSource+0x58c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d004      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0x448>
 800a0ee:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a0f2:	4850      	ldr	r0, [pc, #320]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a0f4:	f7fa fbcd 	bl	8004892 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a100:	d014      	beq.n	800a12c <HAL_TIM_ConfigClockSource+0x47c>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d010      	beq.n	800a12c <HAL_TIM_ConfigClockSource+0x47c>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00c      	beq.n	800a12c <HAL_TIM_ConfigClockSource+0x47c>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b02      	cmp	r3, #2
 800a118:	d008      	beq.n	800a12c <HAL_TIM_ConfigClockSource+0x47c>
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	2b0a      	cmp	r3, #10
 800a120:	d004      	beq.n	800a12c <HAL_TIM_ConfigClockSource+0x47c>
 800a122:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800a126:	4843      	ldr	r0, [pc, #268]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a128:	f7fa fbb3 	bl	8004892 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2b0f      	cmp	r3, #15
 800a132:	d904      	bls.n	800a13e <HAL_TIM_ConfigClockSource+0x48e>
 800a134:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800a138:	483e      	ldr	r0, [pc, #248]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a13a:	f7fa fbaa 	bl	8004892 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6859      	ldr	r1, [r3, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f000 fdaa 	bl	800aca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2150      	movs	r1, #80	; 0x50
 800a156:	4618      	mov	r0, r3
 800a158:	f000 feb9 	bl	800aece <TIM_ITRx_SetConfig>
      break;
 800a15c:	e10a      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a2f      	ldr	r2, [pc, #188]	; (800a220 <HAL_TIM_ConfigClockSource+0x570>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d027      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a170:	d022      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a2b      	ldr	r2, [pc, #172]	; (800a224 <HAL_TIM_ConfigClockSource+0x574>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d01d      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a29      	ldr	r2, [pc, #164]	; (800a228 <HAL_TIM_ConfigClockSource+0x578>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d018      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a28      	ldr	r2, [pc, #160]	; (800a22c <HAL_TIM_ConfigClockSource+0x57c>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d013      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a26      	ldr	r2, [pc, #152]	; (800a230 <HAL_TIM_ConfigClockSource+0x580>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00e      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a26      	ldr	r2, [pc, #152]	; (800a238 <HAL_TIM_ConfigClockSource+0x588>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d009      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a24      	ldr	r2, [pc, #144]	; (800a23c <HAL_TIM_ConfigClockSource+0x58c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d004      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x508>
 800a1ae:	f241 510a 	movw	r1, #5386	; 0x150a
 800a1b2:	4820      	ldr	r0, [pc, #128]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a1b4:	f7fa fb6d 	bl	8004892 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c0:	d014      	beq.n	800a1ec <HAL_TIM_ConfigClockSource+0x53c>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d010      	beq.n	800a1ec <HAL_TIM_ConfigClockSource+0x53c>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00c      	beq.n	800a1ec <HAL_TIM_ConfigClockSource+0x53c>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d008      	beq.n	800a1ec <HAL_TIM_ConfigClockSource+0x53c>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	2b0a      	cmp	r3, #10
 800a1e0:	d004      	beq.n	800a1ec <HAL_TIM_ConfigClockSource+0x53c>
 800a1e2:	f241 510d 	movw	r1, #5389	; 0x150d
 800a1e6:	4813      	ldr	r0, [pc, #76]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a1e8:	f7fa fb53 	bl	8004892 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2b0f      	cmp	r3, #15
 800a1f2:	d904      	bls.n	800a1fe <HAL_TIM_ConfigClockSource+0x54e>
 800a1f4:	f241 510e 	movw	r1, #5390	; 0x150e
 800a1f8:	480e      	ldr	r0, [pc, #56]	; (800a234 <HAL_TIM_ConfigClockSource+0x584>)
 800a1fa:	f7fa fb4a 	bl	8004892 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	6859      	ldr	r1, [r3, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f000 fdb6 	bl	800ad7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2160      	movs	r1, #96	; 0x60
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fe59 	bl	800aece <TIM_ITRx_SetConfig>
      break;
 800a21c:	e0aa      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x6c4>
 800a21e:	bf00      	nop
 800a220:	40010000 	.word	0x40010000
 800a224:	40000400 	.word	0x40000400
 800a228:	40000800 	.word	0x40000800
 800a22c:	40000c00 	.word	0x40000c00
 800a230:	40010400 	.word	0x40010400
 800a234:	0800c874 	.word	0x0800c874
 800a238:	40014000 	.word	0x40014000
 800a23c:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a52      	ldr	r2, [pc, #328]	; (800a390 <HAL_TIM_ConfigClockSource+0x6e0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d027      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a252:	d022      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a4e      	ldr	r2, [pc, #312]	; (800a394 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d01d      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a4d      	ldr	r2, [pc, #308]	; (800a398 <HAL_TIM_ConfigClockSource+0x6e8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d018      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a4b      	ldr	r2, [pc, #300]	; (800a39c <HAL_TIM_ConfigClockSource+0x6ec>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d013      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a4a      	ldr	r2, [pc, #296]	; (800a3a0 <HAL_TIM_ConfigClockSource+0x6f0>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d00e      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a48      	ldr	r2, [pc, #288]	; (800a3a4 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d009      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a47      	ldr	r2, [pc, #284]	; (800a3a8 <HAL_TIM_ConfigClockSource+0x6f8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d004      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x5ea>
 800a290:	f241 511a 	movw	r1, #5402	; 0x151a
 800a294:	4845      	ldr	r0, [pc, #276]	; (800a3ac <HAL_TIM_ConfigClockSource+0x6fc>)
 800a296:	f7fa fafc 	bl	8004892 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2a2:	d014      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x61e>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d010      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x61e>
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00c      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x61e>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d008      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x61e>
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b0a      	cmp	r3, #10
 800a2c2:	d004      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x61e>
 800a2c4:	f241 511d 	movw	r1, #5405	; 0x151d
 800a2c8:	4838      	ldr	r0, [pc, #224]	; (800a3ac <HAL_TIM_ConfigClockSource+0x6fc>)
 800a2ca:	f7fa fae2 	bl	8004892 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	2b0f      	cmp	r3, #15
 800a2d4:	d904      	bls.n	800a2e0 <HAL_TIM_ConfigClockSource+0x630>
 800a2d6:	f241 511e 	movw	r1, #5406	; 0x151e
 800a2da:	4834      	ldr	r0, [pc, #208]	; (800a3ac <HAL_TIM_ConfigClockSource+0x6fc>)
 800a2dc:	f7fa fad9 	bl	8004892 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6818      	ldr	r0, [r3, #0]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	6859      	ldr	r1, [r3, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	f000 fcd9 	bl	800aca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2140      	movs	r1, #64	; 0x40
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 fde8 	bl	800aece <TIM_ITRx_SetConfig>
      break;
 800a2fe:	e039      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a22      	ldr	r2, [pc, #136]	; (800a390 <HAL_TIM_ConfigClockSource+0x6e0>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d027      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a312:	d022      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a1e      	ldr	r2, [pc, #120]	; (800a394 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d01d      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a1d      	ldr	r2, [pc, #116]	; (800a398 <HAL_TIM_ConfigClockSource+0x6e8>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d018      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a1b      	ldr	r2, [pc, #108]	; (800a39c <HAL_TIM_ConfigClockSource+0x6ec>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d013      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a1a      	ldr	r2, [pc, #104]	; (800a3a0 <HAL_TIM_ConfigClockSource+0x6f0>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00e      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a18      	ldr	r2, [pc, #96]	; (800a3a4 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d009      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a17      	ldr	r2, [pc, #92]	; (800a3a8 <HAL_TIM_ConfigClockSource+0x6f8>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d004      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x6aa>
 800a350:	f241 512d 	movw	r1, #5421	; 0x152d
 800a354:	4815      	ldr	r0, [pc, #84]	; (800a3ac <HAL_TIM_ConfigClockSource+0x6fc>)
 800a356:	f7fa fa9c 	bl	8004892 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	4610      	mov	r0, r2
 800a366:	f000 fdb2 	bl	800aece <TIM_ITRx_SetConfig>
      break;
 800a36a:	e003      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	73fb      	strb	r3, [r7, #15]
      break;
 800a370:	e000      	b.n	800a374 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 800a372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a384:	7bfb      	ldrb	r3, [r7, #15]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	40010000 	.word	0x40010000
 800a394:	40000400 	.word	0x40000400
 800a398:	40000800 	.word	0x40000800
 800a39c:	40000c00 	.word	0x40000c00
 800a3a0:	40010400 	.word	0x40010400
 800a3a4:	40014000 	.word	0x40014000
 800a3a8:	40001800 	.word	0x40001800
 800a3ac:	0800c874 	.word	0x0800c874

0800a3b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b0c      	cmp	r3, #12
 800a3c2:	f200 80e5 	bhi.w	800a590 <HAL_TIM_ReadCapturedValue+0x1e0>
 800a3c6:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <HAL_TIM_ReadCapturedValue+0x1c>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a401 	.word	0x0800a401
 800a3d0:	0800a591 	.word	0x0800a591
 800a3d4:	0800a591 	.word	0x0800a591
 800a3d8:	0800a591 	.word	0x0800a591
 800a3dc:	0800a48d 	.word	0x0800a48d
 800a3e0:	0800a591 	.word	0x0800a591
 800a3e4:	0800a591 	.word	0x0800a591
 800a3e8:	0800a591 	.word	0x0800a591
 800a3ec:	0800a4f1 	.word	0x0800a4f1
 800a3f0:	0800a591 	.word	0x0800a591
 800a3f4:	0800a591 	.word	0x0800a591
 800a3f8:	0800a591 	.word	0x0800a591
 800a3fc:	0800a541 	.word	0x0800a541
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a65      	ldr	r2, [pc, #404]	; (800a59c <HAL_TIM_ReadCapturedValue+0x1ec>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d03b      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a412:	d036      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a61      	ldr	r2, [pc, #388]	; (800a5a0 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d031      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a60      	ldr	r2, [pc, #384]	; (800a5a4 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d02c      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a5e      	ldr	r2, [pc, #376]	; (800a5a8 <HAL_TIM_ReadCapturedValue+0x1f8>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d027      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a5d      	ldr	r2, [pc, #372]	; (800a5ac <HAL_TIM_ReadCapturedValue+0x1fc>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d022      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a5b      	ldr	r2, [pc, #364]	; (800a5b0 <HAL_TIM_ReadCapturedValue+0x200>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d01d      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a5a      	ldr	r2, [pc, #360]	; (800a5b4 <HAL_TIM_ReadCapturedValue+0x204>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d018      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a58      	ldr	r2, [pc, #352]	; (800a5b8 <HAL_TIM_ReadCapturedValue+0x208>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d013      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a57      	ldr	r2, [pc, #348]	; (800a5bc <HAL_TIM_ReadCapturedValue+0x20c>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d00e      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a55      	ldr	r2, [pc, #340]	; (800a5c0 <HAL_TIM_ReadCapturedValue+0x210>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d009      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a54      	ldr	r2, [pc, #336]	; (800a5c4 <HAL_TIM_ReadCapturedValue+0x214>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d004      	beq.n	800a482 <HAL_TIM_ReadCapturedValue+0xd2>
 800a478:	f241 51c6 	movw	r1, #5574	; 0x15c6
 800a47c:	4852      	ldr	r0, [pc, #328]	; (800a5c8 <HAL_TIM_ReadCapturedValue+0x218>)
 800a47e:	f7fa fa08 	bl	8004892 <assert_failed>

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	60fb      	str	r3, [r7, #12]

      break;
 800a48a:	e082      	b.n	800a592 <HAL_TIM_ReadCapturedValue+0x1e2>
    }
    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a42      	ldr	r2, [pc, #264]	; (800a59c <HAL_TIM_ReadCapturedValue+0x1ec>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d027      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a49e:	d022      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a3e      	ldr	r2, [pc, #248]	; (800a5a0 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d01d      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a3d      	ldr	r2, [pc, #244]	; (800a5a4 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d018      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a3b      	ldr	r2, [pc, #236]	; (800a5a8 <HAL_TIM_ReadCapturedValue+0x1f8>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d013      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a3a      	ldr	r2, [pc, #232]	; (800a5ac <HAL_TIM_ReadCapturedValue+0x1fc>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00e      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a38      	ldr	r2, [pc, #224]	; (800a5b0 <HAL_TIM_ReadCapturedValue+0x200>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d009      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a39      	ldr	r2, [pc, #228]	; (800a5bc <HAL_TIM_ReadCapturedValue+0x20c>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d004      	beq.n	800a4e6 <HAL_TIM_ReadCapturedValue+0x136>
 800a4dc:	f241 51d0 	movw	r1, #5584	; 0x15d0
 800a4e0:	4839      	ldr	r0, [pc, #228]	; (800a5c8 <HAL_TIM_ReadCapturedValue+0x218>)
 800a4e2:	f7fa f9d6 	bl	8004892 <assert_failed>

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	60fb      	str	r3, [r7, #12]

      break;
 800a4ee:	e050      	b.n	800a592 <HAL_TIM_ReadCapturedValue+0x1e2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a29      	ldr	r2, [pc, #164]	; (800a59c <HAL_TIM_ReadCapturedValue+0x1ec>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d01d      	beq.n	800a536 <HAL_TIM_ReadCapturedValue+0x186>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a502:	d018      	beq.n	800a536 <HAL_TIM_ReadCapturedValue+0x186>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a25      	ldr	r2, [pc, #148]	; (800a5a0 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d013      	beq.n	800a536 <HAL_TIM_ReadCapturedValue+0x186>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a24      	ldr	r2, [pc, #144]	; (800a5a4 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d00e      	beq.n	800a536 <HAL_TIM_ReadCapturedValue+0x186>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a22      	ldr	r2, [pc, #136]	; (800a5a8 <HAL_TIM_ReadCapturedValue+0x1f8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d009      	beq.n	800a536 <HAL_TIM_ReadCapturedValue+0x186>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a21      	ldr	r2, [pc, #132]	; (800a5ac <HAL_TIM_ReadCapturedValue+0x1fc>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d004      	beq.n	800a536 <HAL_TIM_ReadCapturedValue+0x186>
 800a52c:	f241 51db 	movw	r1, #5595	; 0x15db
 800a530:	4825      	ldr	r0, [pc, #148]	; (800a5c8 <HAL_TIM_ReadCapturedValue+0x218>)
 800a532:	f7fa f9ae 	bl	8004892 <assert_failed>

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53c:	60fb      	str	r3, [r7, #12]

      break;
 800a53e:	e028      	b.n	800a592 <HAL_TIM_ReadCapturedValue+0x1e2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a15      	ldr	r2, [pc, #84]	; (800a59c <HAL_TIM_ReadCapturedValue+0x1ec>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d01d      	beq.n	800a586 <HAL_TIM_ReadCapturedValue+0x1d6>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a552:	d018      	beq.n	800a586 <HAL_TIM_ReadCapturedValue+0x1d6>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a11      	ldr	r2, [pc, #68]	; (800a5a0 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d013      	beq.n	800a586 <HAL_TIM_ReadCapturedValue+0x1d6>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a10      	ldr	r2, [pc, #64]	; (800a5a4 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d00e      	beq.n	800a586 <HAL_TIM_ReadCapturedValue+0x1d6>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a0e      	ldr	r2, [pc, #56]	; (800a5a8 <HAL_TIM_ReadCapturedValue+0x1f8>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d009      	beq.n	800a586 <HAL_TIM_ReadCapturedValue+0x1d6>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <HAL_TIM_ReadCapturedValue+0x1fc>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d004      	beq.n	800a586 <HAL_TIM_ReadCapturedValue+0x1d6>
 800a57c:	f241 51e6 	movw	r1, #5606	; 0x15e6
 800a580:	4811      	ldr	r0, [pc, #68]	; (800a5c8 <HAL_TIM_ReadCapturedValue+0x218>)
 800a582:	f7fa f986 	bl	8004892 <assert_failed>

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58c:	60fb      	str	r3, [r7, #12]

      break;
 800a58e:	e000      	b.n	800a592 <HAL_TIM_ReadCapturedValue+0x1e2>
    }

    default:
      break;
 800a590:	bf00      	nop
  }

  return tmpreg;
 800a592:	68fb      	ldr	r3, [r7, #12]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	40010000 	.word	0x40010000
 800a5a0:	40000400 	.word	0x40000400
 800a5a4:	40000800 	.word	0x40000800
 800a5a8:	40000c00 	.word	0x40000c00
 800a5ac:	40010400 	.word	0x40010400
 800a5b0:	40014000 	.word	0x40014000
 800a5b4:	40014400 	.word	0x40014400
 800a5b8:	40014800 	.word	0x40014800
 800a5bc:	40001800 	.word	0x40001800
 800a5c0:	40001c00 	.word	0x40001c00
 800a5c4:	40002000 	.word	0x40002000
 800a5c8:	0800c874 	.word	0x0800c874

0800a5cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a40      	ldr	r2, [pc, #256]	; (800a71c <TIM_Base_SetConfig+0x114>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d013      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a626:	d00f      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a3d      	ldr	r2, [pc, #244]	; (800a720 <TIM_Base_SetConfig+0x118>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d00b      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a3c      	ldr	r2, [pc, #240]	; (800a724 <TIM_Base_SetConfig+0x11c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d007      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a3b      	ldr	r2, [pc, #236]	; (800a728 <TIM_Base_SetConfig+0x120>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_Base_SetConfig+0x40>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a3a      	ldr	r2, [pc, #232]	; (800a72c <TIM_Base_SetConfig+0x124>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d108      	bne.n	800a65a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a64e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a2f      	ldr	r2, [pc, #188]	; (800a71c <TIM_Base_SetConfig+0x114>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d02b      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a668:	d027      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a2c      	ldr	r2, [pc, #176]	; (800a720 <TIM_Base_SetConfig+0x118>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d023      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a2b      	ldr	r2, [pc, #172]	; (800a724 <TIM_Base_SetConfig+0x11c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d01f      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a2a      	ldr	r2, [pc, #168]	; (800a728 <TIM_Base_SetConfig+0x120>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d01b      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a29      	ldr	r2, [pc, #164]	; (800a72c <TIM_Base_SetConfig+0x124>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d017      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a28      	ldr	r2, [pc, #160]	; (800a730 <TIM_Base_SetConfig+0x128>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d013      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a27      	ldr	r2, [pc, #156]	; (800a734 <TIM_Base_SetConfig+0x12c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00f      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a26      	ldr	r2, [pc, #152]	; (800a738 <TIM_Base_SetConfig+0x130>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d00b      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a25      	ldr	r2, [pc, #148]	; (800a73c <TIM_Base_SetConfig+0x134>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d007      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a24      	ldr	r2, [pc, #144]	; (800a740 <TIM_Base_SetConfig+0x138>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d003      	beq.n	800a6ba <TIM_Base_SetConfig+0xb2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a23      	ldr	r2, [pc, #140]	; (800a744 <TIM_Base_SetConfig+0x13c>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d108      	bne.n	800a6cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a0a      	ldr	r2, [pc, #40]	; (800a71c <TIM_Base_SetConfig+0x114>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d003      	beq.n	800a700 <TIM_Base_SetConfig+0xf8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a0c      	ldr	r2, [pc, #48]	; (800a72c <TIM_Base_SetConfig+0x124>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d103      	bne.n	800a708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691a      	ldr	r2, [r3, #16]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	615a      	str	r2, [r3, #20]
}
 800a70e:	bf00      	nop
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	40010000 	.word	0x40010000
 800a720:	40000400 	.word	0x40000400
 800a724:	40000800 	.word	0x40000800
 800a728:	40000c00 	.word	0x40000c00
 800a72c:	40010400 	.word	0x40010400
 800a730:	40014000 	.word	0x40014000
 800a734:	40014400 	.word	0x40014400
 800a738:	40014800 	.word	0x40014800
 800a73c:	40001800 	.word	0x40001800
 800a740:	40001c00 	.word	0x40001c00
 800a744:	40002000 	.word	0x40002000

0800a748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0201 	bic.w	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f023 0302 	bic.w	r3, r3, #2
 800a790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	4313      	orrs	r3, r2
 800a79a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a34      	ldr	r2, [pc, #208]	; (800a870 <TIM_OC1_SetConfig+0x128>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d003      	beq.n	800a7ac <TIM_OC1_SetConfig+0x64>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a33      	ldr	r2, [pc, #204]	; (800a874 <TIM_OC1_SetConfig+0x12c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d119      	bne.n	800a7e0 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d008      	beq.n	800a7c6 <TIM_OC1_SetConfig+0x7e>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d004      	beq.n	800a7c6 <TIM_OC1_SetConfig+0x7e>
 800a7bc:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800a7c0:	482d      	ldr	r0, [pc, #180]	; (800a878 <TIM_OC1_SetConfig+0x130>)
 800a7c2:	f7fa f866 	bl	8004892 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f023 0308 	bic.w	r3, r3, #8
 800a7cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f023 0304 	bic.w	r3, r3, #4
 800a7de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a23      	ldr	r2, [pc, #140]	; (800a870 <TIM_OC1_SetConfig+0x128>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d003      	beq.n	800a7f0 <TIM_OC1_SetConfig+0xa8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a22      	ldr	r2, [pc, #136]	; (800a874 <TIM_OC1_SetConfig+0x12c>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d12d      	bne.n	800a84c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f8:	d008      	beq.n	800a80c <TIM_OC1_SetConfig+0xc4>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d004      	beq.n	800a80c <TIM_OC1_SetConfig+0xc4>
 800a802:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800a806:	481c      	ldr	r0, [pc, #112]	; (800a878 <TIM_OC1_SetConfig+0x130>)
 800a808:	f7fa f843 	bl	8004892 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a814:	d008      	beq.n	800a828 <TIM_OC1_SetConfig+0xe0>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d004      	beq.n	800a828 <TIM_OC1_SetConfig+0xe0>
 800a81e:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800a822:	4815      	ldr	r0, [pc, #84]	; (800a878 <TIM_OC1_SetConfig+0x130>)
 800a824:	f7fa f835 	bl	8004892 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a82e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	4313      	orrs	r3, r2
 800a840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	4313      	orrs	r3, r2
 800a84a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	621a      	str	r2, [r3, #32]
}
 800a866:	bf00      	nop
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	40010000 	.word	0x40010000
 800a874:	40010400 	.word	0x40010400
 800a878:	0800c874 	.word	0x0800c874

0800a87c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f023 0210 	bic.w	r2, r3, #16
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	021b      	lsls	r3, r3, #8
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f023 0320 	bic.w	r3, r3, #32
 800a8c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a35      	ldr	r2, [pc, #212]	; (800a9ac <TIM_OC2_SetConfig+0x130>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d003      	beq.n	800a8e4 <TIM_OC2_SetConfig+0x68>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a34      	ldr	r2, [pc, #208]	; (800a9b0 <TIM_OC2_SetConfig+0x134>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d11a      	bne.n	800a91a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d008      	beq.n	800a8fe <TIM_OC2_SetConfig+0x82>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d004      	beq.n	800a8fe <TIM_OC2_SetConfig+0x82>
 800a8f4:	f641 3116 	movw	r1, #6934	; 0x1b16
 800a8f8:	482e      	ldr	r0, [pc, #184]	; (800a9b4 <TIM_OC2_SetConfig+0x138>)
 800a8fa:	f7f9 ffca 	bl	8004892 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a918:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a23      	ldr	r2, [pc, #140]	; (800a9ac <TIM_OC2_SetConfig+0x130>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d003      	beq.n	800a92a <TIM_OC2_SetConfig+0xae>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a22      	ldr	r2, [pc, #136]	; (800a9b0 <TIM_OC2_SetConfig+0x134>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d12f      	bne.n	800a98a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a932:	d008      	beq.n	800a946 <TIM_OC2_SetConfig+0xca>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d004      	beq.n	800a946 <TIM_OC2_SetConfig+0xca>
 800a93c:	f641 3124 	movw	r1, #6948	; 0x1b24
 800a940:	481c      	ldr	r0, [pc, #112]	; (800a9b4 <TIM_OC2_SetConfig+0x138>)
 800a942:	f7f9 ffa6 	bl	8004892 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a94e:	d008      	beq.n	800a962 <TIM_OC2_SetConfig+0xe6>
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <TIM_OC2_SetConfig+0xe6>
 800a958:	f641 3125 	movw	r1, #6949	; 0x1b25
 800a95c:	4815      	ldr	r0, [pc, #84]	; (800a9b4 <TIM_OC2_SetConfig+0x138>)
 800a95e:	f7f9 ff98 	bl	8004892 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	4313      	orrs	r3, r2
 800a988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	621a      	str	r2, [r3, #32]
}
 800a9a4:	bf00      	nop
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	40010000 	.word	0x40010000
 800a9b0:	40010400 	.word	0x40010400
 800a9b4:	0800c874 	.word	0x0800c874

0800a9b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f023 0303 	bic.w	r3, r3, #3
 800a9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a35      	ldr	r2, [pc, #212]	; (800aae8 <TIM_OC3_SetConfig+0x130>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_OC3_SetConfig+0x66>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a34      	ldr	r2, [pc, #208]	; (800aaec <TIM_OC3_SetConfig+0x134>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d11a      	bne.n	800aa54 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d008      	beq.n	800aa38 <TIM_OC3_SetConfig+0x80>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	2b08      	cmp	r3, #8
 800aa2c:	d004      	beq.n	800aa38 <TIM_OC3_SetConfig+0x80>
 800aa2e:	f641 3161 	movw	r1, #7009	; 0x1b61
 800aa32:	482f      	ldr	r0, [pc, #188]	; (800aaf0 <TIM_OC3_SetConfig+0x138>)
 800aa34:	f7f9 ff2d 	bl	8004892 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	021b      	lsls	r3, r3, #8
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a24      	ldr	r2, [pc, #144]	; (800aae8 <TIM_OC3_SetConfig+0x130>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d003      	beq.n	800aa64 <TIM_OC3_SetConfig+0xac>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a23      	ldr	r2, [pc, #140]	; (800aaec <TIM_OC3_SetConfig+0x134>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d12f      	bne.n	800aac4 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa6c:	d008      	beq.n	800aa80 <TIM_OC3_SetConfig+0xc8>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d004      	beq.n	800aa80 <TIM_OC3_SetConfig+0xc8>
 800aa76:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800aa7a:	481d      	ldr	r0, [pc, #116]	; (800aaf0 <TIM_OC3_SetConfig+0x138>)
 800aa7c:	f7f9 ff09 	bl	8004892 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa88:	d008      	beq.n	800aa9c <TIM_OC3_SetConfig+0xe4>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <TIM_OC3_SetConfig+0xe4>
 800aa92:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800aa96:	4816      	ldr	r0, [pc, #88]	; (800aaf0 <TIM_OC3_SetConfig+0x138>)
 800aa98:	f7f9 fefb 	bl	8004892 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aaaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	011b      	lsls	r3, r3, #4
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	621a      	str	r2, [r3, #32]
}
 800aade:	bf00      	nop
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	40010000 	.word	0x40010000
 800aaec:	40010400 	.word	0x40010400
 800aaf0:	0800c874 	.word	0x0800c874

0800aaf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	021b      	lsls	r3, r3, #8
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	031b      	lsls	r3, r3, #12
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a18      	ldr	r2, [pc, #96]	; (800abb0 <TIM_OC4_SetConfig+0xbc>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d003      	beq.n	800ab5c <TIM_OC4_SetConfig+0x68>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a17      	ldr	r2, [pc, #92]	; (800abb4 <TIM_OC4_SetConfig+0xc0>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d117      	bne.n	800ab8c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab64:	d008      	beq.n	800ab78 <TIM_OC4_SetConfig+0x84>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d004      	beq.n	800ab78 <TIM_OC4_SetConfig+0x84>
 800ab6e:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800ab72:	4811      	ldr	r0, [pc, #68]	; (800abb8 <TIM_OC4_SetConfig+0xc4>)
 800ab74:	f7f9 fe8d 	bl	8004892 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	019b      	lsls	r3, r3, #6
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	621a      	str	r2, [r3, #32]
}
 800aba6:	bf00      	nop
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	40010000 	.word	0x40010000
 800abb4:	40010400 	.word	0x40010400
 800abb8:	0800c874 	.word	0x0800c874

0800abbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	f023 0201 	bic.w	r2, r3, #1
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4a28      	ldr	r2, [pc, #160]	; (800ac88 <TIM_TI1_SetConfig+0xcc>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d01b      	beq.n	800ac22 <TIM_TI1_SetConfig+0x66>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf0:	d017      	beq.n	800ac22 <TIM_TI1_SetConfig+0x66>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4a25      	ldr	r2, [pc, #148]	; (800ac8c <TIM_TI1_SetConfig+0xd0>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d013      	beq.n	800ac22 <TIM_TI1_SetConfig+0x66>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4a24      	ldr	r2, [pc, #144]	; (800ac90 <TIM_TI1_SetConfig+0xd4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d00f      	beq.n	800ac22 <TIM_TI1_SetConfig+0x66>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a23      	ldr	r2, [pc, #140]	; (800ac94 <TIM_TI1_SetConfig+0xd8>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00b      	beq.n	800ac22 <TIM_TI1_SetConfig+0x66>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4a22      	ldr	r2, [pc, #136]	; (800ac98 <TIM_TI1_SetConfig+0xdc>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d007      	beq.n	800ac22 <TIM_TI1_SetConfig+0x66>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4a21      	ldr	r2, [pc, #132]	; (800ac9c <TIM_TI1_SetConfig+0xe0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d003      	beq.n	800ac22 <TIM_TI1_SetConfig+0x66>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	4a20      	ldr	r2, [pc, #128]	; (800aca0 <TIM_TI1_SetConfig+0xe4>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d101      	bne.n	800ac26 <TIM_TI1_SetConfig+0x6a>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e000      	b.n	800ac28 <TIM_TI1_SetConfig+0x6c>
 800ac26:	2300      	movs	r3, #0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d008      	beq.n	800ac3e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f023 0303 	bic.w	r3, r3, #3
 800ac32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	e003      	b.n	800ac46 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f043 0301 	orr.w	r3, r3, #1
 800ac44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	f023 030a 	bic.w	r3, r3, #10
 800ac60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f003 030a 	and.w	r3, r3, #10
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	621a      	str	r2, [r3, #32]
}
 800ac7a:	bf00      	nop
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40010000 	.word	0x40010000
 800ac8c:	40000400 	.word	0x40000400
 800ac90:	40000800 	.word	0x40000800
 800ac94:	40000c00 	.word	0x40000c00
 800ac98:	40010400 	.word	0x40010400
 800ac9c:	40014000 	.word	0x40014000
 800aca0:	40001800 	.word	0x40001800

0800aca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	f023 0201 	bic.w	r2, r3, #1
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f023 030a 	bic.w	r3, r3, #10
 800ace0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	621a      	str	r2, [r3, #32]
}
 800acf6:	bf00      	nop
 800acf8:	371c      	adds	r7, #28
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b087      	sub	sp, #28
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	607a      	str	r2, [r7, #4]
 800ad0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	f023 0210 	bic.w	r2, r3, #16
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	031b      	lsls	r3, r3, #12
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	621a      	str	r2, [r3, #32]
}
 800ad70:	bf00      	nop
 800ad72:	371c      	adds	r7, #28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	f023 0210 	bic.w	r2, r3, #16
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ada6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	031b      	lsls	r3, r3, #12
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	4313      	orrs	r3, r2
 800adb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	697a      	ldr	r2, [r7, #20]
 800adc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	621a      	str	r2, [r3, #32]
}
 800add0:	bf00      	nop
 800add2:	371c      	adds	r7, #28
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800addc:	b480      	push	{r7}
 800adde:	b087      	sub	sp, #28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f023 0303 	bic.w	r3, r3, #3
 800ae08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ae2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	021b      	lsls	r3, r3, #8
 800ae32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	621a      	str	r2, [r3, #32]
}
 800ae48:	bf00      	nop
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	021b      	lsls	r3, r3, #8
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	031b      	lsls	r3, r3, #12
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800aea6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	031b      	lsls	r3, r3, #12
 800aeac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	bf00      	nop
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	f043 0307 	orr.w	r3, r3, #7
 800aef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	609a      	str	r2, [r3, #8]
}
 800aef8:	bf00      	nop
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af04:	b480      	push	{r7}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	021a      	lsls	r2, r3, #8
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	431a      	orrs	r2, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	609a      	str	r2, [r3, #8]
}
 800af38:	bf00      	nop
 800af3a:	371c      	adds	r7, #28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4a32      	ldr	r2, [pc, #200]	; (800b01c <TIM_CCxChannelCmd+0xd8>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d030      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af5e:	d02c      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4a2f      	ldr	r2, [pc, #188]	; (800b020 <TIM_CCxChannelCmd+0xdc>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d028      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4a2e      	ldr	r2, [pc, #184]	; (800b024 <TIM_CCxChannelCmd+0xe0>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d024      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4a2d      	ldr	r2, [pc, #180]	; (800b028 <TIM_CCxChannelCmd+0xe4>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d020      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4a2c      	ldr	r2, [pc, #176]	; (800b02c <TIM_CCxChannelCmd+0xe8>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d01c      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	4a2b      	ldr	r2, [pc, #172]	; (800b030 <TIM_CCxChannelCmd+0xec>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d018      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4a2a      	ldr	r2, [pc, #168]	; (800b034 <TIM_CCxChannelCmd+0xf0>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d014      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4a29      	ldr	r2, [pc, #164]	; (800b038 <TIM_CCxChannelCmd+0xf4>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d010      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4a28      	ldr	r2, [pc, #160]	; (800b03c <TIM_CCxChannelCmd+0xf8>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00c      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4a27      	ldr	r2, [pc, #156]	; (800b040 <TIM_CCxChannelCmd+0xfc>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d008      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4a26      	ldr	r2, [pc, #152]	; (800b044 <TIM_CCxChannelCmd+0x100>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d004      	beq.n	800afba <TIM_CCxChannelCmd+0x76>
 800afb0:	f641 5198 	movw	r1, #7576	; 0x1d98
 800afb4:	4824      	ldr	r0, [pc, #144]	; (800b048 <TIM_CCxChannelCmd+0x104>)
 800afb6:	f7f9 fc6c 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d010      	beq.n	800afe2 <TIM_CCxChannelCmd+0x9e>
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d00d      	beq.n	800afe2 <TIM_CCxChannelCmd+0x9e>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b08      	cmp	r3, #8
 800afca:	d00a      	beq.n	800afe2 <TIM_CCxChannelCmd+0x9e>
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b0c      	cmp	r3, #12
 800afd0:	d007      	beq.n	800afe2 <TIM_CCxChannelCmd+0x9e>
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b3c      	cmp	r3, #60	; 0x3c
 800afd6:	d004      	beq.n	800afe2 <TIM_CCxChannelCmd+0x9e>
 800afd8:	f641 5199 	movw	r1, #7577	; 0x1d99
 800afdc:	481a      	ldr	r0, [pc, #104]	; (800b048 <TIM_CCxChannelCmd+0x104>)
 800afde:	f7f9 fc58 	bl	8004892 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f003 031f 	and.w	r3, r3, #31
 800afe8:	2201      	movs	r2, #1
 800afea:	fa02 f303 	lsl.w	r3, r2, r3
 800afee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a1a      	ldr	r2, [r3, #32]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	43db      	mvns	r3, r3
 800aff8:	401a      	ands	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6a1a      	ldr	r2, [r3, #32]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	f003 031f 	and.w	r3, r3, #31
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	fa01 f303 	lsl.w	r3, r1, r3
 800b00e:	431a      	orrs	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	621a      	str	r2, [r3, #32]
}
 800b014:	bf00      	nop
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	40010000 	.word	0x40010000
 800b020:	40000400 	.word	0x40000400
 800b024:	40000800 	.word	0x40000800
 800b028:	40000c00 	.word	0x40000c00
 800b02c:	40010400 	.word	0x40010400
 800b030:	40014000 	.word	0x40014000
 800b034:	40014400 	.word	0x40014400
 800b038:	40014800 	.word	0x40014800
 800b03c:	40001800 	.word	0x40001800
 800b040:	40001c00 	.word	0x40001c00
 800b044:	40002000 	.word	0x40002000
 800b048:	0800c874 	.word	0x0800c874

0800b04c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a61      	ldr	r2, [pc, #388]	; (800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d027      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b068:	d022      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a5d      	ldr	r2, [pc, #372]	; (800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d01d      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a5b      	ldr	r2, [pc, #364]	; (800b1e8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d018      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a5a      	ldr	r2, [pc, #360]	; (800b1ec <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d013      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a58      	ldr	r2, [pc, #352]	; (800b1f0 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d00e      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a57      	ldr	r2, [pc, #348]	; (800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d009      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a55      	ldr	r2, [pc, #340]	; (800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d004      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b0a6:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800b0aa:	4854      	ldr	r0, [pc, #336]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b0ac:	f7f9 fbf1 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d020      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	d01c      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d018      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b30      	cmp	r3, #48	; 0x30
 800b0ce:	d014      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b40      	cmp	r3, #64	; 0x40
 800b0d6:	d010      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b50      	cmp	r3, #80	; 0x50
 800b0de:	d00c      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b60      	cmp	r3, #96	; 0x60
 800b0e6:	d008      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b70      	cmp	r3, #112	; 0x70
 800b0ee:	d004      	beq.n	800b0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b0f0:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800b0f4:	4841      	ldr	r0, [pc, #260]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b0f6:	f7f9 fbcc 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	2b80      	cmp	r3, #128	; 0x80
 800b100:	d008      	beq.n	800b114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d004      	beq.n	800b114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b10a:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800b10e:	483b      	ldr	r0, [pc, #236]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b110:	f7f9 fbbf 	bl	8004892 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d101      	bne.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b11e:	2302      	movs	r3, #2
 800b120:	e05a      	b.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2202      	movs	r2, #2
 800b12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a1f      	ldr	r2, [pc, #124]	; (800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d022      	beq.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b16e:	d01d      	beq.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a1b      	ldr	r2, [pc, #108]	; (800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d018      	beq.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a1a      	ldr	r2, [pc, #104]	; (800b1e8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d013      	beq.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a18      	ldr	r2, [pc, #96]	; (800b1ec <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d00e      	beq.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a19      	ldr	r2, [pc, #100]	; (800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d009      	beq.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a18      	ldr	r2, [pc, #96]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d004      	beq.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a17      	ldr	r2, [pc, #92]	; (800b204 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d10c      	bne.n	800b1c6 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	40010000 	.word	0x40010000
 800b1e4:	40000400 	.word	0x40000400
 800b1e8:	40000800 	.word	0x40000800
 800b1ec:	40000c00 	.word	0x40000c00
 800b1f0:	40001000 	.word	0x40001000
 800b1f4:	40001400 	.word	0x40001400
 800b1f8:	40010400 	.word	0x40010400
 800b1fc:	0800c8ac 	.word	0x0800c8ac
 800b200:	40014000 	.word	0x40014000
 800b204:	40001800 	.word	0x40001800

0800b208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a5e      	ldr	r2, [pc, #376]	; (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d009      	beq.n	800b234 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a5c      	ldr	r2, [pc, #368]	; (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d004      	beq.n	800b234 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b22a:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800b22e:	485b      	ldr	r0, [pc, #364]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b230:	f7f9 fb2f 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b23c:	d008      	beq.n	800b250 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d004      	beq.n	800b250 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b246:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800b24a:	4854      	ldr	r0, [pc, #336]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b24c:	f7f9 fb21 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b258:	d008      	beq.n	800b26c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d004      	beq.n	800b26c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b262:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800b266:	484d      	ldr	r0, [pc, #308]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b268:	f7f9 fb13 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d013      	beq.n	800b29c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b27c:	d00e      	beq.n	800b29c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b286:	d009      	beq.n	800b29c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b290:	d004      	beq.n	800b29c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b292:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800b296:	4841      	ldr	r0, [pc, #260]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b298:	f7f9 fafb 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	2bff      	cmp	r3, #255	; 0xff
 800b2a2:	d904      	bls.n	800b2ae <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800b2a4:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800b2a8:	483c      	ldr	r0, [pc, #240]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b2aa:	f7f9 faf2 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b6:	d008      	beq.n	800b2ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b2c0:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800b2c4:	4835      	ldr	r0, [pc, #212]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b2c6:	f7f9 fae4 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d009      	beq.n	800b2e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2da:	d004      	beq.n	800b2e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b2dc:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800b2e0:	482e      	ldr	r0, [pc, #184]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b2e2:	f7f9 fad6 	bl	8004892 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2ee:	d008      	beq.n	800b302 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d004      	beq.n	800b302 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b2f8:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800b2fc:	4827      	ldr	r0, [pc, #156]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b2fe:	f7f9 fac8 	bl	8004892 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d101      	bne.n	800b310 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e03d      	b.n	800b38c <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	4313      	orrs	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	4313      	orrs	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	4313      	orrs	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	40010000 	.word	0x40010000
 800b398:	40010400 	.word	0x40010400
 800b39c:	0800c8ac 	.word	0x0800c8ac

0800b3a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e0be      	b.n	800b558 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d03b      	beq.n	800b45a <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a5e      	ldr	r2, [pc, #376]	; (800b560 <HAL_UART_Init+0x198>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d01d      	beq.n	800b428 <HAL_UART_Init+0x60>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a5c      	ldr	r2, [pc, #368]	; (800b564 <HAL_UART_Init+0x19c>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d018      	beq.n	800b428 <HAL_UART_Init+0x60>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a5b      	ldr	r2, [pc, #364]	; (800b568 <HAL_UART_Init+0x1a0>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d013      	beq.n	800b428 <HAL_UART_Init+0x60>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a59      	ldr	r2, [pc, #356]	; (800b56c <HAL_UART_Init+0x1a4>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d00e      	beq.n	800b428 <HAL_UART_Init+0x60>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a58      	ldr	r2, [pc, #352]	; (800b570 <HAL_UART_Init+0x1a8>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d009      	beq.n	800b428 <HAL_UART_Init+0x60>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a56      	ldr	r2, [pc, #344]	; (800b574 <HAL_UART_Init+0x1ac>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d004      	beq.n	800b428 <HAL_UART_Init+0x60>
 800b41e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800b422:	4855      	ldr	r0, [pc, #340]	; (800b578 <HAL_UART_Init+0x1b0>)
 800b424:	f7f9 fa35 	bl	8004892 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d037      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b438:	d032      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b442:	d02d      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b44c:	d028      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b44e:	f240 1173 	movw	r1, #371	; 0x173
 800b452:	4849      	ldr	r0, [pc, #292]	; (800b578 <HAL_UART_Init+0x1b0>)
 800b454:	f7f9 fa1d 	bl	8004892 <assert_failed>
 800b458:	e022      	b.n	800b4a0 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a40      	ldr	r2, [pc, #256]	; (800b560 <HAL_UART_Init+0x198>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d01d      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a3e      	ldr	r2, [pc, #248]	; (800b564 <HAL_UART_Init+0x19c>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d018      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a3d      	ldr	r2, [pc, #244]	; (800b568 <HAL_UART_Init+0x1a0>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d013      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a3b      	ldr	r2, [pc, #236]	; (800b56c <HAL_UART_Init+0x1a4>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d00e      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a3a      	ldr	r2, [pc, #232]	; (800b570 <HAL_UART_Init+0x1a8>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d009      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a38      	ldr	r2, [pc, #224]	; (800b574 <HAL_UART_Init+0x1ac>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d004      	beq.n	800b4a0 <HAL_UART_Init+0xd8>
 800b496:	f240 1177 	movw	r1, #375	; 0x177
 800b49a:	4837      	ldr	r0, [pc, #220]	; (800b578 <HAL_UART_Init+0x1b0>)
 800b49c:	f7f9 f9f9 	bl	8004892 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d009      	beq.n	800b4bc <HAL_UART_Init+0xf4>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b0:	d004      	beq.n	800b4bc <HAL_UART_Init+0xf4>
 800b4b2:	f240 1179 	movw	r1, #377	; 0x179
 800b4b6:	4830      	ldr	r0, [pc, #192]	; (800b578 <HAL_UART_Init+0x1b0>)
 800b4b8:	f7f9 f9eb 	bl	8004892 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	69db      	ldr	r3, [r3, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d009      	beq.n	800b4d8 <HAL_UART_Init+0x110>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	69db      	ldr	r3, [r3, #28]
 800b4c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4cc:	d004      	beq.n	800b4d8 <HAL_UART_Init+0x110>
 800b4ce:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800b4d2:	4829      	ldr	r0, [pc, #164]	; (800b578 <HAL_UART_Init+0x1b0>)
 800b4d4:	f7f9 f9dd 	bl	8004892 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d106      	bne.n	800b4f2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7f9 fcab 	bl	8004e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2224      	movs	r2, #36	; 0x24
 800b4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68da      	ldr	r2, [r3, #12]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b508:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fce8 	bl	800bee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b51e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	695a      	ldr	r2, [r3, #20]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b52e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b53e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	40011000 	.word	0x40011000
 800b564:	40004400 	.word	0x40004400
 800b568:	40004800 	.word	0x40004800
 800b56c:	40004c00 	.word	0x40004c00
 800b570:	40005000 	.word	0x40005000
 800b574:	40011400 	.word	0x40011400
 800b578:	0800c8e8 	.word	0x0800c8e8

0800b57c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	4613      	mov	r3, r2
 800b588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b20      	cmp	r3, #32
 800b594:	d11d      	bne.n	800b5d2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <HAL_UART_Receive_IT+0x26>
 800b59c:	88fb      	ldrh	r3, [r7, #6]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e016      	b.n	800b5d4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d101      	bne.n	800b5b4 <HAL_UART_Receive_IT+0x38>
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	e00f      	b.n	800b5d4 <HAL_UART_Receive_IT+0x58>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 fab5 	bl	800bb38 <UART_Start_Receive_IT>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	e000      	b.n	800b5d4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b5d2:	2302      	movs	r3, #2
  }
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b0ba      	sub	sp, #232	; 0xe8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b602:	2300      	movs	r3, #0
 800b604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b608:	2300      	movs	r3, #0
 800b60a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b60e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b612:	f003 030f 	and.w	r3, r3, #15
 800b616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b61a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10f      	bne.n	800b642 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b626:	f003 0320 	and.w	r3, r3, #32
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <HAL_UART_IRQHandler+0x66>
 800b62e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b632:	f003 0320 	and.w	r3, r3, #32
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fb95 	bl	800bd6a <UART_Receive_IT>
      return;
 800b640:	e256      	b.n	800baf0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 80de 	beq.w	800b808 <HAL_UART_IRQHandler+0x22c>
 800b64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	d106      	bne.n	800b666 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b65c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 80d1 	beq.w	800b808 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00b      	beq.n	800b68a <HAL_UART_IRQHandler+0xae>
 800b672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b682:	f043 0201 	orr.w	r2, r3, #1
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00b      	beq.n	800b6ae <HAL_UART_IRQHandler+0xd2>
 800b696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d005      	beq.n	800b6ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	f043 0202 	orr.w	r2, r3, #2
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00b      	beq.n	800b6d2 <HAL_UART_IRQHandler+0xf6>
 800b6ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d005      	beq.n	800b6d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ca:	f043 0204 	orr.w	r2, r3, #4
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d6:	f003 0308 	and.w	r3, r3, #8
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d011      	beq.n	800b702 <HAL_UART_IRQHandler+0x126>
 800b6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d105      	bne.n	800b6f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b6ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fa:	f043 0208 	orr.w	r2, r3, #8
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 81ed 	beq.w	800bae6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b710:	f003 0320 	and.w	r3, r3, #32
 800b714:	2b00      	cmp	r3, #0
 800b716:	d008      	beq.n	800b72a <HAL_UART_IRQHandler+0x14e>
 800b718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fb20 	bl	800bd6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b734:	2b40      	cmp	r3, #64	; 0x40
 800b736:	bf0c      	ite	eq
 800b738:	2301      	moveq	r3, #1
 800b73a:	2300      	movne	r3, #0
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	f003 0308 	and.w	r3, r3, #8
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d103      	bne.n	800b756 <HAL_UART_IRQHandler+0x17a>
 800b74e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b752:	2b00      	cmp	r3, #0
 800b754:	d04f      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fa28 	bl	800bbac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	695b      	ldr	r3, [r3, #20]
 800b762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b766:	2b40      	cmp	r3, #64	; 0x40
 800b768:	d141      	bne.n	800b7ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3314      	adds	r3, #20
 800b770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b778:	e853 3f00 	ldrex	r3, [r3]
 800b77c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3314      	adds	r3, #20
 800b792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b796:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b79a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7a6:	e841 2300 	strex	r3, r2, [r1]
 800b7aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1d9      	bne.n	800b76a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d013      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	4a7d      	ldr	r2, [pc, #500]	; (800b9b8 <HAL_UART_IRQHandler+0x3dc>)
 800b7c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fa f92a 	bl	8005a24 <HAL_DMA_Abort_IT>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d016      	beq.n	800b804 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7e4:	e00e      	b.n	800b804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f990 	bl	800bb0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ec:	e00a      	b.n	800b804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f98c 	bl	800bb0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f4:	e006      	b.n	800b804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f988 	bl	800bb0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b802:	e170      	b.n	800bae6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b804:	bf00      	nop
    return;
 800b806:	e16e      	b.n	800bae6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	f040 814a 	bne.w	800baa6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b816:	f003 0310 	and.w	r3, r3, #16
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 8143 	beq.w	800baa6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b824:	f003 0310 	and.w	r3, r3, #16
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 813c 	beq.w	800baa6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b82e:	2300      	movs	r3, #0
 800b830:	60bb      	str	r3, [r7, #8]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	60bb      	str	r3, [r7, #8]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	60bb      	str	r3, [r7, #8]
 800b842:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b84e:	2b40      	cmp	r3, #64	; 0x40
 800b850:	f040 80b4 	bne.w	800b9bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b860:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 8140 	beq.w	800baea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b86e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b872:	429a      	cmp	r2, r3
 800b874:	f080 8139 	bcs.w	800baea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b87e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b88a:	f000 8088 	beq.w	800b99e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	330c      	adds	r3, #12
 800b894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b8ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1d9      	bne.n	800b88e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3314      	adds	r3, #20
 800b8e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8e4:	e853 3f00 	ldrex	r3, [r3]
 800b8e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8ec:	f023 0301 	bic.w	r3, r3, #1
 800b8f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3314      	adds	r3, #20
 800b8fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b90a:	e841 2300 	strex	r3, r2, [r1]
 800b90e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1e1      	bne.n	800b8da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3314      	adds	r3, #20
 800b91c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b920:	e853 3f00 	ldrex	r3, [r3]
 800b924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b92c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3314      	adds	r3, #20
 800b936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b93a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b93c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b942:	e841 2300 	strex	r3, r2, [r1]
 800b946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1e3      	bne.n	800b916 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2220      	movs	r2, #32
 800b952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	330c      	adds	r3, #12
 800b962:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b966:	e853 3f00 	ldrex	r3, [r3]
 800b96a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b96e:	f023 0310 	bic.w	r3, r3, #16
 800b972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	330c      	adds	r3, #12
 800b97c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b980:	65ba      	str	r2, [r7, #88]	; 0x58
 800b982:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b984:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b988:	e841 2300 	strex	r3, r2, [r1]
 800b98c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1e3      	bne.n	800b95c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b998:	4618      	mov	r0, r3
 800b99a:	f7f9 ffd3 	bl	8005944 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f8b6 	bl	800bb20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9b4:	e099      	b.n	800baea <HAL_UART_IRQHandler+0x50e>
 800b9b6:	bf00      	nop
 800b9b8:	0800bc73 	.word	0x0800bc73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 808b 	beq.w	800baee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b9d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 8086 	beq.w	800baee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	330c      	adds	r3, #12
 800b9e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	e853 3f00 	ldrex	r3, [r3]
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	330c      	adds	r3, #12
 800ba02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba06:	647a      	str	r2, [r7, #68]	; 0x44
 800ba08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba0e:	e841 2300 	strex	r3, r2, [r1]
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1e3      	bne.n	800b9e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3314      	adds	r3, #20
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	623b      	str	r3, [r7, #32]
   return(result);
 800ba2a:	6a3b      	ldr	r3, [r7, #32]
 800ba2c:	f023 0301 	bic.w	r3, r3, #1
 800ba30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3314      	adds	r3, #20
 800ba3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba3e:	633a      	str	r2, [r7, #48]	; 0x30
 800ba40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e3      	bne.n	800ba1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	330c      	adds	r3, #12
 800ba66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 0310 	bic.w	r3, r3, #16
 800ba76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	330c      	adds	r3, #12
 800ba80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba84:	61fa      	str	r2, [r7, #28]
 800ba86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba88:	69b9      	ldr	r1, [r7, #24]
 800ba8a:	69fa      	ldr	r2, [r7, #28]
 800ba8c:	e841 2300 	strex	r3, r2, [r1]
 800ba90:	617b      	str	r3, [r7, #20]
   return(result);
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e3      	bne.n	800ba60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f83e 	bl	800bb20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800baa4:	e023      	b.n	800baee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <HAL_UART_IRQHandler+0x4ea>
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f8eb 	bl	800bc9a <UART_Transmit_IT>
    return;
 800bac4:	e014      	b.n	800baf0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00e      	beq.n	800baf0 <HAL_UART_IRQHandler+0x514>
 800bad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bada:	2b00      	cmp	r3, #0
 800badc:	d008      	beq.n	800baf0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f92b 	bl	800bd3a <UART_EndTransmit_IT>
    return;
 800bae4:	e004      	b.n	800baf0 <HAL_UART_IRQHandler+0x514>
    return;
 800bae6:	bf00      	nop
 800bae8:	e002      	b.n	800baf0 <HAL_UART_IRQHandler+0x514>
      return;
 800baea:	bf00      	nop
 800baec:	e000      	b.n	800baf0 <HAL_UART_IRQHandler+0x514>
      return;
 800baee:	bf00      	nop
  }
}
 800baf0:	37e8      	adds	r7, #232	; 0xe8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop

0800baf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	88fa      	ldrh	r2, [r7, #6]
 800bb50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	88fa      	ldrh	r2, [r7, #6]
 800bb56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2222      	movs	r2, #34	; 0x22
 800bb62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	695a      	ldr	r2, [r3, #20]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f042 0201 	orr.w	r2, r2, #1
 800bb8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f042 0220 	orr.w	r2, r2, #32
 800bb9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b095      	sub	sp, #84	; 0x54
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	330c      	adds	r3, #12
 800bbba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbe:	e853 3f00 	ldrex	r3, [r3]
 800bbc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	330c      	adds	r3, #12
 800bbd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbd4:	643a      	str	r2, [r7, #64]	; 0x40
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbdc:	e841 2300 	strex	r3, r2, [r1]
 800bbe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1e5      	bne.n	800bbb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3314      	adds	r3, #20
 800bbee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	e853 3f00 	ldrex	r3, [r3]
 800bbf6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	f023 0301 	bic.w	r3, r3, #1
 800bbfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3314      	adds	r3, #20
 800bc06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc10:	e841 2300 	strex	r3, r2, [r1]
 800bc14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1e5      	bne.n	800bbe8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d119      	bne.n	800bc58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	330c      	adds	r3, #12
 800bc2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f023 0310 	bic.w	r3, r3, #16
 800bc3a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	330c      	adds	r3, #12
 800bc42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc44:	61ba      	str	r2, [r7, #24]
 800bc46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	6979      	ldr	r1, [r7, #20]
 800bc4a:	69ba      	ldr	r2, [r7, #24]
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	613b      	str	r3, [r7, #16]
   return(result);
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e5      	bne.n	800bc24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bc66:	bf00      	nop
 800bc68:	3754      	adds	r7, #84	; 0x54
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7ff ff3d 	bl	800bb0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc92:	bf00      	nop
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b085      	sub	sp, #20
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b21      	cmp	r3, #33	; 0x21
 800bcac:	d13e      	bne.n	800bd2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcb6:	d114      	bne.n	800bce2 <UART_Transmit_IT+0x48>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d110      	bne.n	800bce2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	1c9a      	adds	r2, r3, #2
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	621a      	str	r2, [r3, #32]
 800bce0:	e008      	b.n	800bcf4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	1c59      	adds	r1, r3, #1
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	6211      	str	r1, [r2, #32]
 800bcec:	781a      	ldrb	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	4619      	mov	r1, r3
 800bd02:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10f      	bne.n	800bd28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	68da      	ldr	r2, [r3, #12]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68da      	ldr	r2, [r3, #12]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	e000      	b.n	800bd2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd2c:	2302      	movs	r3, #2
  }
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68da      	ldr	r2, [r3, #12]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2220      	movs	r2, #32
 800bd56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7ff fecc 	bl	800baf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b08c      	sub	sp, #48	; 0x30
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b22      	cmp	r3, #34	; 0x22
 800bd7c:	f040 80ab 	bne.w	800bed6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd88:	d117      	bne.n	800bdba <UART_Receive_IT+0x50>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d113      	bne.n	800bdba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd92:	2300      	movs	r3, #0
 800bd94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb2:	1c9a      	adds	r2, r3, #2
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	629a      	str	r2, [r3, #40]	; 0x28
 800bdb8:	e026      	b.n	800be08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdcc:	d007      	beq.n	800bdde <UART_Receive_IT+0x74>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10a      	bne.n	800bdec <UART_Receive_IT+0x82>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d106      	bne.n	800bdec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	e008      	b.n	800bdfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	3b01      	subs	r3, #1
 800be10:	b29b      	uxth	r3, r3
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	4619      	mov	r1, r3
 800be16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d15a      	bne.n	800bed2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	68da      	ldr	r2, [r3, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f022 0220 	bic.w	r2, r2, #32
 800be2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68da      	ldr	r2, [r3, #12]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	695a      	ldr	r2, [r3, #20]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0201 	bic.w	r2, r2, #1
 800be4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2220      	movs	r2, #32
 800be50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d135      	bne.n	800bec8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	330c      	adds	r3, #12
 800be68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	613b      	str	r3, [r7, #16]
   return(result);
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	f023 0310 	bic.w	r3, r3, #16
 800be78:	627b      	str	r3, [r7, #36]	; 0x24
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	330c      	adds	r3, #12
 800be80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be82:	623a      	str	r2, [r7, #32]
 800be84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be86:	69f9      	ldr	r1, [r7, #28]
 800be88:	6a3a      	ldr	r2, [r7, #32]
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e5      	bne.n	800be62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0310 	and.w	r3, r3, #16
 800bea0:	2b10      	cmp	r3, #16
 800bea2:	d10a      	bne.n	800beba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bea4:	2300      	movs	r3, #0
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	60fb      	str	r3, [r7, #12]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	60fb      	str	r3, [r7, #12]
 800beb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff fe2d 	bl	800bb20 <HAL_UARTEx_RxEventCallback>
 800bec6:	e002      	b.n	800bece <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7f5 f9bf 	bl	800124c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	e002      	b.n	800bed8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	e000      	b.n	800bed8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bed6:	2302      	movs	r3, #2
  }
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3730      	adds	r7, #48	; 0x30
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	b09f      	sub	sp, #124	; 0x7c
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800beea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	4b9b      	ldr	r3, [pc, #620]	; (800c15c <UART_SetConfig+0x27c>)
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d904      	bls.n	800befe <UART_SetConfig+0x1e>
 800bef4:	f640 6156 	movw	r1, #3670	; 0xe56
 800bef8:	4899      	ldr	r0, [pc, #612]	; (800c160 <UART_SetConfig+0x280>)
 800befa:	f7f8 fcca 	bl	8004892 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800befe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d009      	beq.n	800bf1a <UART_SetConfig+0x3a>
 800bf06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf0e:	d004      	beq.n	800bf1a <UART_SetConfig+0x3a>
 800bf10:	f640 6157 	movw	r1, #3671	; 0xe57
 800bf14:	4892      	ldr	r0, [pc, #584]	; (800c160 <UART_SetConfig+0x280>)
 800bf16:	f7f8 fcbc 	bl	8004892 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bf1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00e      	beq.n	800bf40 <UART_SetConfig+0x60>
 800bf22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf2a:	d009      	beq.n	800bf40 <UART_SetConfig+0x60>
 800bf2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bf34:	d004      	beq.n	800bf40 <UART_SetConfig+0x60>
 800bf36:	f640 6158 	movw	r1, #3672	; 0xe58
 800bf3a:	4889      	ldr	r0, [pc, #548]	; (800c160 <UART_SetConfig+0x280>)
 800bf3c:	f7f8 fca9 	bl	8004892 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bf40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf42:	695a      	ldr	r2, [r3, #20]
 800bf44:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bf48:	4013      	ands	r3, r2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d103      	bne.n	800bf56 <UART_SetConfig+0x76>
 800bf4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d104      	bne.n	800bf60 <UART_SetConfig+0x80>
 800bf56:	f640 6159 	movw	r1, #3673	; 0xe59
 800bf5a:	4881      	ldr	r0, [pc, #516]	; (800c160 <UART_SetConfig+0x280>)
 800bf5c:	f7f8 fc99 	bl	8004892 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bf6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf6c:	68d9      	ldr	r1, [r3, #12]
 800bf6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	ea40 0301 	orr.w	r3, r0, r1
 800bf76:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bf78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf7a:	689a      	ldr	r2, [r3, #8]
 800bf7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	431a      	orrs	r2, r3
 800bf82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf84:	695b      	ldr	r3, [r3, #20]
 800bf86:	431a      	orrs	r2, r3
 800bf88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bf90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bf9a:	f021 010c 	bic.w	r1, r1, #12
 800bf9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfa4:	430b      	orrs	r3, r1
 800bfa6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bfb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfb4:	6999      	ldr	r1, [r3, #24]
 800bfb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	ea40 0301 	orr.w	r3, r0, r1
 800bfbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bfc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	4b67      	ldr	r3, [pc, #412]	; (800c164 <UART_SetConfig+0x284>)
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d004      	beq.n	800bfd4 <UART_SetConfig+0xf4>
 800bfca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	4b66      	ldr	r3, [pc, #408]	; (800c168 <UART_SetConfig+0x288>)
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d103      	bne.n	800bfdc <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bfd4:	f7fa fed4 	bl	8006d80 <HAL_RCC_GetPCLK2Freq>
 800bfd8:	6778      	str	r0, [r7, #116]	; 0x74
 800bfda:	e002      	b.n	800bfe2 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bfdc:	f7fa febc 	bl	8006d58 <HAL_RCC_GetPCLK1Freq>
 800bfe0:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfea:	f040 80c1 	bne.w	800c170 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bfee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bff0:	461c      	mov	r4, r3
 800bff2:	f04f 0500 	mov.w	r5, #0
 800bff6:	4622      	mov	r2, r4
 800bff8:	462b      	mov	r3, r5
 800bffa:	1891      	adds	r1, r2, r2
 800bffc:	6439      	str	r1, [r7, #64]	; 0x40
 800bffe:	415b      	adcs	r3, r3
 800c000:	647b      	str	r3, [r7, #68]	; 0x44
 800c002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c006:	1912      	adds	r2, r2, r4
 800c008:	eb45 0303 	adc.w	r3, r5, r3
 800c00c:	f04f 0000 	mov.w	r0, #0
 800c010:	f04f 0100 	mov.w	r1, #0
 800c014:	00d9      	lsls	r1, r3, #3
 800c016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c01a:	00d0      	lsls	r0, r2, #3
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	1911      	adds	r1, r2, r4
 800c022:	6639      	str	r1, [r7, #96]	; 0x60
 800c024:	416b      	adcs	r3, r5
 800c026:	667b      	str	r3, [r7, #100]	; 0x64
 800c028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	461a      	mov	r2, r3
 800c02e:	f04f 0300 	mov.w	r3, #0
 800c032:	1891      	adds	r1, r2, r2
 800c034:	63b9      	str	r1, [r7, #56]	; 0x38
 800c036:	415b      	adcs	r3, r3
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c03a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c03e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c042:	f7f4 fda7 	bl	8000b94 <__aeabi_uldivmod>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4b48      	ldr	r3, [pc, #288]	; (800c16c <UART_SetConfig+0x28c>)
 800c04c:	fba3 2302 	umull	r2, r3, r3, r2
 800c050:	095b      	lsrs	r3, r3, #5
 800c052:	011e      	lsls	r6, r3, #4
 800c054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c056:	461c      	mov	r4, r3
 800c058:	f04f 0500 	mov.w	r5, #0
 800c05c:	4622      	mov	r2, r4
 800c05e:	462b      	mov	r3, r5
 800c060:	1891      	adds	r1, r2, r2
 800c062:	6339      	str	r1, [r7, #48]	; 0x30
 800c064:	415b      	adcs	r3, r3
 800c066:	637b      	str	r3, [r7, #52]	; 0x34
 800c068:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c06c:	1912      	adds	r2, r2, r4
 800c06e:	eb45 0303 	adc.w	r3, r5, r3
 800c072:	f04f 0000 	mov.w	r0, #0
 800c076:	f04f 0100 	mov.w	r1, #0
 800c07a:	00d9      	lsls	r1, r3, #3
 800c07c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c080:	00d0      	lsls	r0, r2, #3
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	1911      	adds	r1, r2, r4
 800c088:	65b9      	str	r1, [r7, #88]	; 0x58
 800c08a:	416b      	adcs	r3, r5
 800c08c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	461a      	mov	r2, r3
 800c094:	f04f 0300 	mov.w	r3, #0
 800c098:	1891      	adds	r1, r2, r2
 800c09a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c09c:	415b      	adcs	r3, r3
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c0a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c0a8:	f7f4 fd74 	bl	8000b94 <__aeabi_uldivmod>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4b2e      	ldr	r3, [pc, #184]	; (800c16c <UART_SetConfig+0x28c>)
 800c0b2:	fba3 1302 	umull	r1, r3, r3, r2
 800c0b6:	095b      	lsrs	r3, r3, #5
 800c0b8:	2164      	movs	r1, #100	; 0x64
 800c0ba:	fb01 f303 	mul.w	r3, r1, r3
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	3332      	adds	r3, #50	; 0x32
 800c0c4:	4a29      	ldr	r2, [pc, #164]	; (800c16c <UART_SetConfig+0x28c>)
 800c0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ca:	095b      	lsrs	r3, r3, #5
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c0d2:	441e      	add	r6, r3
 800c0d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f04f 0100 	mov.w	r1, #0
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	1894      	adds	r4, r2, r2
 800c0e2:	623c      	str	r4, [r7, #32]
 800c0e4:	415b      	adcs	r3, r3
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c0ec:	1812      	adds	r2, r2, r0
 800c0ee:	eb41 0303 	adc.w	r3, r1, r3
 800c0f2:	f04f 0400 	mov.w	r4, #0
 800c0f6:	f04f 0500 	mov.w	r5, #0
 800c0fa:	00dd      	lsls	r5, r3, #3
 800c0fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c100:	00d4      	lsls	r4, r2, #3
 800c102:	4622      	mov	r2, r4
 800c104:	462b      	mov	r3, r5
 800c106:	1814      	adds	r4, r2, r0
 800c108:	653c      	str	r4, [r7, #80]	; 0x50
 800c10a:	414b      	adcs	r3, r1
 800c10c:	657b      	str	r3, [r7, #84]	; 0x54
 800c10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	461a      	mov	r2, r3
 800c114:	f04f 0300 	mov.w	r3, #0
 800c118:	1891      	adds	r1, r2, r2
 800c11a:	61b9      	str	r1, [r7, #24]
 800c11c:	415b      	adcs	r3, r3
 800c11e:	61fb      	str	r3, [r7, #28]
 800c120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c124:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c128:	f7f4 fd34 	bl	8000b94 <__aeabi_uldivmod>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <UART_SetConfig+0x28c>)
 800c132:	fba3 1302 	umull	r1, r3, r3, r2
 800c136:	095b      	lsrs	r3, r3, #5
 800c138:	2164      	movs	r1, #100	; 0x64
 800c13a:	fb01 f303 	mul.w	r3, r1, r3
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	3332      	adds	r3, #50	; 0x32
 800c144:	4a09      	ldr	r2, [pc, #36]	; (800c16c <UART_SetConfig+0x28c>)
 800c146:	fba2 2303 	umull	r2, r3, r2, r3
 800c14a:	095b      	lsrs	r3, r3, #5
 800c14c:	f003 0207 	and.w	r2, r3, #7
 800c150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4432      	add	r2, r6
 800c156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c158:	e0c4      	b.n	800c2e4 <UART_SetConfig+0x404>
 800c15a:	bf00      	nop
 800c15c:	00a037a0 	.word	0x00a037a0
 800c160:	0800c8e8 	.word	0x0800c8e8
 800c164:	40011000 	.word	0x40011000
 800c168:	40011400 	.word	0x40011400
 800c16c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c172:	461c      	mov	r4, r3
 800c174:	f04f 0500 	mov.w	r5, #0
 800c178:	4622      	mov	r2, r4
 800c17a:	462b      	mov	r3, r5
 800c17c:	1891      	adds	r1, r2, r2
 800c17e:	6139      	str	r1, [r7, #16]
 800c180:	415b      	adcs	r3, r3
 800c182:	617b      	str	r3, [r7, #20]
 800c184:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c188:	1912      	adds	r2, r2, r4
 800c18a:	eb45 0303 	adc.w	r3, r5, r3
 800c18e:	f04f 0000 	mov.w	r0, #0
 800c192:	f04f 0100 	mov.w	r1, #0
 800c196:	00d9      	lsls	r1, r3, #3
 800c198:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c19c:	00d0      	lsls	r0, r2, #3
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	eb12 0804 	adds.w	r8, r2, r4
 800c1a6:	eb43 0905 	adc.w	r9, r3, r5
 800c1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f04f 0100 	mov.w	r1, #0
 800c1b4:	f04f 0200 	mov.w	r2, #0
 800c1b8:	f04f 0300 	mov.w	r3, #0
 800c1bc:	008b      	lsls	r3, r1, #2
 800c1be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c1c2:	0082      	lsls	r2, r0, #2
 800c1c4:	4640      	mov	r0, r8
 800c1c6:	4649      	mov	r1, r9
 800c1c8:	f7f4 fce4 	bl	8000b94 <__aeabi_uldivmod>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	4b47      	ldr	r3, [pc, #284]	; (800c2f0 <UART_SetConfig+0x410>)
 800c1d2:	fba3 2302 	umull	r2, r3, r3, r2
 800c1d6:	095b      	lsrs	r3, r3, #5
 800c1d8:	011e      	lsls	r6, r3, #4
 800c1da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f04f 0100 	mov.w	r1, #0
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	1894      	adds	r4, r2, r2
 800c1e8:	60bc      	str	r4, [r7, #8]
 800c1ea:	415b      	adcs	r3, r3
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1f2:	1812      	adds	r2, r2, r0
 800c1f4:	eb41 0303 	adc.w	r3, r1, r3
 800c1f8:	f04f 0400 	mov.w	r4, #0
 800c1fc:	f04f 0500 	mov.w	r5, #0
 800c200:	00dd      	lsls	r5, r3, #3
 800c202:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c206:	00d4      	lsls	r4, r2, #3
 800c208:	4622      	mov	r2, r4
 800c20a:	462b      	mov	r3, r5
 800c20c:	1814      	adds	r4, r2, r0
 800c20e:	64bc      	str	r4, [r7, #72]	; 0x48
 800c210:	414b      	adcs	r3, r1
 800c212:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	f04f 0100 	mov.w	r1, #0
 800c21e:	f04f 0200 	mov.w	r2, #0
 800c222:	f04f 0300 	mov.w	r3, #0
 800c226:	008b      	lsls	r3, r1, #2
 800c228:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c22c:	0082      	lsls	r2, r0, #2
 800c22e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c232:	f7f4 fcaf 	bl	8000b94 <__aeabi_uldivmod>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	4b2d      	ldr	r3, [pc, #180]	; (800c2f0 <UART_SetConfig+0x410>)
 800c23c:	fba3 1302 	umull	r1, r3, r3, r2
 800c240:	095b      	lsrs	r3, r3, #5
 800c242:	2164      	movs	r1, #100	; 0x64
 800c244:	fb01 f303 	mul.w	r3, r1, r3
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	011b      	lsls	r3, r3, #4
 800c24c:	3332      	adds	r3, #50	; 0x32
 800c24e:	4a28      	ldr	r2, [pc, #160]	; (800c2f0 <UART_SetConfig+0x410>)
 800c250:	fba2 2303 	umull	r2, r3, r2, r3
 800c254:	095b      	lsrs	r3, r3, #5
 800c256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c25a:	441e      	add	r6, r3
 800c25c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c25e:	4618      	mov	r0, r3
 800c260:	f04f 0100 	mov.w	r1, #0
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	1894      	adds	r4, r2, r2
 800c26a:	603c      	str	r4, [r7, #0]
 800c26c:	415b      	adcs	r3, r3
 800c26e:	607b      	str	r3, [r7, #4]
 800c270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c274:	1812      	adds	r2, r2, r0
 800c276:	eb41 0303 	adc.w	r3, r1, r3
 800c27a:	f04f 0400 	mov.w	r4, #0
 800c27e:	f04f 0500 	mov.w	r5, #0
 800c282:	00dd      	lsls	r5, r3, #3
 800c284:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c288:	00d4      	lsls	r4, r2, #3
 800c28a:	4622      	mov	r2, r4
 800c28c:	462b      	mov	r3, r5
 800c28e:	eb12 0a00 	adds.w	sl, r2, r0
 800c292:	eb43 0b01 	adc.w	fp, r3, r1
 800c296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f04f 0100 	mov.w	r1, #0
 800c2a0:	f04f 0200 	mov.w	r2, #0
 800c2a4:	f04f 0300 	mov.w	r3, #0
 800c2a8:	008b      	lsls	r3, r1, #2
 800c2aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c2ae:	0082      	lsls	r2, r0, #2
 800c2b0:	4650      	mov	r0, sl
 800c2b2:	4659      	mov	r1, fp
 800c2b4:	f7f4 fc6e 	bl	8000b94 <__aeabi_uldivmod>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <UART_SetConfig+0x410>)
 800c2be:	fba3 1302 	umull	r1, r3, r3, r2
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	2164      	movs	r1, #100	; 0x64
 800c2c6:	fb01 f303 	mul.w	r3, r1, r3
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	3332      	adds	r3, #50	; 0x32
 800c2d0:	4a07      	ldr	r2, [pc, #28]	; (800c2f0 <UART_SetConfig+0x410>)
 800c2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d6:	095b      	lsrs	r3, r3, #5
 800c2d8:	f003 020f 	and.w	r2, r3, #15
 800c2dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4432      	add	r2, r6
 800c2e2:	609a      	str	r2, [r3, #8]
}
 800c2e4:	bf00      	nop
 800c2e6:	377c      	adds	r7, #124	; 0x7c
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ee:	bf00      	nop
 800c2f0:	51eb851f 	.word	0x51eb851f

0800c2f4 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b0a4      	sub	sp, #144	; 0x90
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	71fb      	strb	r3, [r7, #7]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c2fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	605a      	str	r2, [r3, #4]
 800c308:	609a      	str	r2, [r3, #8]
 800c30a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c30c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c310:	2200      	movs	r2, #0
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800c316:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	605a      	str	r2, [r3, #4]
 800c320:	609a      	str	r2, [r3, #8]
 800c322:	60da      	str	r2, [r3, #12]
 800c324:	611a      	str	r2, [r3, #16]
 800c326:	615a      	str	r2, [r3, #20]
 800c328:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t ARR_Value = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t i = 0;
 800c336:	2300      	movs	r3, #0
 800c338:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 800c33c:	2301      	movs	r3, #1
 800c33e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800c342:	2300      	movs	r3, #0
 800c344:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800c348:	e009      	b.n	800c35e <DC_MOTOR_Init+0x6a>
	{
		ARR_Value *= 2;
 800c34a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800c354:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800c358:	3301      	adds	r3, #1
 800c35a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800c35e:	79fa      	ldrb	r2, [r7, #7]
 800c360:	494d      	ldr	r1, [pc, #308]	; (800c498 <DC_MOTOR_Init+0x1a4>)
 800c362:	4613      	mov	r3, r2
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	440b      	add	r3, r1
 800c36c:	3310      	adds	r3, #16
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800c374:	429a      	cmp	r2, r3
 800c376:	d3e8      	bcc.n	800c34a <DC_MOTOR_Init+0x56>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800c378:	79fa      	ldrb	r2, [r7, #7]
 800c37a:	4947      	ldr	r1, [pc, #284]	; (800c498 <DC_MOTOR_Init+0x1a4>)
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	440b      	add	r3, r1
 800c386:	3308      	adds	r3, #8
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	4b43      	ldr	r3, [pc, #268]	; (800c49c <DC_MOTOR_Init+0x1a8>)
 800c38e:	fb03 f302 	mul.w	r3, r3, r2
 800c392:	4618      	mov	r0, r3
 800c394:	79fa      	ldrb	r2, [r7, #7]
 800c396:	4940      	ldr	r1, [pc, #256]	; (800c498 <DC_MOTOR_Init+0x1a4>)
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	440b      	add	r3, r1
 800c3a2:	330c      	adds	r3, #12
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c3aa:	fb02 f303 	mul.w	r3, r2, r3
 800c3ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800c3b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PSC_Value--;
 800c3b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ARR_Value -= 2;
 800c3c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3c4:	3b02      	subs	r3, #2
 800c3c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800c3ca:	79fa      	ldrb	r2, [r7, #7]
 800c3cc:	4932      	ldr	r1, [pc, #200]	; (800c498 <DC_MOTOR_Init+0x1a4>)
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	440b      	add	r3, r1
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	60bb      	str	r3, [r7, #8]
	htim.Init.Prescaler = PSC_Value;
 800c3dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3e0:	60fb      	str	r3, [r7, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800c3e2:	2360      	movs	r3, #96	; 0x60
 800c3e4:	613b      	str	r3, [r7, #16]
	htim.Init.Period = ARR_Value;
 800c3e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3ea:	617b      	str	r3, [r7, #20]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61bb      	str	r3, [r7, #24]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c3f0:	2380      	movs	r3, #128	; 0x80
 800c3f2:	623b      	str	r3, [r7, #32]
	HAL_TIM_Base_Init(&htim);
 800c3f4:	f107 0308 	add.w	r3, r7, #8
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fc f8b5 	bl	8008568 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c3fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c402:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800c404:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800c408:	f107 0308 	add.w	r3, r7, #8
 800c40c:	4611      	mov	r1, r2
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fd fc4e 	bl	8009cb0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800c414:	f107 0308 	add.w	r3, r7, #8
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fc fa5b 	bl	80088d4 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c41e:	2300      	movs	r3, #0
 800c420:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c422:	2300      	movs	r3, #0
 800c424:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800c426:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c42a:	f107 0308 	add.w	r3, r7, #8
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe fe0b 	bl	800b04c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c436:	2360      	movs	r3, #96	; 0x60
 800c438:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c43e:	2300      	movs	r3, #0
 800c440:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c442:	2300      	movs	r3, #0
 800c444:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800c446:	79fa      	ldrb	r2, [r7, #7]
 800c448:	4913      	ldr	r1, [pc, #76]	; (800c498 <DC_MOTOR_Init+0x1a4>)
 800c44a:	4613      	mov	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	3304      	adds	r3, #4
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c45c:	f107 0308 	add.w	r3, r7, #8
 800c460:	4618      	mov	r0, r3
 800c462:	f7fd fa4d 	bl	8009900 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800c466:	f107 0308 	add.w	r3, r7, #8
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7f8 fc88 	bl	8004d80 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800c470:	79fa      	ldrb	r2, [r7, #7]
 800c472:	4909      	ldr	r1, [pc, #36]	; (800c498 <DC_MOTOR_Init+0x1a4>)
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	3304      	adds	r3, #4
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	f107 0308 	add.w	r3, r7, #8
 800c486:	4611      	mov	r1, r2
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fc fb1d 	bl	8008ac8 <HAL_TIM_PWM_Start>
}
 800c48e:	bf00      	nop
 800c490:	3790      	adds	r7, #144	; 0x90
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	0800c964 	.word	0x0800c964
 800c49c:	000f4240 	.word	0x000f4240

0800c4a0 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	71fb      	strb	r3, [r7, #7]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800c4b0:	79fa      	ldrb	r2, [r7, #7]
 800c4b2:	4928      	ldr	r1, [pc, #160]	; (800c554 <DC_MOTOR_Start+0xb4>)
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	440b      	add	r3, r1
 800c4be:	3304      	adds	r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10a      	bne.n	800c4dc <DC_MOTOR_Start+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800c4c6:	79fa      	ldrb	r2, [r7, #7]
 800c4c8:	4922      	ldr	r1, [pc, #136]	; (800c554 <DC_MOTOR_Start+0xb4>)
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	440b      	add	r3, r1
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	88ba      	ldrh	r2, [r7, #4]
 800c4d8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800c4da:	e035      	b.n	800c548 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800c4dc:	79fa      	ldrb	r2, [r7, #7]
 800c4de:	491d      	ldr	r1, [pc, #116]	; (800c554 <DC_MOTOR_Start+0xb4>)
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	440b      	add	r3, r1
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d10a      	bne.n	800c508 <DC_MOTOR_Start+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800c4f2:	79fa      	ldrb	r2, [r7, #7]
 800c4f4:	4917      	ldr	r1, [pc, #92]	; (800c554 <DC_MOTOR_Start+0xb4>)
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	440b      	add	r3, r1
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	88ba      	ldrh	r2, [r7, #4]
 800c504:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c506:	e01f      	b.n	800c548 <DC_MOTOR_Start+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800c508:	79fa      	ldrb	r2, [r7, #7]
 800c50a:	4912      	ldr	r1, [pc, #72]	; (800c554 <DC_MOTOR_Start+0xb4>)
 800c50c:	4613      	mov	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4413      	add	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	440b      	add	r3, r1
 800c516:	3304      	adds	r3, #4
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b08      	cmp	r3, #8
 800c51c:	d10a      	bne.n	800c534 <DC_MOTOR_Start+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800c51e:	79fa      	ldrb	r2, [r7, #7]
 800c520:	490c      	ldr	r1, [pc, #48]	; (800c554 <DC_MOTOR_Start+0xb4>)
 800c522:	4613      	mov	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	440b      	add	r3, r1
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	88ba      	ldrh	r2, [r7, #4]
 800c530:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c532:	e009      	b.n	800c548 <DC_MOTOR_Start+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800c534:	79fa      	ldrb	r2, [r7, #7]
 800c536:	4907      	ldr	r1, [pc, #28]	; (800c554 <DC_MOTOR_Start+0xb4>)
 800c538:	4613      	mov	r3, r2
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	4413      	add	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	440b      	add	r3, r1
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	88ba      	ldrh	r2, [r7, #4]
 800c546:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c548:	bf00      	nop
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	0800c964 	.word	0x0800c964

0800c558 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	460a      	mov	r2, r1
 800c562:	71fb      	strb	r3, [r7, #7]
 800c564:	4613      	mov	r3, r2
 800c566:	80bb      	strh	r3, [r7, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	//1023 MAX
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800c568:	79fa      	ldrb	r2, [r7, #7]
 800c56a:	4928      	ldr	r1, [pc, #160]	; (800c60c <DC_MOTOR_Set_Speed+0xb4>)
 800c56c:	4613      	mov	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	3304      	adds	r3, #4
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <DC_MOTOR_Set_Speed+0x3c>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800c57e:	79fa      	ldrb	r2, [r7, #7]
 800c580:	4922      	ldr	r1, [pc, #136]	; (800c60c <DC_MOTOR_Set_Speed+0xb4>)
 800c582:	4613      	mov	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	440b      	add	r3, r1
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	88ba      	ldrh	r2, [r7, #4]
 800c590:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800c592:	e035      	b.n	800c600 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800c594:	79fa      	ldrb	r2, [r7, #7]
 800c596:	491d      	ldr	r1, [pc, #116]	; (800c60c <DC_MOTOR_Set_Speed+0xb4>)
 800c598:	4613      	mov	r3, r2
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	440b      	add	r3, r1
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b04      	cmp	r3, #4
 800c5a8:	d10a      	bne.n	800c5c0 <DC_MOTOR_Set_Speed+0x68>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800c5aa:	79fa      	ldrb	r2, [r7, #7]
 800c5ac:	4917      	ldr	r1, [pc, #92]	; (800c60c <DC_MOTOR_Set_Speed+0xb4>)
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4413      	add	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	440b      	add	r3, r1
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	88ba      	ldrh	r2, [r7, #4]
 800c5bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c5be:	e01f      	b.n	800c600 <DC_MOTOR_Set_Speed+0xa8>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800c5c0:	79fa      	ldrb	r2, [r7, #7]
 800c5c2:	4912      	ldr	r1, [pc, #72]	; (800c60c <DC_MOTOR_Set_Speed+0xb4>)
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	440b      	add	r3, r1
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b08      	cmp	r3, #8
 800c5d4:	d10a      	bne.n	800c5ec <DC_MOTOR_Set_Speed+0x94>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 800c5d6:	79fa      	ldrb	r2, [r7, #7]
 800c5d8:	490c      	ldr	r1, [pc, #48]	; (800c60c <DC_MOTOR_Set_Speed+0xb4>)
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	88ba      	ldrh	r2, [r7, #4]
 800c5e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c5ea:	e009      	b.n	800c600 <DC_MOTOR_Set_Speed+0xa8>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800c5ec:	79fa      	ldrb	r2, [r7, #7]
 800c5ee:	4907      	ldr	r1, [pc, #28]	; (800c60c <DC_MOTOR_Set_Speed+0xb4>)
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	88ba      	ldrh	r2, [r7, #4]
 800c5fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	0800c964 	.word	0x0800c964

0800c610 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800c610:	b480      	push	{r7}
 800c612:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800c614:	4b14      	ldr	r3, [pc, #80]	; (800c668 <DWT_Delay_Init+0x58>)
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	4a13      	ldr	r2, [pc, #76]	; (800c668 <DWT_Delay_Init+0x58>)
 800c61a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c61e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800c620:	4b11      	ldr	r3, [pc, #68]	; (800c668 <DWT_Delay_Init+0x58>)
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	4a10      	ldr	r2, [pc, #64]	; (800c668 <DWT_Delay_Init+0x58>)
 800c626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c62a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <DWT_Delay_Init+0x5c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a0e      	ldr	r2, [pc, #56]	; (800c66c <DWT_Delay_Init+0x5c>)
 800c632:	f023 0301 	bic.w	r3, r3, #1
 800c636:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <DWT_Delay_Init+0x5c>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a0b      	ldr	r2, [pc, #44]	; (800c66c <DWT_Delay_Init+0x5c>)
 800c63e:	f043 0301 	orr.w	r3, r3, #1
 800c642:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800c644:	4b09      	ldr	r3, [pc, #36]	; (800c66c <DWT_Delay_Init+0x5c>)
 800c646:	2200      	movs	r2, #0
 800c648:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800c64a:	bf00      	nop
    __ASM volatile ("NOP");
 800c64c:	bf00      	nop
    __ASM volatile ("NOP");
 800c64e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800c650:	4b06      	ldr	r3, [pc, #24]	; (800c66c <DWT_Delay_Init+0x5c>)
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800c658:	2300      	movs	r3, #0
 800c65a:	e000      	b.n	800c65e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800c65c:	2301      	movs	r3, #1
    }
}
 800c65e:	4618      	mov	r0, r3
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	e000edf0 	.word	0xe000edf0
 800c66c:	e0001000 	.word	0xe0001000

0800c670 <__libc_init_array>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	4d0d      	ldr	r5, [pc, #52]	; (800c6a8 <__libc_init_array+0x38>)
 800c674:	4c0d      	ldr	r4, [pc, #52]	; (800c6ac <__libc_init_array+0x3c>)
 800c676:	1b64      	subs	r4, r4, r5
 800c678:	10a4      	asrs	r4, r4, #2
 800c67a:	2600      	movs	r6, #0
 800c67c:	42a6      	cmp	r6, r4
 800c67e:	d109      	bne.n	800c694 <__libc_init_array+0x24>
 800c680:	4d0b      	ldr	r5, [pc, #44]	; (800c6b0 <__libc_init_array+0x40>)
 800c682:	4c0c      	ldr	r4, [pc, #48]	; (800c6b4 <__libc_init_array+0x44>)
 800c684:	f000 f820 	bl	800c6c8 <_init>
 800c688:	1b64      	subs	r4, r4, r5
 800c68a:	10a4      	asrs	r4, r4, #2
 800c68c:	2600      	movs	r6, #0
 800c68e:	42a6      	cmp	r6, r4
 800c690:	d105      	bne.n	800c69e <__libc_init_array+0x2e>
 800c692:	bd70      	pop	{r4, r5, r6, pc}
 800c694:	f855 3b04 	ldr.w	r3, [r5], #4
 800c698:	4798      	blx	r3
 800c69a:	3601      	adds	r6, #1
 800c69c:	e7ee      	b.n	800c67c <__libc_init_array+0xc>
 800c69e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6a2:	4798      	blx	r3
 800c6a4:	3601      	adds	r6, #1
 800c6a6:	e7f2      	b.n	800c68e <__libc_init_array+0x1e>
 800c6a8:	0800c994 	.word	0x0800c994
 800c6ac:	0800c994 	.word	0x0800c994
 800c6b0:	0800c994 	.word	0x0800c994
 800c6b4:	0800c998 	.word	0x0800c998

0800c6b8 <memset>:
 800c6b8:	4402      	add	r2, r0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d100      	bne.n	800c6c2 <memset+0xa>
 800c6c0:	4770      	bx	lr
 800c6c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6c6:	e7f9      	b.n	800c6bc <memset+0x4>

0800c6c8 <_init>:
 800c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ca:	bf00      	nop
 800c6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ce:	bc08      	pop	{r3}
 800c6d0:	469e      	mov	lr, r3
 800c6d2:	4770      	bx	lr

0800c6d4 <_fini>:
 800c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d6:	bf00      	nop
 800c6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6da:	bc08      	pop	{r3}
 800c6dc:	469e      	mov	lr, r3
 800c6de:	4770      	bx	lr
